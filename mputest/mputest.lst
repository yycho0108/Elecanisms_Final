
mputest.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	32 2c 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	32 2c 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	32 2c 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	32 2c 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	32 2c 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	32 2c 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	32 2c 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <__CONFIG1-0x156e0>:
 11e:	32 2c 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <__CONFIG2-0x1569e>:
 15e:	32 2c 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <__CONFIG3-0x1569a>:
 160:	32 2c 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	32 2c 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	32 2c 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	32 2c 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	32 2c 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	32 2c 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	32 2c 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	32 2c 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	32 2c 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	32 2c 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	32 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	32 2c 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	32 2c 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	32 2c 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	32 2c 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	32 2c 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	32 2c 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	32 2c 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	32 2c 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	32 2c 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	32 2c 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	32 2c 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	32 2c 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	32 2c 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	32 2c 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	32 2c 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	32 2c 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	32 2c 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	32 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	32 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	32 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	32 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	32 2c 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	32 2c 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	32 2c 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	32 2c 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	32 2c 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	32 2c 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	32 2c 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	32 2c 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	32 2c 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	32 2c 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	32 2c 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	32 2c 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	32 2c 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	32 2c 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	32 2c 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	32 2c 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	32 2c 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	32 2c 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	32 2c 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	32 2c 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	32 2c 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	32 2c 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	32 2c 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	32 2c 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	32 2c 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	32 2c 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	32 2c 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	32 2c 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	32 2c 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	0f c8 20    	mov.w     #0xc80, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	7d 00 07    	rcall     0x1220 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	60 c0 22    	mov.w     #0x2c06, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	a4 29 02    	call      0x29a4 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	20 06 20    	mov.w     #0x62, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	b2 22 04    	goto      0x22b2 <___digitalRead>
    1216:	00 00 00 
    1218:	6e 22 04    	goto      0x226e <___digitalWrite>
    121a:	00 00 00 
    121c:	d4 22 04    	goto      0x22d4 <___analogRead>
    121e:	00 00 00 

00001220 <__crt_start_mode>:
    1220:	00 00 05    	retlw.w   #0x0, w0

00001222 <___subsf3>:
    1222:	03 f0 a2    	btg.w     w3, #0xf

00001224 <___addsf3>:
    1224:	88 9f be    	mov.d     w8, [w15++]
    1226:	8a 9f be    	mov.d     w10, [w15++]
    1228:	8c 1f 78    	mov.w     w12, [w15++]
    122a:	f5 00 07    	rcall     0x1416 <__funpack2>
    122c:	fc 00 33    	bra       N, 0x1426 <__fPropagateNaN>
    122e:	64 50 e1    	cp.w      w10, #0x4
    1230:	4f 00 32    	bra       Z, 0x12d0 <aisinfinite>

00001232 <checkspecialb>:
    1232:	64 20 e1    	cp.w      w4, #0x4
    1234:	52 00 32    	bra       Z, 0x12da <return2>
    1236:	03 82 6c    	xor.w     w9, w3, w4
    1238:	07 00 3b    	bra       NN, 0x1248 <getsign>
    123a:	09 05 d0    	sl.w      w9, w10
    123c:	03 06 d0    	sl.w      w3, w12
    123e:	82 0f 54    	sub.w     w8, w2, [w15]
    1240:	0c 06 5d    	subb.w    w10, w12, w12
    1242:	02 00 39    	bra       NC, 0x1248 <getsign>
    1244:	02 00 32    	bra       Z, 0x124a <gotsign>
    1246:	89 01 78    	mov.w     w9, w3

00001248 <getsign>:
    1248:	03 06 78    	mov.w     w3, w12

0000124a <gotsign>:
    124a:	85 82 55    	sub.w     w11, w5, w5
    124c:	04 00 3d    	bra       GE, 0x1256 <expcanonical>
    124e:	00 03 fd    	exch      w0, w6
    1250:	81 03 fd    	exch      w1, w7
    1252:	85 02 ea    	neg.w     w5, w5
    1254:	8b 85 42    	add.w     w5, w11, w11

00001256 <expcanonical>:
    1256:	84 0f 72    	ior.w     w4, w4, [w15]
    1258:	02 00 3b    	bra       NN, 0x125e <nonegate>
    125a:	60 00 10    	subr.w    w0, #0x0, w0
    125c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000125e <nonegate>:
    125e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1260:	00 05 eb    	clr.w     w10
    1262:	7a 28 e1    	cp.w      w5, #0x1a
    1264:	0a 00 39    	bra       NC, 0x127a <aligniter>
    1266:	06 00 78    	mov.w     w6, w0
    1268:	c7 5d dd    	sl.w      w11, #0x7, w11
    126a:	f7 07 b2    	and.w     #0x7f, w7
    126c:	87 80 75    	ior.w     w11, w7, w1
    126e:	2d 00 37    	bra       0x12ca <signoff>

00001270 <align>:
    1270:	82 81 71    	ior.w     w3, w2, w3
    1272:	0a 01 78    	mov.w     w10, w2
    1274:	61 05 60    	and.w     w0, #0x1, w10
    1276:	81 80 d1    	asr.w     w1, w1
    1278:	00 80 d3    	rrc.w     w0, w0

0000127a <aligniter>:
    127a:	85 02 e9    	dec.w     w5, w5
    127c:	f9 ff 3b    	bra       NN, 0x1270 <align>

0000127e <aligned>:
    127e:	06 04 40    	add.w     w0, w6, w8
    1280:	87 84 48    	addc.w    w1, w7, w9
    1282:	02 00 3b    	bra       NN, 0x1288 <normalizesum>
    1284:	60 04 14    	subr.w    w8, #0x0, w8
    1286:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001288 <normalizesum>:
    1288:	09 88 a3    	btst.z    w9, #0x8
    128a:	07 00 32    	bra       Z, 0x129a <checknormal>
    128c:	8a 81 71    	ior.w     w3, w10, w3
    128e:	82 81 71    	ior.w     w3, w2, w3
    1290:	61 01 64    	and.w     w8, #0x1, w2
    1292:	89 04 d1    	lsr.w     w9, w9
    1294:	08 84 d3    	rrc.w     w8, w8
    1296:	8b 05 e8    	inc.w     w11, w11
    1298:	17 00 37    	bra       0x12c8 <round>

0000129a <checknormal>:
    129a:	09 78 a3    	btst.z    w9, #0x7
    129c:	13 00 3a    	bra       NZ, 0x12c4 <discardguard>

0000129e <underflow>:
    129e:	0b 00 e0    	cp0.w     w11
    12a0:	13 00 34    	bra       LE, 0x12c8 <round>
    12a2:	8b 05 e9    	dec.w     w11, w11
    12a4:	08 04 44    	add.w     w8, w8, w8
    12a6:	89 84 4c    	addc.w    w9, w9, w9
    12a8:	0a 44 74    	ior.b     w8, w10, w8
    12aa:	09 78 a3    	btst.z    w9, #0x7
    12ac:	0d 00 3a    	bra       NZ, 0x12c8 <round>

000012ae <normalizeloop>:
    12ae:	0b 00 e0    	cp0.w     w11
    12b0:	07 00 34    	bra       LE, 0x12c0 <normalizeexit>
    12b2:	8b 05 e9    	dec.w     w11, w11
    12b4:	08 04 44    	add.w     w8, w8, w8
    12b6:	89 84 4c    	addc.w    w9, w9, w9
    12b8:	01 00 3a    	bra       NZ, 0x12bc <normalizetest>
    12ba:	0b 00 20    	mov.w     #0x0, w11

000012bc <normalizetest>:
    12bc:	09 78 a3    	btst.z    w9, #0x7
    12be:	f7 ff 32    	bra       Z, 0x12ae <normalizeloop>

000012c0 <normalizeexit>:
    12c0:	00 01 eb    	clr.w     w2
    12c2:	02 00 37    	bra       0x12c8 <round>

000012c4 <discardguard>:
    12c4:	82 81 71    	ior.w     w3, w2, w3
    12c6:	0a 01 78    	mov.w     w10, w2

000012c8 <round>:
    12c8:	6b 00 07    	rcall     0x13a0 <__fpack>

000012ca <signoff>:
    12ca:	0c f0 a7    	btsc.w    w12, #0xf
    12cc:	01 f0 a0    	bset.w    w1, #0xf
    12ce:	b4 00 37    	bra       0x1438 <__fbopExit>

000012d0 <aisinfinite>:
    12d0:	64 20 e1    	cp.w      w4, #0x4
    12d2:	02 00 3a    	bra       NZ, 0x12d8 <return8>
    12d4:	83 8f 6c    	xor.w     w9, w3, [w15]
    12d6:	b4 00 33    	bra       N, 0x1440 <__fbopReturnNaN>

000012d8 <return8>:
    12d8:	08 01 be    	mov.d     w8, w2

000012da <return2>:
    12da:	02 00 be    	mov.d     w2, w0
    12dc:	ad 00 37    	bra       0x1438 <__fbopExit>

000012de <___divsf3>:
    12de:	88 9f be    	mov.d     w8, [w15++]
    12e0:	8a 9f be    	mov.d     w10, [w15++]
    12e2:	8c 1f 78    	mov.w     w12, [w15++]
    12e4:	98 00 07    	rcall     0x1416 <__funpack2>
    12e6:	9f 00 33    	bra       N, 0x1426 <__fPropagateNaN>
    12e8:	03 86 6c    	xor.w     w9, w3, w12
    12ea:	64 50 e1    	cp.w      w10, #0x4
    12ec:	2e 00 32    	bra       Z, 0x134a <aisinfinite>
    12ee:	64 20 e1    	cp.w      w4, #0x4
    12f0:	33 00 32    	bra       Z, 0x1358 <returnZero>
    12f2:	61 50 e1    	cp.w      w10, #0x1
    12f4:	2f 00 32    	bra       Z, 0x1354 <aiszero>
    12f6:	61 20 e1    	cp.w      w4, #0x1
    12f8:	31 00 32    	bra       Z, 0x135c <returnInf>

000012fa <finitenonzero>:
    12fa:	85 85 55    	sub.w     w11, w5, w11
    12fc:	eb 07 b0    	add.w     #0x7e, w11
    12fe:	09 00 20    	mov.w     #0x0, w9
    1300:	08 04 20    	mov.w     #0x40, w8
    1302:	05 00 37    	bra       0x130e <diventry>

00001304 <divnext>:
    1304:	08 04 44    	add.w     w8, w8, w8
    1306:	89 84 4c    	addc.w    w9, w9, w9
    1308:	0a 00 31    	bra       C, 0x131e <divdone> <formsticky>

0000130a <divloop>:
    130a:	06 03 43    	add.w     w6, w6, w6
    130c:	87 83 4b    	addc.w    w7, w7, w7

0000130e <diventry>:
    130e:	00 01 53    	sub.w     w6, w0, w2
    1310:	81 81 5b    	subb.w    w7, w1, w3
    1312:	f8 ff 33    	bra       N, 0x1304 <divnext>
    1314:	02 03 be    	mov.d     w2, w6
    1316:	08 00 a0    	bset.w    w8, #0x0
    1318:	08 04 44    	add.w     w8, w8, w8
    131a:	89 84 4c    	addc.w    w9, w9, w9
    131c:	f6 ff 39    	bra       NC, 0x130a <divloop>

0000131e <divdone>:
    131e:	c6 39 dd    	sl.w      w7, #0x6, w3
    1320:	83 01 73    	ior.w     w6, w3, w3
    1322:	01 00 32    	bra       Z, 0x1326 <stickyok>
    1324:	13 00 20    	mov.w     #0x1, w3

00001326 <stickyok>:
    1326:	89 04 d1    	lsr.w     w9, w9
    1328:	08 84 d3    	rrc.w     w8, w8
    132a:	09 98 a3    	btst.z    w9, #0x9
    132c:	05 00 32    	bra       Z, 0x1338 <guardused>
    132e:	08 00 a7    	btsc.w    w8, #0x0
    1330:	03 00 a0    	bset.w    w3, #0x0
    1332:	89 04 d1    	lsr.w     w9, w9
    1334:	08 84 d3    	rrc.w     w8, w8
    1336:	8b 05 e8    	inc.w     w11, w11

00001338 <guardused>:
    1338:	89 04 d1    	lsr.w     w9, w9
    133a:	08 84 d3    	rrc.w     w8, w8
    133c:	00 01 eb    	clr.w     w2
    133e:	02 81 d2    	rlc.w     w2, w2
    1340:	2f 00 07    	rcall     0x13a0 <__fpack>

00001342 <return0>:
    1342:	01 f0 a1    	bclr.w    w1, #0xf
    1344:	0c f0 a7    	btsc.w    w12, #0xf
    1346:	01 f0 a0    	bset.w    w1, #0xf
    1348:	77 00 37    	bra       0x1438 <__fbopExit>

0000134a <aisinfinite>:
    134a:	64 20 e1    	cp.w      w4, #0x4
    134c:	79 00 32    	bra       Z, 0x1440 <__fbopReturnNaN>

0000134e <return8>:
    134e:	08 01 be    	mov.d     w8, w2

00001350 <return2>:
    1350:	02 00 be    	mov.d     w2, w0
    1352:	f7 ff 37    	bra       0x1342 <return0>

00001354 <aiszero>:
    1354:	61 20 e1    	cp.w      w4, #0x1
    1356:	74 00 32    	bra       Z, 0x1440 <__fbopReturnNaN>

00001358 <returnZero>:
    1358:	60 00 b8    	mul.uu    w0, #0x0, w0
    135a:	f3 ff 37    	bra       0x1342 <return0>

0000135c <returnInf>:
    135c:	00 00 20    	mov.w     #0x0, w0
    135e:	01 f8 27    	mov.w     #0x7f80, w1
    1360:	f0 ff 37    	bra       0x1342 <return0>

00001362 <___eqsf2>:
    1362:	14 00 20    	mov.w     #0x1, w4
    1364:	a4 00 37    	bra       0x14ae <__fcompare>

00001366 <___gesf2>:
    1366:	f4 ff 2f    	mov.w     #0xffff, w4
    1368:	a2 00 37    	bra       0x14ae <__fcompare>

0000136a <___fixunssfsi>:
    136a:	00 01 be    	mov.d     w0, w2
    136c:	3f 00 07    	rcall     0x13ec <__funpack>
    136e:	04 70 a7    	btsc.w    w4, #0x7
    1370:	03 f0 a1    	bclr.w    w3, #0xf
    1372:	03 f8 a3    	btst.z    w3, #0xf
    1374:	13 00 3a    	bra       NZ, 0x139c <returnzero>
    1376:	65 09 b1    	sub.w     #0x96, w5
    1378:	10 00 32    	bra       Z, 0x139a <exit>
    137a:	09 00 35    	bra       LT, 0x138e <shiftright>
    137c:	69 28 e1    	cp.w      w5, #0x9
    137e:	02 00 35    	bra       LT, 0x1384 <shiftleft>
    1380:	01 00 28    	mov.w     #0x8000, w1
    1382:	00 00 05    	retlw.w   #0x0, w0

00001384 <shiftleft>:
    1384:	00 00 40    	add.w     w0, w0, w0
    1386:	81 80 48    	addc.w    w1, w1, w1
    1388:	85 02 e9    	dec.w     w5, w5
    138a:	fc ff 3a    	bra       NZ, 0x1384 <shiftleft>
    138c:	00 00 06    	return    

0000138e <shiftright>:
    138e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    1390:	05 00 35    	bra       LT, 0x139c <returnzero>

00001392 <shiftrightloop>:
    1392:	81 00 d1    	lsr.w     w1, w1
    1394:	00 80 d3    	rrc.w     w0, w0
    1396:	85 02 e8    	inc.w     w5, w5
    1398:	fc ff 3a    	bra       NZ, 0x1392 <shiftrightloop>

0000139a <exit>:
    139a:	00 00 06    	return    

0000139c <returnzero>:
    139c:	80 00 eb    	clr.w     w1
    139e:	00 00 05    	retlw.w   #0x0, w0

000013a0 <__fpack>:
    13a0:	81 00 20    	mov.w     #0x8, w1
    13a2:	61 80 55    	sub.w     w11, #0x1, w0
    13a4:	0b 00 3d    	bra       GE, 0x13bc <notsubnormal>
    13a6:	0b 00 20    	mov.w     #0x0, w11
    13a8:	61 fe 2f    	mov.w     #0xffe6, w1
    13aa:	01 00 e1    	cp.w      w0, w1
    13ac:	1d 00 34    	bra       LE, 0x13e8 <zerosig>

000013ae <subnormal>:
    13ae:	82 81 71    	ior.w     w3, w2, w3
    13b0:	61 01 64    	and.w     w8, #0x1, w2
    13b2:	89 04 d1    	lsr.w     w9, w9
    13b4:	08 84 d3    	rrc.w     w8, w8
    13b6:	00 00 e8    	inc.w     w0, w0
    13b8:	fa ff 3a    	bra       NZ, 0x13ae <subnormal>
    13ba:	71 00 20    	mov.w     #0x7, w1

000013bc <notsubnormal>:
    13bc:	61 00 64    	and.w     w8, #0x1, w0
    13be:	03 00 70    	ior.w     w0, w3, w0
    13c0:	02 00 60    	and.w     w0, w2, w0
    13c2:	09 00 32    	bra       Z, 0x13d6 <packupandgo>
    13c4:	61 04 44    	add.w     w8, #0x1, w8
    13c6:	e0 84 4c    	addc.w    w9, #0x0, w9
    13c8:	09 88 a5    	btst.z    w9, w1
    13ca:	05 00 32    	bra       Z, 0x13d6 <packupandgo>
    13cc:	8b 05 e8    	inc.w     w11, w11
    13ce:	68 08 e1    	cp.w      w1, #0x8
    13d0:	02 00 3a    	bra       NZ, 0x13d6 <packupandgo>
    13d2:	89 04 d1    	lsr.w     w9, w9
    13d4:	08 84 d3    	rrc.w     w8, w8

000013d6 <packupandgo>:
    13d6:	f2 0f 20    	mov.w     #0xff, w2
    13d8:	02 58 e1    	cp.w      w11, w2
    13da:	05 00 3d    	bra       GE, 0x13e6 <overflow>
    13dc:	c7 5d dd    	sl.w      w11, #0x7, w11
    13de:	f9 07 b2    	and.w     #0x7f, w9
    13e0:	89 80 75    	ior.w     w11, w9, w1
    13e2:	08 00 78    	mov.w     w8, w0
    13e4:	00 00 06    	return    

000013e6 <overflow>:
    13e6:	0b f8 27    	mov.w     #0x7f80, w11

000013e8 <zerosig>:
    13e8:	8b 00 78    	mov.w     w11, w1
    13ea:	00 00 05    	retlw.w   #0x0, w0

000013ec <__funpack>:
    13ec:	c7 0a de    	lsr.w     w1, #0x7, w5
    13ee:	f1 07 b2    	and.w     #0x7f, w1
    13f0:	f5 0f b2    	and.w     #0xff, w5
    13f2:	08 00 32    	bra       Z, 0x1404 <zeroorsub>
    13f4:	e1 cf 42    	add.b     w5, #0x1, [w15]
    13f6:	02 00 32    	bra       Z, 0x13fc <nanorinf>

000013f8 <finitereturn>:
    13f8:	01 70 a0    	bset.w    w1, #0x7
    13fa:	24 00 05    	retlw.w   #0x2, w4

000013fc <nanorinf>:
    13fc:	81 0f 70    	ior.w     w0, w1, [w15]
    13fe:	01 00 32    	bra       Z, 0x1402 <infinite>
    1400:	04 08 05    	retlw.w   #0x80, w4

00001402 <infinite>:
    1402:	44 00 05    	retlw.w   #0x4, w4

00001404 <zeroorsub>:
    1404:	81 0f 70    	ior.w     w0, w1, [w15]
    1406:	02 00 3a    	bra       NZ, 0x140c <subnormal>
    1408:	14 00 05    	retlw.w   #0x1, w4

0000140a <normalize>:
    140a:	85 02 e9    	dec.w     w5, w5

0000140c <subnormal>:
    140c:	00 00 40    	add.w     w0, w0, w0
    140e:	81 c0 48    	addc.b    w1, w1, w1
    1410:	fc ff 3b    	bra       NN, 0x140a <normalize>
    1412:	01 70 a0    	bset.w    w1, #0x7
    1414:	24 00 05    	retlw.w   #0x2, w4

00001416 <__funpack2>:
    1416:	00 04 be    	mov.d     w0, w8
    1418:	e9 ff 07    	rcall     0x13ec <__funpack>
    141a:	00 03 be    	mov.d     w0, w6
    141c:	04 05 be    	mov.d     w4, w10
    141e:	02 00 be    	mov.d     w2, w0
    1420:	e5 ff 07    	rcall     0x13ec <__funpack>
    1422:	84 4f 75    	ior.b     w10, w4, [w15]
    1424:	00 00 06    	return    

00001426 <__fPropagateNaN>:
    1426:	02 00 be    	mov.d     w2, w0
    1428:	64 50 e1    	cp.w      w10, #0x4
    142a:	05 00 36    	bra       LEU, 0x1436 <return0>
    142c:	64 20 e1    	cp.w      w4, #0x4
    142e:	02 00 36    	bra       LEU, 0x1434 <return8>
    1430:	09 68 a3    	btst.z    w9, #0x6
    1432:	01 00 3a    	bra       NZ, 0x1436 <return0>

00001434 <return8>:
    1434:	08 00 be    	mov.d     w8, w0

00001436 <return0>:
    1436:	01 60 a0    	bset.w    w1, #0x6

00001438 <__fbopExit>:
    1438:	4f 06 78    	mov.w     [--w15], w12
    143a:	4f 05 be    	mov.d     [--w15], w10
    143c:	4f 04 be    	mov.d     [--w15], w8
    143e:	00 00 06    	return    

00001440 <__fbopReturnNaN>:
    1440:	f0 ff 2f    	mov.w     #0xffff, w0
    1442:	f1 ff 27    	mov.w     #0x7fff, w1
    1444:	f9 ff 37    	bra       0x1438 <__fbopExit>

00001446 <___mulsf3>:
    1446:	88 9f be    	mov.d     w8, [w15++]
    1448:	8a 9f be    	mov.d     w10, [w15++]
    144a:	8c 1f 78    	mov.w     w12, [w15++]
    144c:	e4 ff 07    	rcall     0x1416 <__funpack2>
    144e:	eb ff 33    	bra       N, 0x1426 <__fPropagateNaN>
    1450:	03 86 6c    	xor.w     w9, w3, w12
    1452:	64 50 e1    	cp.w      w10, #0x4
    1454:	24 00 32    	bra       Z, 0x149e <aisinfinite>
    1456:	64 20 e1    	cp.w      w4, #0x4
    1458:	27 00 32    	bra       Z, 0x14a8 <bisinfinite>
    145a:	61 50 e1    	cp.w      w10, #0x1
    145c:	22 00 32    	bra       Z, 0x14a2 <return8>
    145e:	61 20 e1    	cp.w      w4, #0x1
    1460:	21 00 32    	bra       Z, 0x14a4 <return2>
    1462:	8b 85 42    	add.w     w5, w11, w11
    1464:	eb 07 b1    	sub.w     #0x7e, w11
    1466:	01 34 b8    	mul.uu    w6, w1, w8
    1468:	00 3a b8    	mul.uu    w7, w0, w4
    146a:	08 04 42    	add.w     w4, w8, w8
    146c:	89 84 4a    	addc.w    w5, w9, w9
    146e:	01 3a b8    	mul.uu    w7, w1, w4
    1470:	00 30 b8    	mul.uu    w6, w0, w0
    1472:	88 80 40    	add.w     w1, w8, w1
    1474:	09 01 4a    	addc.w    w4, w9, w2
    1476:	04 00 33    	bra       N, 0x1480 <formsticky>
    1478:	00 00 40    	add.w     w0, w0, w0
    147a:	81 80 48    	addc.w    w1, w1, w1
    147c:	02 01 49    	addc.w    w2, w2, w2
    147e:	8b 05 e9    	dec.w     w11, w11

00001480 <formsticky>:
    1480:	c9 09 dd    	sl.w      w1, #0x9, w3
    1482:	83 01 70    	ior.w     w0, w3, w3
    1484:	01 00 32    	bra       Z, 0x1488 <formRandSig>
    1486:	13 00 20    	mov.w     #0x1, w3

00001488 <formRandSig>:
    1488:	c8 14 de    	lsr.w     w2, #0x8, w9
    148a:	48 14 dd    	sl.w      w2, #0x8, w8
    148c:	47 09 de    	lsr.w     w1, #0x7, w2
    148e:	12 00 b2    	and.w     #0x1, w2
    1490:	c8 08 de    	lsr.w     w1, #0x8, w1
    1492:	08 84 70    	ior.w     w1, w8, w8
    1494:	85 ff 07    	rcall     0x13a0 <__fpack>

00001496 <return0>:
    1496:	01 f0 a1    	bclr.w    w1, #0xf
    1498:	0c f0 a7    	btsc.w    w12, #0xf
    149a:	01 f0 a0    	bset.w    w1, #0xf
    149c:	cd ff 37    	bra       0x1438 <__fbopExit>

0000149e <aisinfinite>:
    149e:	61 20 e1    	cp.w      w4, #0x1
    14a0:	cf ff 32    	bra       Z, 0x1440 <__fbopReturnNaN>

000014a2 <return8>:
    14a2:	08 01 be    	mov.d     w8, w2

000014a4 <return2>:
    14a4:	02 00 be    	mov.d     w2, w0
    14a6:	f7 ff 37    	bra       0x1496 <return0>

000014a8 <bisinfinite>:
    14a8:	61 50 e1    	cp.w      w10, #0x1
    14aa:	fc ff 3a    	bra       NZ, 0x14a4 <return2>
    14ac:	c9 ff 37    	bra       0x1440 <__fbopReturnNaN>

000014ae <__fcompare>:
    14ae:	88 9f be    	mov.d     w8, [w15++]
    14b0:	8a 9f be    	mov.d     w10, [w15++]
    14b2:	84 1f 78    	mov.w     w4, [w15++]
    14b4:	b0 ff 07    	rcall     0x1416 <__funpack2>
    14b6:	4f 00 78    	mov.w     [--w15], w0
    14b8:	11 00 33    	bra       N, 0x14dc <exit>
    14ba:	f0 ff 2f    	mov.w     #0xffff, w0
    14bc:	83 8f 6c    	xor.w     w9, w3, [w15]
    14be:	06 00 3b    	bra       NN, 0x14cc <comparemag>
    14c0:	04 05 65    	and.w     w10, w4, w10
    14c2:	0a 00 a7    	btsc.w    w10, #0x0
    14c4:	08 00 37    	bra       0x14d6 <returnEqual>
    14c6:	09 f0 a6    	btss.w    w9, #0xf
    14c8:	10 00 20    	mov.w     #0x1, w0
    14ca:	08 00 37    	bra       0x14dc <exit>

000014cc <comparemag>:
    14cc:	82 0f 54    	sub.w     w8, w2, [w15]
    14ce:	83 8f 5c    	subb.w    w9, w3, [w15]
    14d0:	03 00 39    	bra       NC, 0x14d8 <adjust>
    14d2:	10 00 20    	mov.w     #0x1, w0
    14d4:	01 00 3e    	bra       GTU, 0x14d8 <adjust>

000014d6 <returnEqual>:
    14d6:	00 00 20    	mov.w     #0x0, w0

000014d8 <adjust>:
    14d8:	09 f0 a7    	btsc.w    w9, #0xf
    14da:	00 00 ea    	neg.w     w0, w0

000014dc <exit>:
    14dc:	4f 05 be    	mov.d     [--w15], w10
    14de:	4f 04 be    	mov.d     [--w15], w8
    14e0:	00 00 e0    	cp0.w     w0
    14e2:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1006:	00 00 00 
    1008:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    100a:	00 00 00 
    100c:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    100e:	00 00 00 
    1010:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1012:	00 00 00 
    1014:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1016:	00 00 00 
    1018:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    101a:	00 00 00 
    101c:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    101e:	00 00 00 
    1020:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1022:	00 00 00 
    1024:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1026:	00 00 00 
    1028:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    102a:	00 00 00 
    102c:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    102e:	00 00 00 
    1030:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1032:	00 00 00 
    1034:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1036:	00 00 00 
    1038:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    103a:	00 00 00 
    103c:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    103e:	00 00 00 
    1040:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1042:	00 00 00 
    1044:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1046:	00 00 00 
    1048:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    104a:	00 00 00 
    104c:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    104e:	00 00 00 
    1050:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1052:	00 00 00 
    1054:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1056:	00 00 00 
    1058:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    105a:	00 00 00 
    105c:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    105e:	00 00 00 
    1060:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1062:	00 00 00 
    1064:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1066:	00 00 00 
    1068:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    106a:	00 00 00 
    106c:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    106e:	00 00 00 
    1070:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1072:	00 00 00 
    1074:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1076:	00 00 00 
    1078:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    107a:	00 00 00 
    107c:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    107e:	00 00 00 
    1080:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1082:	00 00 00 
    1084:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1086:	00 00 00 
    1088:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    108a:	00 00 00 
    108c:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    108e:	00 00 00 
    1090:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1092:	00 00 00 
    1094:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1096:	00 00 00 
    1098:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    109a:	00 00 00 
    109c:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    109e:	00 00 00 
    10a0:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10a2:	00 00 00 
    10a4:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10a6:	00 00 00 
    10a8:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10aa:	00 00 00 
    10ac:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10ae:	00 00 00 
    10b0:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10b2:	00 00 00 
    10b4:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10b6:	00 00 00 
    10b8:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10ba:	00 00 00 
    10bc:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10be:	00 00 00 
    10c0:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10c2:	00 00 00 
    10c4:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10c6:	00 00 00 
    10c8:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10ca:	00 00 00 
    10cc:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10ce:	00 00 00 
    10d0:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10d2:	00 00 00 
    10d4:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10d6:	00 00 00 
    10d8:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10da:	00 00 00 
    10dc:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10de:	00 00 00 
    10e0:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10e2:	00 00 00 
    10e4:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10e6:	00 00 00 
    10e8:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10ea:	00 00 00 
    10ec:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10ee:	00 00 00 
    10f0:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10f2:	00 00 00 
    10f4:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10f6:	00 00 00 
    10f8:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10fa:	00 00 00 
    10fc:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    10fe:	00 00 00 
    1100:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1102:	00 00 00 
    1104:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    1106:	00 00 00 
    1108:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	32 2c 04    	goto      0x2c32 <__DefaultInterrupt>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

000094e4 <_Device>:
    94e4:	12 01       	.word 0x112
    94e6:	00 02       	.word 0x200
    94e8:	00 00       	.word 0
    94ea:	00 40       	.word 0x4000
    94ec:	66 66       	.word 0x6666
    94ee:	03 00       	.word 0x3
    94f0:	00 00       	.word 0
    94f2:	01 02       	.word 0x201
    94f4:	00 01       	.word 0x100

000094f6 <_Configuration1>:
    94f6:	09 02       	.word 0x209
    94f8:	12 00       	.word 0x12
    94fa:	01 01       	.word 0x101
    94fc:	00 a0       	.word 0xa000
    94fe:	32 09       	.word 0x932
    9500:	04 00       	.word 0x4
    9502:	00 00       	.word 0
    9504:	ff 00       	.word 0xff
    9506:	ff 00       	.word 0xff

00009508 <_String0>:
    9508:	04 03       	.word 0x304
    950a:	09 04       	.word 0x409

0000950c <_String1>:
    950c:	1a 03       	.word 0x31a
    950e:	4f 00       	.word 0x4f
    9510:	6c 00       	.word 0x6c
    9512:	69 00       	.word 0x69
    9514:	6e 00       	.word 0x6e
    9516:	20 00       	.word 0x20
    9518:	43 00       	.word 0x43
    951a:	6f 00       	.word 0x6f
    951c:	6c 00       	.word 0x6c
    951e:	6c 00       	.word 0x6c
    9520:	65 00       	.word 0x65
    9522:	67 00       	.word 0x67
    9524:	65 00       	.word 0x65

00009526 <_String2>:
    9526:	20 03       	.word 0x320
    9528:	50 00       	.word 0x50
    952a:	49 00       	.word 0x49
    952c:	43 00       	.word 0x43
    952e:	32 00       	.word 0x32
    9530:	34 00       	.word 0x34
    9532:	46 00       	.word 0x46
    9534:	4a 00       	.word 0x4a
    9536:	31 00       	.word 0x31
    9538:	32 00       	.word 0x32
    953a:	38 00       	.word 0x38
    953c:	47 00       	.word 0x47
    953e:	42 00       	.word 0x42
    9540:	32 00       	.word 0x32
    9542:	30 00       	.word 0x30
    9544:	36 00       	.word 0x36
Disassembly of section .text:

00001546 <_InitUSB>:
BYTE USB_device_status;
BYTE USB_USTAT;
BYTE USB_USWSTAT;

void InitUSB(void) {
    1546:	04 00 fa    	lnk       #0x4
    unsigned int *U1EP;
    BYTE n;

    U1CONbits.PPBRST = 1;
    1548:	94 24 a8    	bset.b    0x494, #0x1
    U1ADDR = 0;
    154a:	96 24 ef    	clr.w     0x496
    U1EIR = 0xFF;
    154c:	f0 0f 20    	mov.w     #0xff, w0
    154e:	70 24 88    	mov.w     w0, 0x48e
    U1CONbits.PPBRST = 0;
    1550:	94 24 a9    	bclr.b    0x494, #0x1
    U1EP = (unsigned int *)&U1EP0;
    1552:	a0 4a 20    	mov.w     #0x4aa, w0
    1554:	10 07 98    	mov.w     w0, [w14+2]
    for (n = 0; n<16; n++)
    1556:	00 40 eb    	clr.b     w0
    1558:	00 4f 78    	mov.b     w0, [w14]
    155a:	07 00 37    	bra       0x156a <.L2>

0000155c <.L3>:
        U1EP[n] = ENDPT_DISABLED;
    155c:	1e 80 fb    	ze        [w14], w0
    155e:	00 00 40    	add.w     w0, w0, w0
    1560:	9e 00 90    	mov.w     [w14+2], w1
    1562:	00 80 40    	add.w     w1, w0, w0
    1564:	80 00 eb    	clr.w     w1
    1566:	01 08 78    	mov.w     w1, [w0]
    1568:	1e 4f e8    	inc.b     [w14], [w14]

0000156a <.L2>:
    156a:	1e 40 78    	mov.b     [w14], w0
    156c:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    156e:	f6 ff 36    	bra       LEU, 0x155c <.L3>
    U1EP0 = ENDPT_CONTROL;
    1570:	d0 00 20    	mov.w     #0xd, w0
    1572:	50 25 88    	mov.w     w0, 0x4aa
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1574:	00 c0 20    	mov.w     #0xc00, w0
    1576:	01 c4 b3    	mov.b     #0x40, w1
    1578:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    157a:	40 a0 20    	mov.w     #0xa04, w0
    157c:	10 60 88    	mov.w     w0, 0xc02
    BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    157e:	10 c0 20    	mov.w     #0xc01, w0
    1580:	81 c8 b3    	mov.b     #0x88, w1
    1582:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    1584:	40 a4 20    	mov.w     #0xa44, w0
    1586:	30 60 88    	mov.w     w0, 0xc06
    BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    1588:	50 c0 20    	mov.w     #0xc05, w0
    158a:	81 c0 b3    	mov.b     #0x8, w1
    158c:	01 48 78    	mov.b     w1, [w0]
    U1CNFG1 = 0x00;
    158e:	a6 24 ef    	clr.w     0x4a6
    U1CNFG2 = 0x00;
    1590:	a8 24 ef    	clr.w     0x4a8
    U1BDTP1 = (unsigned int)BD>>8;
    1592:	00 c0 20    	mov.w     #0xc00, w0
    1594:	48 00 de    	lsr.w     w0, #0x8, w0
    1596:	c0 24 88    	mov.w     w0, 0x498
    U1OTGCONbits.OTGEN = 1;
    1598:	86 44 a8    	bset.b    0x486, #0x2
    U1OTGCONbits.DPPULUP = 1;
    159a:	86 e4 a8    	bset.b    0x486, #0x7
    U1PWRCbits.USBPWR = 1;
    159c:	88 04 a8    	bset.b    0x488, #0x0
    U1CONbits.PKTDIS = 0;
    159e:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_curr_config = 0x00;
    15a0:	3d 68 ef    	clr.b     0x83d
    USB_USWSTAT = 0x00;         // default to powered state
    15a2:	40 68 ef    	clr.b     0x840
    USB_device_status = 0x01;
    15a4:	10 c0 b3    	mov.b     #0x1, w0
    15a6:	3e e8 b7    	mov.b     WREG, 0x83e
    USB_request.setup.bmRequestType = NO_REQUEST;    // No device requests in process
    15a8:	40 a8 20    	mov.w     #0xa84, w0
    15aa:	80 c0 eb    	setm.b    w1
    15ac:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    15ae:	50 a8 20    	mov.w     #0xa85, w0
    15b0:	80 c0 eb    	setm.b    w1
    15b2:	01 48 78    	mov.b     w1, [w0]
#ifdef SHOW_ENUM_STATUS
    TRISB = 0x00;               // set all bits of PORTB as outputs
    PORTB = 0x01;               // set bit zero to indicate Powered status
#endif
    while (U1CONbits.SE0) {}
    15b4:	00 00 00    	nop       

000015b6 <.L4>:
    15b6:	a1 24 80    	mov.w     0x494, w1
    15b8:	00 04 20    	mov.w     #0x40, w0
    15ba:	00 80 60    	and.w     w1, w0, w0
    15bc:	00 00 e0    	cp0.w     w0
    15be:	fb ff 3a    	bra       NZ, 0x15b6 <.L4>
}
    15c0:	00 80 fa    	ulnk      
    15c2:	00 00 06    	return    

000015c4 <_ServiceUSB>:

void ServiceUSB(void) {
    15c4:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    if (U1IRbits.UERRIF) {
    15c6:	50 24 80    	mov.w     0x48a, w0
    15c8:	62 00 60    	and.w     w0, #0x2, w0
    15ca:	00 00 e0    	cp0.w     w0
    15cc:	05 00 32    	bra       Z, 0x15d8 <.L6>
        U1EIR = 0xFF;           // clear all flags in U1EIR to clear U1EIR
    15ce:	f0 0f 20    	mov.w     #0xff, w0
    15d0:	70 24 88    	mov.w     w0, 0x48e
        U1IR = U1IR_UERRIF;     // clear UERRIF
    15d2:	20 00 20    	mov.w     #0x2, w0
    15d4:	50 24 88    	mov.w     w0, 0x48a
    15d6:	90 00 37    	bra       0x16f8 <.L5>

000015d8 <.L6>:
    } else if (U1IRbits.SOFIF) {
    15d8:	50 24 80    	mov.w     0x48a, w0
    15da:	64 00 60    	and.w     w0, #0x4, w0
    15dc:	00 00 e0    	cp0.w     w0
    15de:	03 00 32    	bra       Z, 0x15e6 <.L8>
        U1IR = U1IR_SOFIF;      // clear SOFIF
    15e0:	40 00 20    	mov.w     #0x4, w0
    15e2:	50 24 88    	mov.w     w0, 0x48a
    15e4:	89 00 37    	bra       0x16f8 <.L5>

000015e6 <.L8>:
    } else if (U1IRbits.IDLEIF) {
    15e6:	50 24 80    	mov.w     0x48a, w0
    15e8:	70 00 60    	and.w     w0, #0x10, w0
    15ea:	00 00 e0    	cp0.w     w0
    15ec:	03 00 32    	bra       Z, 0x15f4 <.L9>
        U1IR = U1IR_IDLEIF;     // clear IDLEIF
    15ee:	00 01 20    	mov.w     #0x10, w0
    15f0:	50 24 88    	mov.w     w0, 0x48a
    15f2:	82 00 37    	bra       0x16f8 <.L5>

000015f4 <.L9>:
//      U1PWRCbits.USUSPND = 1; // put USB module in suspend mode
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB4 = 1;
#endif
    } else if (U1IRbits.RESUMEIF) {
    15f4:	51 24 80    	mov.w     0x48a, w1
    15f6:	00 02 20    	mov.w     #0x20, w0
    15f8:	00 80 60    	and.w     w1, w0, w0
    15fa:	00 00 e0    	cp0.w     w0
    15fc:	03 00 32    	bra       Z, 0x1604 <.L10>
        U1IR = U1IR_RESUMEIF;   // clear RESUMEIF
    15fe:	00 02 20    	mov.w     #0x20, w0
    1600:	50 24 88    	mov.w     w0, 0x48a
    1602:	7a 00 37    	bra       0x16f8 <.L5>

00001604 <.L10>:
//      U1PWRCbits.USUSPND = 0; // resume USB module operation
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTB |= 0x01<<USB_USWSTAT;
#endif
    } else if (U1IRbits.STALLIF) {
    1604:	51 24 80    	mov.w     0x48a, w1
    1606:	00 08 20    	mov.w     #0x80, w0
    1608:	00 80 60    	and.w     w1, w0, w0
    160a:	00 00 e0    	cp0.w     w0
    160c:	03 00 32    	bra       Z, 0x1614 <.L11>
        U1IR = U1IR_STALLIF;    // clear STALLIF
    160e:	00 08 20    	mov.w     #0x80, w0
    1610:	50 24 88    	mov.w     w0, 0x48a
    1612:	72 00 37    	bra       0x16f8 <.L5>

00001614 <.L11>:
    } else if (U1IRbits.URSTIF) {
    1614:	50 24 80    	mov.w     0x48a, w0
    1616:	61 00 60    	and.w     w0, #0x1, w0
    1618:	00 00 e0    	cp0.w     w0
    161a:	34 00 32    	bra       Z, 0x1684 <.L12>
        USB_curr_config = 0x00;
    161c:	3d 68 ef    	clr.b     0x83d
        while (U1IRbits.TRNIF) {
    161e:	08 00 37    	bra       0x1630 <.L13>

00001620 <.L14>:
            U1IR = U1IR_TRNIF;  // clear TRNIF to advance the U1STAT FIFO
    1620:	80 00 20    	mov.w     #0x8, w0
    1622:	50 24 88    	mov.w     w0, 0x48a
	...

00001630 <.L13>:
    1630:	50 24 80    	mov.w     0x48a, w0
    1632:	68 00 60    	and.w     w0, #0x8, w0
    1634:	00 00 e0    	cp0.w     w0
    1636:	f4 ff 3a    	bra       NZ, 0x1620 <.L14>
            __builtin_nop();    // wait for six instruction cycles...
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();
            __builtin_nop();    // ...to allow a pending TRNIF to appear
        }
        U1EP = (unsigned int *)&U1EP0;
    1638:	a0 4a 20    	mov.w     #0x4aa, w0
    163a:	10 07 98    	mov.w     w0, [w14+2]
        for (n = 0; n<16; n++)
    163c:	00 40 eb    	clr.b     w0
    163e:	00 4f 78    	mov.b     w0, [w14]
    1640:	07 00 37    	bra       0x1650 <.L15>

00001642 <.L16>:
            U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers to disable all endpoints
    1642:	1e 80 fb    	ze        [w14], w0
    1644:	00 00 40    	add.w     w0, w0, w0
    1646:	9e 00 90    	mov.w     [w14+2], w1
    1648:	00 80 40    	add.w     w1, w0, w0
    164a:	80 00 eb    	clr.w     w1
    164c:	01 08 78    	mov.w     w1, [w0]
    164e:	1e 4f e8    	inc.b     [w14], [w14]

00001650 <.L15>:
    1650:	1e 40 78    	mov.b     [w14], w0
    1652:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    1654:	f6 ff 36    	bra       LEU, 0x1642 <.L16>
        BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1656:	00 c0 20    	mov.w     #0xc00, w0
    1658:	01 c4 b3    	mov.b     #0x40, w1
    165a:	01 48 78    	mov.b     w1, [w0]
        BD[EP0OUT].address = EP0_OUT_buffer;    // EP0 OUT gets a buffer
    165c:	40 a0 20    	mov.w     #0xa04, w0
    165e:	10 60 88    	mov.w     w0, 0xc02
        BD[EP0OUT].status = 0x88;               // set UOWN bit (USB can write)
    1660:	10 c0 20    	mov.w     #0xc01, w0
    1662:	81 c8 b3    	mov.b     #0x88, w1
    1664:	01 48 78    	mov.b     w1, [w0]
        BD[EP0IN].address = EP0_IN_buffer;      // EP0 IN gets a buffer
    1666:	40 a4 20    	mov.w     #0xa44, w0
    1668:	30 60 88    	mov.w     w0, 0xc06
        BD[EP0IN].status = 0x08;                // clear UOWN bit (MCU can write)
    166a:	50 c0 20    	mov.w     #0xc05, w0
    166c:	81 c0 b3    	mov.b     #0x8, w1
    166e:	01 48 78    	mov.b     w1, [w0]
        U1ADDR = 0x00;                  // set USB Address to 0
    1670:	96 24 ef    	clr.w     0x496
        U1IR = 0xFF;                    // clear all the USB interrupt flags
    1672:	f0 0f 20    	mov.w     #0xff, w0
    1674:	50 24 88    	mov.w     w0, 0x48a
        U1EP0 = ENDPT_CONTROL;          // EP0 is a control pipe and requires an ACK
    1676:	d0 00 20    	mov.w     #0xd, w0
    1678:	50 25 88    	mov.w     w0, 0x4aa
//      U1EIE = 0x00FF;                 // enable all USB error interrupts
        USB_USWSTAT = DEFAULT_STATE;
    167a:	10 c0 b3    	mov.b     #0x1, w0
    167c:	40 e8 b7    	mov.b     WREG, 0x840
        USB_device_status = 0x01;       // self powered, remote wakeup disabled
    167e:	10 c0 b3    	mov.b     #0x1, w0
    1680:	3e e8 b7    	mov.b     WREG, 0x83e
    1682:	3a 00 37    	bra       0x16f8 <.L5>

00001684 <.L12>:
#ifdef SHOW_ENUM_STATUS
        PORTB &= 0xE0;
        PORTBbits.RB1 = 1;              // set bit 1 of PORTB to indicate Powered state
#endif
    } else if (U1IRbits.TRNIF) {
    1684:	50 24 80    	mov.w     0x48a, w0
    1686:	68 00 60    	and.w     w0, #0x8, w0
    1688:	00 00 e0    	cp0.w     w0
    168a:	36 00 32    	bra       Z, 0x16f8 <.L5>
        buf_desc_ptr = &BD[U1STAT>>3];  // ENDPT and DIR bits of U1STAT provide the offset into the buffer descriptor table
    168c:	90 24 80    	mov.w     0x492, w0
    168e:	43 00 de    	lsr.w     w0, #0x3, w0
    1690:	c2 00 dd    	sl.w      w0, #0x2, w1
    1692:	00 c0 20    	mov.w     #0xc00, w0
    1694:	00 80 40    	add.w     w1, w0, w0
    1696:	20 07 98    	mov.w     w0, [w14+4]
        USB_buffer_desc.status = buf_desc_ptr->status;
    1698:	2e 00 90    	mov.w     [w14+4], w0
    169a:	10 40 90    	mov.b     [w0+1], w0
    169c:	31 e8 b7    	mov.b     WREG, 0x831
        USB_buffer_desc.bytecount = buf_desc_ptr->bytecount;
    169e:	2e 00 90    	mov.w     [w14+4], w0
    16a0:	10 40 78    	mov.b     [w0], w0
    16a2:	30 e8 b7    	mov.b     WREG, 0x830
        USB_buffer_desc.address = buf_desc_ptr->address;
    16a4:	2e 00 90    	mov.w     [w14+4], w0
    16a6:	10 00 90    	mov.w     [w0+2], w0
    16a8:	90 41 88    	mov.w     w0, 0x832
        USB_USTAT = U1STAT;             // save the USB status register
    16aa:	90 24 80    	mov.w     0x492, w0
    16ac:	00 40 78    	mov.b     w0, w0
    16ae:	3f e8 b7    	mov.b     WREG, 0x83f
        U1IR = U1IR_TRNIF;              // clear TRNIF
    16b0:	80 00 20    	mov.w     #0x8, w0
    16b2:	50 24 88    	mov.w     w0, 0x48a
#ifdef SHOW_ENUM_STATUS
        if (USB_USTAT&0xF0==EP0) {      // toggle RB5 to reflect EP0 activity
            PORTB ^= 0x20;
        }
#endif
        USB_error_flags = 0x00;         // clear USB error flags
    16b4:	3c 68 ef    	clr.b     0x83c
        switch (USB_buffer_desc.status&0x3C) {    // extract PID bits
    16b6:	31 c8 bf    	mov.b     0x831, WREG
    16b8:	80 80 fb    	ze        w0, w1
    16ba:	c0 03 20    	mov.w     #0x3c, w0
    16bc:	00 80 60    	and.w     w1, w0, w0
    16be:	41 02 20    	mov.w     #0x24, w1
    16c0:	81 0f 50    	sub.w     w0, w1, [w15]
    16c2:	08 00 32    	bra       Z, 0x16d4 <.L19>
    16c4:	41 03 20    	mov.w     #0x34, w1
    16c6:	81 0f 50    	sub.w     w0, w1, [w15]
    16c8:	03 00 32    	bra       Z, 0x16d0 <.L20>
    16ca:	e4 0f 50    	sub.w     w0, #0x4, [w15]
    16cc:	05 00 32    	bra       Z, 0x16d8 <.L18>
    16ce:	05 00 37    	bra       0x16da <.L17>

000016d0 <.L20>:
            case TOKEN_SETUP:
                ProcessSetupToken();
    16d0:	15 00 07    	rcall     0x16fc <_ProcessSetupToken> <L0> <.LFB2> <.LFE1>
                break;
    16d2:	03 00 37    	bra       0x16da <.L17>

000016d4 <.L19>:
            case TOKEN_IN:
                ProcessInToken();
    16d4:	da 02 07    	rcall     0x1c8a <_ProcessInToken> <L0> <.LFB4> <.LFE3>
                break;
    16d6:	01 00 37    	bra       0x16da <.L17>

000016d8 <.L18>:
            case TOKEN_OUT:
                ProcessOutToken();
    16d8:	0c 03 07    	rcall     0x1cf2 <_ProcessOutToken> <L0> <.LFB5> <.LFE4>

000016da <.L17>:
        }
        if (USB_error_flags&0x01) {             // if there was a Request Error...
    16da:	3c c8 bf    	mov.b     0x83c, WREG
    16dc:	00 80 fb    	ze        w0, w0
    16de:	61 00 60    	and.w     w0, #0x1, w0
    16e0:	00 40 78    	mov.b     w0, w0
    16e2:	00 04 e0    	cp0.b     w0
    16e4:	09 00 32    	bra       Z, 0x16f8 <.L5>
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;   // ...get ready to receive the next Setup token...
    16e6:	00 c0 20    	mov.w     #0xc00, w0
    16e8:	01 c4 b3    	mov.b     #0x40, w1
    16ea:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0x84;
    16ec:	50 c0 20    	mov.w     #0xc05, w0
    16ee:	41 c8 b3    	mov.b     #0x84, w1
    16f0:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = 0x84;                 // ...and issue a protocol stall on EP0
    16f2:	10 c0 20    	mov.w     #0xc01, w0
    16f4:	41 c8 b3    	mov.b     #0x84, w1
    16f6:	01 48 78    	mov.b     w1, [w0]

000016f8 <.L5>:
        }
    }
}
    16f8:	00 80 fa    	ulnk      
    16fa:	00 00 06    	return    

000016fc <_ProcessSetupToken>:

void ProcessSetupToken(void) {
    16fc:	02 00 fa    	lnk       #0x2
    BYTE *buf_ptr;

    buf_ptr = USB_buffer_desc.address;
    16fe:	91 41 80    	mov.w     0x832, w1
    1700:	01 0f 78    	mov.w     w1, [w14]
    USB_setup.bmRequestType = *buf_ptr++;   // copy the setup packet received from the host
    1702:	1e 00 78    	mov.w     [w14], w0
    1704:	90 40 78    	mov.b     [w0], w1
    1706:	40 83 20    	mov.w     #0x834, w0
    1708:	01 48 78    	mov.b     w1, [w0]
    170a:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.bRequest = *buf_ptr++;
    170c:	1e 00 78    	mov.w     [w14], w0
    170e:	90 40 78    	mov.b     [w0], w1
    1710:	40 83 20    	mov.w     #0x834, w0
    1712:	11 40 98    	mov.b     w1, [w0+1]
    1714:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[0] = *buf_ptr++;
    1716:	1e 00 78    	mov.w     [w14], w0
    1718:	90 40 78    	mov.b     [w0], w1
    171a:	40 83 20    	mov.w     #0x834, w0
    171c:	21 40 98    	mov.b     w1, [w0+2]
    171e:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wValue.b[1] = *buf_ptr++;
    1720:	1e 00 78    	mov.w     [w14], w0
    1722:	90 40 78    	mov.b     [w0], w1
    1724:	40 83 20    	mov.w     #0x834, w0
    1726:	31 40 98    	mov.b     w1, [w0+3]
    1728:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[0] = *buf_ptr++;
    172a:	1e 00 78    	mov.w     [w14], w0
    172c:	90 40 78    	mov.b     [w0], w1
    172e:	40 83 20    	mov.w     #0x834, w0
    1730:	41 40 98    	mov.b     w1, [w0+4]
    1732:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wIndex.b[1] = *buf_ptr++;
    1734:	1e 00 78    	mov.w     [w14], w0
    1736:	90 40 78    	mov.b     [w0], w1
    1738:	40 83 20    	mov.w     #0x834, w0
    173a:	51 40 98    	mov.b     w1, [w0+5]
    173c:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[0] = *buf_ptr++;
    173e:	1e 00 78    	mov.w     [w14], w0
    1740:	90 40 78    	mov.b     [w0], w1
    1742:	40 83 20    	mov.w     #0x834, w0
    1744:	61 40 98    	mov.b     w1, [w0+6]
    1746:	1e 0f e8    	inc.w     [w14], [w14]
    USB_setup.wLength.b[1] = *buf_ptr++;
    1748:	1e 00 78    	mov.w     [w14], w0
    174a:	90 40 78    	mov.b     [w0], w1
    174c:	40 83 20    	mov.w     #0x834, w0
    174e:	71 40 98    	mov.b     w1, [w0+7]
    1750:	1e 0f e8    	inc.w     [w14], [w14]
    BD[EP0OUT].bytecount = MAX_PACKET_SIZE;     // reset the EP0 OUT byte count
    1752:	00 c0 20    	mov.w     #0xc00, w0
    1754:	01 c4 b3    	mov.b     #0x40, w1
    1756:	01 48 78    	mov.b     w1, [w0]
    BD[EP0IN].status = 0x08;                   // return the EP0 IN buffer to us (dequeue any pending requests)
    1758:	50 c0 20    	mov.w     #0xc05, w0
    175a:	81 c0 b3    	mov.b     #0x8, w1
    175c:	01 48 78    	mov.b     w1, [w0]
    BD[EP0OUT].status = (!(USB_setup.bmRequestType&0x80) && (USB_setup.wLength.w)) ? 0xC8:0x88;    // set EP0 OUT UOWN back to USB and DATA0/DATA1 packet according to the request type
    175e:	40 83 20    	mov.w     #0x834, w0
    1760:	10 40 78    	mov.b     [w0], w0
    1762:	00 04 e0    	cp0.b     w0
    1764:	06 00 35    	bra       LT, 0x1772 <.L22>
    1766:	40 83 20    	mov.w     #0x834, w0
    1768:	30 00 90    	mov.w     [w0+6], w0
    176a:	00 00 e0    	cp0.w     w0
    176c:	02 00 32    	bra       Z, 0x1772 <.L22>
    176e:	80 cc b3    	mov.b     #0xc8, w0
    1770:	01 00 37    	bra       0x1774 <.L23>

00001772 <.L22>:
    1772:	80 c8 b3    	mov.b     #0x88, w0

00001774 <.L23>:
    1774:	11 c0 20    	mov.w     #0xc01, w1
    1776:	80 48 78    	mov.b     w0, [w1]
    U1CONbits.PKTDIS = 0;                 // assuming there is nothing to dequeue, clear the packet disable bit
    1778:	94 a4 a9    	bclr.b    0x494, #0x5
    USB_request.setup.bmRequestType = NO_REQUEST;   // clear the device request in process
    177a:	40 a8 20    	mov.w     #0xa84, w0
    177c:	80 c0 eb    	setm.b    w1
    177e:	01 48 78    	mov.b     w1, [w0]
    USB_request.setup.bRequest = NO_REQUEST;
    1780:	50 a8 20    	mov.w     #0xa85, w0
    1782:	80 c0 eb    	setm.b    w1
    1784:	01 48 78    	mov.b     w1, [w0]
    switch (USB_setup.bmRequestType&0x60) {    // extract request type bits
    1786:	40 83 20    	mov.w     #0x834, w0
    1788:	10 40 78    	mov.b     [w0], w0
    178a:	80 80 fb    	ze        w0, w1
    178c:	00 06 20    	mov.w     #0x60, w0
    178e:	00 80 60    	and.w     w1, w0, w0
    1790:	00 00 e0    	cp0.w     w0
    1792:	04 00 32    	bra       Z, 0x179c <.L25>
    1794:	01 04 20    	mov.w     #0x40, w1
    1796:	81 0f 50    	sub.w     w0, w1, [w15]
    1798:	03 00 32    	bra       Z, 0x17a0 <.L26>
    179a:	04 00 37    	bra       0x17a4 <.L28>

0000179c <.L25>:
        case STANDARD_REQ:
            StandardRequests();
    179c:	08 00 07    	rcall     0x17ae <_StandardRequests> <L0> <.LFB3> <.LFE2>
            break;
    179e:	05 00 37    	bra       0x17aa <.L21>

000017a0 <.L26>:
        case VENDOR_REQ:
            VendorRequests();
    17a0:	52 08 07    	rcall     0x2846 <_VendorRequests> <L0> <.LFB4> <.LFE3>
            break;
    17a2:	03 00 37    	bra       0x17aa <.L21>

000017a4 <.L28>:
        case CLASS_REQ:
//            ClassRequests();
//            break;
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    17a4:	3c c8 bf    	mov.b     0x83c, WREG
    17a6:	00 04 a0    	bset.b    w0, #0x0
    17a8:	3c e8 b7    	mov.b     WREG, 0x83c

000017aa <.L21>:
    }
}
    17aa:	00 80 fa    	ulnk      
    17ac:	00 00 06    	return    

000017ae <_StandardRequests>:

void StandardRequests(void) {
    17ae:	06 00 fa    	lnk       #0x6
    BUFDESC *buf_desc_ptr;
    unsigned int *U1EP;
    BYTE n;

    switch (USB_setup.bRequest) {
    17b0:	40 83 20    	mov.w     #0x834, w0
    17b2:	10 40 90    	mov.b     [w0+1], w0
    17b4:	00 80 fb    	ze        w0, w0
    17b6:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    17b8:	77 01 32    	bra       Z, 0x1aa8 <.L34>
    17ba:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    17bc:	0c 00 3c    	bra       GT, 0x17d6 <.L39>
    17be:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    17c0:	bf 00 32    	bra       Z, 0x1940 <.L32>
    17c2:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    17c4:	03 00 3c    	bra       GT, 0x17cc <.L40>
    17c6:	00 00 e0    	cp0.w     w0
    17c8:	12 00 32    	bra       Z, 0x17ee <.L31>
    17ca:	5a 02 37    	bra       0x1c80 <.L30>

000017cc <.L40>:
    17cc:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    17ce:	b8 00 32    	bra       Z, 0x1940 <.L32>
    17d0:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    17d2:	4a 01 32    	bra       Z, 0x1a68 <.L33>
    17d4:	55 02 37    	bra       0x1c80 <.L30>

000017d6 <.L39>:
    17d6:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    17d8:	ed 01 32    	bra       Z, 0x1bb4 <.L36>
    17da:	e9 0f 50    	sub.w     w0, #0x9, [w15]
    17dc:	03 00 3c    	bra       GT, 0x17e4 <.L41>
    17de:	e8 0f 50    	sub.w     w0, #0x8, [w15]
    17e0:	de 01 32    	bra       Z, 0x1b9e <.L35>
    17e2:	4e 02 37    	bra       0x1c80 <.L30>

000017e4 <.L41>:
    17e4:	ea 0f 50    	sub.w     w0, #0xa, [w15]
    17e6:	10 02 32    	bra       Z, 0x1c08 <.L37>
    17e8:	eb 0f 50    	sub.w     w0, #0xb, [w15]
    17ea:	29 02 32    	bra       Z, 0x1c3e <.L38>
    17ec:	49 02 37    	bra       0x1c80 <.L30>

000017ee <.L31>:
        case GET_STATUS:
            switch (USB_setup.bmRequestType&0x1F) { // extract request recipient bits
    17ee:	40 83 20    	mov.w     #0x834, w0
    17f0:	10 40 78    	mov.b     [w0], w0
    17f2:	00 80 fb    	ze        w0, w0
    17f4:	7f 00 60    	and.w     w0, #0x1f, w0
    17f6:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    17f8:	13 00 32    	bra       Z, 0x1820 <.L44>
    17fa:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    17fc:	32 00 32    	bra       Z, 0x1862 <.L45>
    17fe:	00 00 e0    	cp0.w     w0
    1800:	9a 00 3a    	bra       NZ, 0x1936 <.L128>
                case RECIPIENT_DEVICE:
                    BD[EP0IN].address[0] = USB_device_status;
    1802:	30 60 80    	mov.w     0xc06, w0
    1804:	e1 83 20    	mov.w     #0x83e, w1
    1806:	91 40 78    	mov.b     [w1], w1
    1808:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].address[1] = 0x00;
    180a:	30 60 80    	mov.w     0xc06, w0
    180c:	00 00 e8    	inc.w     w0, w0
    180e:	80 40 eb    	clr.b     w1
    1810:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].bytecount = 0x02;
    1812:	40 c0 20    	mov.w     #0xc04, w0
    1814:	21 c0 b3    	mov.b     #0x2, w1
    1816:	01 48 78    	mov.b     w1, [w0]
                    BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    1818:	50 c0 20    	mov.w     #0xc05, w0
    181a:	81 cc b3    	mov.b     #0xc8, w1
    181c:	01 48 78    	mov.b     w1, [w0]
                    break;
    181e:	8f 00 37    	bra       0x193e <.L46>

00001820 <.L44>:
                case RECIPIENT_INTERFACE:
                    switch (USB_USWSTAT) {
    1820:	40 c8 bf    	mov.b     0x840, WREG
    1822:	00 80 fb    	ze        w0, w0
    1824:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1826:	03 00 32    	bra       Z, 0x182e <.L48>
    1828:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    182a:	05 00 32    	bra       Z, 0x1836 <.L49>
    182c:	19 00 37    	bra       0x1860 <.L47>

0000182e <.L48>:
                        case ADDRESS_STATE:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    182e:	3c c8 bf    	mov.b     0x83c, WREG
    1830:	00 04 a0    	bset.b    w0, #0x0
    1832:	3c e8 b7    	mov.b     WREG, 0x83c
                            break;
    1834:	15 00 37    	bra       0x1860 <.L47>

00001836 <.L49>:
                        case CONFIG_STATE:
                            if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    1836:	40 83 20    	mov.w     #0x834, w0
    1838:	40 40 90    	mov.b     [w0+4], w0
    183a:	00 04 e0    	cp0.b     w0
    183c:	0e 00 3a    	bra       NZ, 0x185a <.L50>
                                BD[EP0IN].address[0] = 0x00;
    183e:	30 60 80    	mov.w     0xc06, w0
    1840:	80 40 eb    	clr.b     w1
    1842:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0x00;
    1844:	30 60 80    	mov.w     0xc06, w0
    1846:	00 00 e8    	inc.w     w0, w0
    1848:	80 40 eb    	clr.b     w1
    184a:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 0x02;
    184c:	40 c0 20    	mov.w     #0xc04, w0
    184e:	21 c0 b3    	mov.b     #0x2, w1
    1850:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    1852:	50 c0 20    	mov.w     #0xc05, w0
    1854:	81 cc b3    	mov.b     #0xc8, w1
    1856:	01 48 78    	mov.b     w1, [w0]
    1858:	03 00 37    	bra       0x1860 <.L47>

0000185a <.L50>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    185a:	3c c8 bf    	mov.b     0x83c, WREG
    185c:	00 04 a0    	bset.b    w0, #0x0
    185e:	3c e8 b7    	mov.b     WREG, 0x83c

00001860 <.L47>:
                            }
                    }
                    break;
    1860:	6e 00 37    	bra       0x193e <.L46>

00001862 <.L45>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    1862:	40 c8 bf    	mov.b     0x840, WREG
    1864:	00 80 fb    	ze        w0, w0
    1866:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1868:	03 00 32    	bra       Z, 0x1870 <.L52>
    186a:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    186c:	29 00 32    	bra       Z, 0x18c0 <.L53>
    186e:	5f 00 37    	bra       0x192e <.L129>

00001870 <.L52>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit and see if it is EP0
    1870:	40 83 20    	mov.w     #0x834, w0
    1872:	40 40 90    	mov.b     [w0+4], w0
    1874:	00 80 fb    	ze        w0, w0
    1876:	6f 00 60    	and.w     w0, #0xf, w0
    1878:	00 00 e0    	cp0.w     w0
    187a:	1e 00 3a    	bra       NZ, 0x18b8 <.L54>
                                BD[EP0IN].address[0] = (((USB_setup.wIndex.b[0]&0x80) ? BD[EP0IN].status:BD[EP0OUT].status)&0x04)>>2;    // return the BSTALL bit of EP0 IN or OUT, whichever was requested
    187c:	31 60 80    	mov.w     0xc06, w1
    187e:	40 83 20    	mov.w     #0x834, w0
    1880:	40 40 90    	mov.b     [w0+4], w0
    1882:	00 04 e0    	cp0.b     w0
    1884:	07 00 3d    	bra       GE, 0x1894 <.L55>
    1886:	50 c0 20    	mov.w     #0xc05, w0
    1888:	10 40 78    	mov.b     [w0], w0
    188a:	00 80 fb    	ze        w0, w0
    188c:	64 00 60    	and.w     w0, #0x4, w0
    188e:	42 80 de    	asr.w     w0, #0x2, w0
    1890:	00 40 78    	mov.b     w0, w0
    1892:	06 00 37    	bra       0x18a0 <.L56>

00001894 <.L55>:
    1894:	10 c0 20    	mov.w     #0xc01, w0
    1896:	10 40 78    	mov.b     [w0], w0
    1898:	00 80 fb    	ze        w0, w0
    189a:	64 00 60    	and.w     w0, #0x4, w0
    189c:	42 80 de    	asr.w     w0, #0x2, w0
    189e:	00 40 78    	mov.b     w0, w0

000018a0 <.L56>:
    18a0:	80 48 78    	mov.b     w0, [w1]
                                BD[EP0IN].address[1] = 0x00;
    18a2:	30 60 80    	mov.w     0xc06, w0
    18a4:	00 00 e8    	inc.w     w0, w0
    18a6:	80 40 eb    	clr.b     w1
    18a8:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 0x02;
    18aa:	40 c0 20    	mov.w     #0xc04, w0
    18ac:	21 c0 b3    	mov.b     #0x2, w1
    18ae:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    18b0:	50 c0 20    	mov.w     #0xc05, w0
    18b2:	81 cc b3    	mov.b     #0xc8, w1
    18b4:	01 48 78    	mov.b     w1, [w0]
    18b6:	03 00 37    	bra       0x18be <.L57>

000018b8 <.L54>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    18b8:	3c c8 bf    	mov.b     0x83c, WREG
    18ba:	00 04 a0    	bset.b    w0, #0x0
    18bc:	3c e8 b7    	mov.b     WREG, 0x83c

000018be <.L57>:
                            }
                            break;
    18be:	3a 00 37    	bra       0x1934 <.L58>

000018c0 <.L53>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    18c0:	a0 4a 20    	mov.w     #0x4aa, w0
    18c2:	10 07 98    	mov.w     w0, [w14+2]
                            n = USB_setup.wIndex.b[0]&0x0F;    // get EP and strip off direction bit for offset from U1EP0
    18c4:	40 83 20    	mov.w     #0x834, w0
    18c6:	40 40 90    	mov.b     [w0+4], w0
    18c8:	6f 4f 60    	and.b     w0, #0xf, [w14]
                            buf_desc_ptr = &BD[EP0OUT]+((n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00));    // compute pointer to the buffer descriptor for the specified EP
    18ca:	1e 80 fb    	ze        [w14], w0
    18cc:	00 00 40    	add.w     w0, w0, w0
    18ce:	80 00 78    	mov.w     w0, w1
    18d0:	40 83 20    	mov.w     #0x834, w0
    18d2:	40 40 90    	mov.b     [w0+4], w0
    18d4:	00 00 fb    	se        w0, w0
    18d6:	4f 00 de    	lsr.w     w0, #0xf, w0
    18d8:	01 00 70    	ior.w     w0, w1, w0
    18da:	c2 00 dd    	sl.w      w0, #0x2, w1
    18dc:	00 c0 20    	mov.w     #0xc00, w0
    18de:	00 80 40    	add.w     w1, w0, w0
    18e0:	20 07 98    	mov.w     w0, [w14+4]
                            if (U1EP[n]&((USB_setup.wIndex.b[0]&0x80) ? 0x04:0x08)) { // if the specified EP is enabled for transfers in the specified direction...
    18e2:	1e 80 fb    	ze        [w14], w0
    18e4:	00 00 40    	add.w     w0, w0, w0
    18e6:	9e 00 90    	mov.w     [w14+2], w1
    18e8:	00 80 40    	add.w     w1, w0, w0
    18ea:	90 00 78    	mov.w     [w0], w1
    18ec:	40 83 20    	mov.w     #0x834, w0
    18ee:	40 40 90    	mov.b     [w0+4], w0
    18f0:	00 04 e0    	cp0.b     w0
    18f2:	02 00 3d    	bra       GE, 0x18f8 <.L59>
    18f4:	40 00 20    	mov.w     #0x4, w0
    18f6:	01 00 37    	bra       0x18fa <.L60>

000018f8 <.L59>:
    18f8:	80 00 20    	mov.w     #0x8, w0

000018fa <.L60>:
    18fa:	00 80 60    	and.w     w1, w0, w0
    18fc:	00 00 e0    	cp0.w     w0
    18fe:	13 00 32    	bra       Z, 0x1926 <.L61>
                                BD[EP0IN].address[0] = ((buf_desc_ptr->status)&0x04)>>2;    // ...return the BSTALL bit of the specified EP
    1900:	30 60 80    	mov.w     0xc06, w0
    1902:	ae 00 90    	mov.w     [w14+4], w1
    1904:	91 40 90    	mov.b     [w1+1], w1
    1906:	81 80 fb    	ze        w1, w1
    1908:	e4 80 60    	and.w     w1, #0x4, w1
    190a:	c2 88 de    	asr.w     w1, #0x2, w1
    190c:	81 40 78    	mov.b     w1, w1
    190e:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].address[1] = 0x00;
    1910:	30 60 80    	mov.w     0xc06, w0
    1912:	00 00 e8    	inc.w     w0, w0
    1914:	80 40 eb    	clr.b     w1
    1916:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].bytecount = 0x02;
    1918:	40 c0 20    	mov.w     #0xc04, w0
    191a:	21 c0 b3    	mov.b     #0x2, w1
    191c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    191e:	50 c0 20    	mov.w     #0xc05, w0
    1920:	81 cc b3    	mov.b     #0xc8, w1
    1922:	01 48 78    	mov.b     w1, [w0]
    1924:	03 00 37    	bra       0x192c <.L62>

00001926 <.L61>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    1926:	3c c8 bf    	mov.b     0x83c, WREG
    1928:	00 04 a0    	bset.b    w0, #0x0
    192a:	3c e8 b7    	mov.b     WREG, 0x83c

0000192c <.L62>:
                            }
                            break;
    192c:	03 00 37    	bra       0x1934 <.L58>

0000192e <.L129>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    192e:	3c c8 bf    	mov.b     0x83c, WREG
    1930:	00 04 a0    	bset.b    w0, #0x0
    1932:	3c e8 b7    	mov.b     WREG, 0x83c

00001934 <.L58>:
                    }
                    break;
    1934:	04 00 37    	bra       0x193e <.L46>

00001936 <.L128>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    1936:	3c c8 bf    	mov.b     0x83c, WREG
    1938:	00 04 a0    	bset.b    w0, #0x0
    193a:	3c e8 b7    	mov.b     WREG, 0x83c
            }
            break;
    193c:	a4 01 37    	bra       0x1c86 <.L29>

0000193e <.L46>:
    193e:	a3 01 37    	bra       0x1c86 <.L29>

00001940 <.L32>:
        case CLEAR_FEATURE:
        case SET_FEATURE:
            switch (USB_setup.bmRequestType&0x1F) {         // extract request recipient bits
    1940:	40 83 20    	mov.w     #0x834, w0
    1942:	10 40 78    	mov.b     [w0], w0
    1944:	00 80 fb    	ze        w0, w0
    1946:	7f 00 60    	and.w     w0, #0x1f, w0
    1948:	00 00 e0    	cp0.w     w0
    194a:	03 00 32    	bra       Z, 0x1952 <.L65>
    194c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    194e:	1c 00 32    	bra       Z, 0x1988 <.L66>
    1950:	86 00 37    	bra       0x1a5e <.L130>

00001952 <.L65>:
                case RECIPIENT_DEVICE:
                    switch (USB_setup.wValue.b[0]) {
    1952:	40 83 20    	mov.w     #0x834, w0
    1954:	20 40 90    	mov.b     [w0+2], w0
    1956:	00 80 fb    	ze        w0, w0
    1958:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    195a:	12 00 3a    	bra       NZ, 0x1980 <.L131>
                        case DEVICE_REMOTE_WAKEUP:
                            if (USB_setup.bRequest==CLEAR_FEATURE)
    195c:	40 83 20    	mov.w     #0x834, w0
    195e:	10 40 90    	mov.b     [w0+1], w0
    1960:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1962:	04 00 3a    	bra       NZ, 0x196c <.L69>
                                USB_device_status &= 0xFE;
    1964:	3e c8 bf    	mov.b     0x83e, WREG
    1966:	00 04 a1    	bclr.b    w0, #0x0
    1968:	3e e8 b7    	mov.b     WREG, 0x83e
    196a:	03 00 37    	bra       0x1972 <.L70>

0000196c <.L69>:
                            else
                                USB_device_status |= 0x01;
    196c:	3e c8 bf    	mov.b     0x83e, WREG
    196e:	00 04 a0    	bset.b    w0, #0x0
    1970:	3e e8 b7    	mov.b     WREG, 0x83e

00001972 <.L70>:
                            BD[EP0IN].bytecount = 0x00;          // set EP0 IN byte count to 0
    1972:	40 c0 20    	mov.w     #0xc04, w0
    1974:	80 40 eb    	clr.b     w1
    1976:	01 48 78    	mov.b     w1, [w0]
                            BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    1978:	50 c0 20    	mov.w     #0xc05, w0
    197a:	81 cc b3    	mov.b     #0xc8, w1
    197c:	01 48 78    	mov.b     w1, [w0]
                            break;
    197e:	03 00 37    	bra       0x1986 <.L71>

00001980 <.L131>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    1980:	3c c8 bf    	mov.b     0x83c, WREG
    1982:	00 04 a0    	bset.b    w0, #0x0
    1984:	3c e8 b7    	mov.b     WREG, 0x83c

00001986 <.L71>:
                    }
                    break;
    1986:	6f 00 37    	bra       0x1a66 <.L72>

00001988 <.L66>:
                case RECIPIENT_ENDPOINT:
                    switch (USB_USWSTAT) {
    1988:	40 c8 bf    	mov.b     0x840, WREG
    198a:	00 80 fb    	ze        w0, w0
    198c:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    198e:	03 00 32    	bra       Z, 0x1996 <.L74>
    1990:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1992:	12 00 32    	bra       Z, 0x19b8 <.L75>
    1994:	60 00 37    	bra       0x1a56 <.L132>

00001996 <.L74>:
                        case ADDRESS_STATE:
                            if (!(USB_setup.wIndex.b[0]&0x0F)) {    // get EP, strip off direction bit, and see if its EP0
    1996:	40 83 20    	mov.w     #0x834, w0
    1998:	40 40 90    	mov.b     [w0+4], w0
    199a:	00 80 fb    	ze        w0, w0
    199c:	6f 00 60    	and.w     w0, #0xf, w0
    199e:	00 00 e0    	cp0.w     w0
    19a0:	07 00 3a    	bra       NZ, 0x19b0 <.L76>
                                BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    19a2:	40 c0 20    	mov.w     #0xc04, w0
    19a4:	80 40 eb    	clr.b     w1
    19a6:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    19a8:	50 c0 20    	mov.w     #0xc05, w0
    19aa:	81 cc b3    	mov.b     #0xc8, w1
    19ac:	01 48 78    	mov.b     w1, [w0]
    19ae:	03 00 37    	bra       0x19b6 <.L77>

000019b0 <.L76>:
                            } else {
                                USB_error_flags |= 0x01;    // set Request Error Flag
    19b0:	3c c8 bf    	mov.b     0x83c, WREG
    19b2:	00 04 a0    	bset.b    w0, #0x0
    19b4:	3c e8 b7    	mov.b     WREG, 0x83c

000019b6 <.L77>:
                            }
                            break;
    19b6:	52 00 37    	bra       0x1a5c <.L78>

000019b8 <.L75>:
                        case CONFIG_STATE:
                            U1EP = (unsigned int *)&U1EP0;
    19b8:	a0 4a 20    	mov.w     #0x4aa, w0
    19ba:	10 07 98    	mov.w     w0, [w14+2]
                            if (n = USB_setup.wIndex.b[0]&0x0F) {    // get EP and strip off direction bit for offset from U1EP0, if not EP0...
    19bc:	40 83 20    	mov.w     #0x834, w0
    19be:	40 40 90    	mov.b     [w0+4], w0
    19c0:	6f 4f 60    	and.b     w0, #0xf, [w14]
    19c2:	1e 40 78    	mov.b     [w14], w0
    19c4:	00 04 e0    	cp0.b     w0
    19c6:	3b 00 32    	bra       Z, 0x1a3e <.L79>
                                buf_desc_ptr = &BD[(n<<1)|((USB_setup.wIndex.b[0]&0x80) ? 0x01:0x00)];    // compute pointer to the buffer descriptor for the specified EP
    19c8:	1e 80 fb    	ze        [w14], w0
    19ca:	00 00 40    	add.w     w0, w0, w0
    19cc:	80 00 78    	mov.w     w0, w1
    19ce:	40 83 20    	mov.w     #0x834, w0
    19d0:	40 40 90    	mov.b     [w0+4], w0
    19d2:	00 00 fb    	se        w0, w0
    19d4:	4f 00 de    	lsr.w     w0, #0xf, w0
    19d6:	01 00 70    	ior.w     w0, w1, w0
    19d8:	c2 00 dd    	sl.w      w0, #0x2, w1
    19da:	00 c0 20    	mov.w     #0xc00, w0
    19dc:	00 80 40    	add.w     w1, w0, w0
    19de:	20 07 98    	mov.w     w0, [w14+4]
                                if (USB_setup.wIndex.b[0]&0x80) {    // if the specified EP direction is IN...
    19e0:	40 83 20    	mov.w     #0x834, w0
    19e2:	40 40 90    	mov.b     [w0+4], w0
    19e4:	00 04 e0    	cp0.b     w0
    19e6:	16 00 3d    	bra       GE, 0x1a14 <.L80>
                                    if (U1EP[n]&0x04) {     // if EPn is enabled for IN transfers...
    19e8:	1e 80 fb    	ze        [w14], w0
    19ea:	00 00 40    	add.w     w0, w0, w0
    19ec:	9e 00 90    	mov.w     [w14+2], w1
    19ee:	00 80 40    	add.w     w1, w0, w0
    19f0:	10 00 78    	mov.w     [w0], w0
    19f2:	64 00 60    	and.w     w0, #0x4, w0
    19f4:	00 00 e0    	cp0.w     w0
    19f6:	0a 00 32    	bra       Z, 0x1a0c <.L81>
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x00:0x84;
    19f8:	40 83 20    	mov.w     #0x834, w0
    19fa:	10 40 90    	mov.b     [w0+1], w0
    19fc:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    19fe:	02 00 3a    	bra       NZ, 0x1a04 <.L82>
    1a00:	00 40 eb    	clr.b     w0
    1a02:	01 00 37    	bra       0x1a06 <.L83>

00001a04 <.L82>:
    1a04:	40 c8 b3    	mov.b     #0x84, w0

00001a06 <.L83>:
    1a06:	ae 00 90    	mov.w     [w14+4], w1
    1a08:	90 40 98    	mov.b     w0, [w1+1]
    1a0a:	19 00 37    	bra       0x1a3e <.L79>

00001a0c <.L81>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    1a0c:	3c c8 bf    	mov.b     0x83c, WREG
    1a0e:	00 04 a0    	bset.b    w0, #0x0
    1a10:	3c e8 b7    	mov.b     WREG, 0x83c
    1a12:	15 00 37    	bra       0x1a3e <.L79>

00001a14 <.L80>:
                                    }
                                } else {                    // ...otherwise the specified EP direction is OUT, so...
                                    if (U1EP[n]&0x08) {     // if EPn is enabled for OUT transfers...
    1a14:	1e 80 fb    	ze        [w14], w0
    1a16:	00 00 40    	add.w     w0, w0, w0
    1a18:	9e 00 90    	mov.w     [w14+2], w1
    1a1a:	00 80 40    	add.w     w1, w0, w0
    1a1c:	10 00 78    	mov.w     [w0], w0
    1a1e:	68 00 60    	and.w     w0, #0x8, w0
    1a20:	00 00 e0    	cp0.w     w0
    1a22:	0a 00 32    	bra       Z, 0x1a38 <.L84>
                                        buf_desc_ptr->status = (USB_setup.bRequest==CLEAR_FEATURE) ? 0x88:0x84;
    1a24:	40 83 20    	mov.w     #0x834, w0
    1a26:	10 40 90    	mov.b     [w0+1], w0
    1a28:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1a2a:	02 00 3a    	bra       NZ, 0x1a30 <.L85>
    1a2c:	80 c8 b3    	mov.b     #0x88, w0
    1a2e:	01 00 37    	bra       0x1a32 <.L86>

00001a30 <.L85>:
    1a30:	40 c8 b3    	mov.b     #0x84, w0

00001a32 <.L86>:
    1a32:	ae 00 90    	mov.w     [w14+4], w1
    1a34:	90 40 98    	mov.b     w0, [w1+1]
    1a36:	03 00 37    	bra       0x1a3e <.L79>

00001a38 <.L84>:
                                    } else {
                                        USB_error_flags |= 0x01;    // set Request Error Flag
    1a38:	3c c8 bf    	mov.b     0x83c, WREG
    1a3a:	00 04 a0    	bset.b    w0, #0x0
    1a3c:	3c e8 b7    	mov.b     WREG, 0x83c

00001a3e <.L79>:
                                    }
                                }
                            }
                            if (!(USB_error_flags&0x01)) {  // if there was no Request Error...
    1a3e:	3c c8 bf    	mov.b     0x83c, WREG
    1a40:	00 80 fb    	ze        w0, w0
    1a42:	61 00 60    	and.w     w0, #0x1, w0
    1a44:	00 00 e0    	cp0.w     w0
    1a46:	06 00 3a    	bra       NZ, 0x1a54 <.L87>
                                BD[EP0IN].bytecount = 0x00;
    1a48:	40 c0 20    	mov.w     #0xc04, w0
    1a4a:	80 40 eb    	clr.b     w1
    1a4c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;         // ...send packet as DATA1, set UOWN bit
    1a4e:	50 c0 20    	mov.w     #0xc05, w0
    1a50:	81 cc b3    	mov.b     #0xc8, w1
    1a52:	01 48 78    	mov.b     w1, [w0]

00001a54 <.L87>:
                            }
                            break;
    1a54:	03 00 37    	bra       0x1a5c <.L78>

00001a56 <.L132>:
                        default:
                            USB_error_flags |= 0x01;        // set Request Error Flag
    1a56:	3c c8 bf    	mov.b     0x83c, WREG
    1a58:	00 04 a0    	bset.b    w0, #0x0
    1a5a:	3c e8 b7    	mov.b     WREG, 0x83c

00001a5c <.L78>:
                    }
                    break;
    1a5c:	04 00 37    	bra       0x1a66 <.L72>

00001a5e <.L130>:
                default:
                    USB_error_flags |= 0x01;                // set Request Error Flag
    1a5e:	3c c8 bf    	mov.b     0x83c, WREG
    1a60:	00 04 a0    	bset.b    w0, #0x0
    1a62:	3c e8 b7    	mov.b     WREG, 0x83c
            }
            break;
    1a64:	10 01 37    	bra       0x1c86 <.L29>

00001a66 <.L72>:
    1a66:	0f 01 37    	bra       0x1c86 <.L29>

00001a68 <.L33>:
        case SET_ADDRESS:
            if (USB_setup.wValue.b[0]>0x7F) {       // if new device address is illegal, send Request Error
    1a68:	40 83 20    	mov.w     #0x834, w0
    1a6a:	20 40 90    	mov.b     [w0+2], w0
    1a6c:	00 04 e0    	cp0.b     w0
    1a6e:	04 00 3d    	bra       GE, 0x1a78 <.L88>
                USB_error_flags |= 0x01;            // set Request Error Flag
    1a70:	3c c8 bf    	mov.b     0x83c, WREG
    1a72:	00 04 a0    	bset.b    w0, #0x0
    1a74:	3c e8 b7    	mov.b     WREG, 0x83c
            } else {
                USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a SET_ADDRESS request
                USB_request.setup.bRequest = USB_setup.bRequest;
                USB_request.setup.wValue.w = USB_setup.wValue.w;
                USB_request.setup.wIndex.w = USB_setup.wIndex.w;
                USB_request.setup.wLength.w = USB_setup.wLength.w;
                BD[EP0IN].bytecount = 0x00;              // set EP0 IN byte count to 0
                BD[EP0IN].status = 0xC8;                 // send packet as DATA1, set UOWN bit
            }
            break;
    1a76:	07 01 37    	bra       0x1c86 <.L29>

00001a78 <.L88>:
    1a78:	40 83 20    	mov.w     #0x834, w0
    1a7a:	90 40 78    	mov.b     [w0], w1
    1a7c:	40 a8 20    	mov.w     #0xa84, w0
    1a7e:	01 48 78    	mov.b     w1, [w0]
    1a80:	40 83 20    	mov.w     #0x834, w0
    1a82:	90 40 90    	mov.b     [w0+1], w1
    1a84:	50 a8 20    	mov.w     #0xa85, w0
    1a86:	01 48 78    	mov.b     w1, [w0]
    1a88:	40 83 20    	mov.w     #0x834, w0
    1a8a:	10 00 90    	mov.w     [w0+2], w0
    1a8c:	30 54 88    	mov.w     w0, 0xa86
    1a8e:	40 83 20    	mov.w     #0x834, w0
    1a90:	20 00 90    	mov.w     [w0+4], w0
    1a92:	40 54 88    	mov.w     w0, 0xa88
    1a94:	40 83 20    	mov.w     #0x834, w0
    1a96:	30 00 90    	mov.w     [w0+6], w0
    1a98:	50 54 88    	mov.w     w0, 0xa8a
    1a9a:	40 c0 20    	mov.w     #0xc04, w0
    1a9c:	80 40 eb    	clr.b     w1
    1a9e:	01 48 78    	mov.b     w1, [w0]
    1aa0:	50 c0 20    	mov.w     #0xc05, w0
    1aa2:	81 cc b3    	mov.b     #0xc8, w1
    1aa4:	01 48 78    	mov.b     w1, [w0]
    1aa6:	ef 00 37    	bra       0x1c86 <.L29>

00001aa8 <.L34>:
        case GET_DESCRIPTOR:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;  // processing a GET_DESCRIPTOR request
    1aa8:	40 83 20    	mov.w     #0x834, w0
    1aaa:	90 40 78    	mov.b     [w0], w1
    1aac:	40 a8 20    	mov.w     #0xa84, w0
    1aae:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    1ab0:	40 83 20    	mov.w     #0x834, w0
    1ab2:	90 40 90    	mov.b     [w0+1], w1
    1ab4:	50 a8 20    	mov.w     #0xa85, w0
    1ab6:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    1ab8:	40 83 20    	mov.w     #0x834, w0
    1aba:	10 00 90    	mov.w     [w0+2], w0
    1abc:	30 54 88    	mov.w     w0, 0xa86
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    1abe:	40 83 20    	mov.w     #0x834, w0
    1ac0:	20 00 90    	mov.w     [w0+4], w0
    1ac2:	40 54 88    	mov.w     w0, 0xa88
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    1ac4:	40 83 20    	mov.w     #0x834, w0
    1ac6:	30 00 90    	mov.w     [w0+6], w0
    1ac8:	50 54 88    	mov.w     w0, 0xa8a
            switch (USB_setup.wValue.b[1]) {
    1aca:	40 83 20    	mov.w     #0x834, w0
    1acc:	30 40 90    	mov.b     [w0+3], w0
    1ace:	00 80 fb    	ze        w0, w0
    1ad0:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1ad2:	14 00 32    	bra       Z, 0x1afc <.L92>
    1ad4:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1ad6:	36 00 32    	bra       Z, 0x1b44 <.L93>
    1ad8:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1ada:	5c 00 3a    	bra       NZ, 0x1b94 <.L133>
                case DEVICE:
                    USB_request.data_ptr = Device;
    1adc:	40 4e 29    	mov.w     #0x94e4, w0
    1ade:	60 54 88    	mov.w     w0, 0xa8c
                    USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    1ae0:	60 54 80    	mov.w     0xa8c, w0
    1ae2:	10 40 78    	mov.b     [w0], w0
    1ae4:	00 80 fb    	ze        w0, w0
    1ae6:	70 54 88    	mov.w     w0, 0xa8e
                    if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    1ae8:	40 83 20    	mov.w     #0x834, w0
    1aea:	b0 00 90    	mov.w     [w0+6], w1
    1aec:	70 54 80    	mov.w     0xa8e, w0
    1aee:	80 8f 50    	sub.w     w1, w0, [w15]
    1af0:	03 00 31    	bra       C, 0x1af8 <.L94>
                        USB_request.bytes_left.w = USB_setup.wLength.w;
    1af2:	40 83 20    	mov.w     #0x834, w0
    1af4:	30 00 90    	mov.w     [w0+6], w0
    1af6:	70 54 88    	mov.w     w0, 0xa8e

00001af8 <.L94>:
                    }
                    SendDataPacket();
    1af8:	22 01 07    	rcall     0x1d3e <_SendDataPacket> <L0> <.LFB6> <.LFE5>
                    break;
    1afa:	50 00 37    	bra       0x1b9c <.L95>

00001afc <.L92>:
                case CONFIGURATION:
                    switch (USB_setup.wValue.b[0]) {
    1afc:	40 83 20    	mov.w     #0x834, w0
    1afe:	20 40 90    	mov.b     [w0+2], w0
    1b00:	00 80 fb    	ze        w0, w0
    1b02:	00 00 e0    	cp0.w     w0
    1b04:	03 00 3a    	bra       NZ, 0x1b0c <.L134>
                        case 0:
                            USB_request.data_ptr = Configuration1;
    1b06:	60 4f 29    	mov.w     #0x94f6, w0
    1b08:	60 54 88    	mov.w     w0, 0xa8c
                            break;
    1b0a:	03 00 37    	bra       0x1b12 <.L98>

00001b0c <.L134>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    1b0c:	3c c8 bf    	mov.b     0x83c, WREG
    1b0e:	00 04 a0    	bset.b    w0, #0x0
    1b10:	3c e8 b7    	mov.b     WREG, 0x83c

00001b12 <.L98>:
                    }
                    if (!(USB_error_flags&0x01)) {
    1b12:	3c c8 bf    	mov.b     0x83c, WREG
    1b14:	00 80 fb    	ze        w0, w0
    1b16:	61 00 60    	and.w     w0, #0x1, w0
    1b18:	00 00 e0    	cp0.w     w0
    1b1a:	13 00 3a    	bra       NZ, 0x1b42 <.L99>
                        USB_request.bytes_left.b[0] = USB_request.data_ptr[2];    // wTotalLength starting at an offset of 2
    1b1c:	60 54 80    	mov.w     0xa8c, w0
    1b1e:	00 80 e8    	inc2.w    w0, w0
    1b20:	90 40 78    	mov.b     [w0], w1
    1b22:	e0 a8 20    	mov.w     #0xa8e, w0
    1b24:	01 48 78    	mov.b     w1, [w0]
                        USB_request.bytes_left.b[1] = USB_request.data_ptr[3];
    1b26:	60 54 80    	mov.w     0xa8c, w0
    1b28:	63 00 40    	add.w     w0, #0x3, w0
    1b2a:	90 40 78    	mov.b     [w0], w1
    1b2c:	f0 a8 20    	mov.w     #0xa8f, w0
    1b2e:	01 48 78    	mov.b     w1, [w0]
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    1b30:	40 83 20    	mov.w     #0x834, w0
    1b32:	b0 00 90    	mov.w     [w0+6], w1
    1b34:	70 54 80    	mov.w     0xa8e, w0
    1b36:	80 8f 50    	sub.w     w1, w0, [w15]
    1b38:	03 00 31    	bra       C, 0x1b40 <.L100>
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    1b3a:	40 83 20    	mov.w     #0x834, w0
    1b3c:	30 00 90    	mov.w     [w0+6], w0
    1b3e:	70 54 88    	mov.w     w0, 0xa8e

00001b40 <.L100>:
                        }
                        SendDataPacket();
    1b40:	fe 00 07    	rcall     0x1d3e <_SendDataPacket> <L0> <.LFB6> <.LFE5>

00001b42 <.L99>:
                    }
                    break;
    1b42:	2c 00 37    	bra       0x1b9c <.L95>

00001b44 <.L93>:
                case STRING:
                    switch (USB_setup.wValue.b[0]) {
    1b44:	40 83 20    	mov.w     #0x834, w0
    1b46:	20 40 90    	mov.b     [w0+2], w0
    1b48:	00 80 fb    	ze        w0, w0
    1b4a:	e1 0f 50    	sub.w     w0, #0x1, [w15]
    1b4c:	07 00 32    	bra       Z, 0x1b5c <.L103>
    1b4e:	e2 0f 50    	sub.w     w0, #0x2, [w15]
    1b50:	08 00 32    	bra       Z, 0x1b62 <.L104>
    1b52:	00 00 e0    	cp0.w     w0
    1b54:	09 00 3a    	bra       NZ, 0x1b68 <.L135>
                        case 0:
                            USB_request.data_ptr = String0;
    1b56:	80 50 29    	mov.w     #0x9508, w0
    1b58:	60 54 88    	mov.w     w0, 0xa8c
                            break;
    1b5a:	09 00 37    	bra       0x1b6e <.L105>

00001b5c <.L103>:
                        case 1:
                            USB_request.data_ptr = String1;
    1b5c:	c0 50 29    	mov.w     #0x950c, w0
    1b5e:	60 54 88    	mov.w     w0, 0xa8c
                            break;
    1b60:	06 00 37    	bra       0x1b6e <.L105>

00001b62 <.L104>:
                        case 2:
                            USB_request.data_ptr = String2;
    1b62:	60 52 29    	mov.w     #0x9526, w0
    1b64:	60 54 88    	mov.w     w0, 0xa8c
                            break;
    1b66:	03 00 37    	bra       0x1b6e <.L105>

00001b68 <.L135>:
                        default:
                            USB_error_flags |= 0x01;    // set Request Error Flag
    1b68:	3c c8 bf    	mov.b     0x83c, WREG
    1b6a:	00 04 a0    	bset.b    w0, #0x0
    1b6c:	3c e8 b7    	mov.b     WREG, 0x83c

00001b6e <.L105>:
                    }
                    if (!(USB_error_flags&0x01)) {
    1b6e:	3c c8 bf    	mov.b     0x83c, WREG
    1b70:	00 80 fb    	ze        w0, w0
    1b72:	61 00 60    	and.w     w0, #0x1, w0
    1b74:	00 00 e0    	cp0.w     w0
    1b76:	0d 00 3a    	bra       NZ, 0x1b92 <.L106>
                        USB_request.bytes_left.w = (unsigned int)USB_request.data_ptr[0];
    1b78:	60 54 80    	mov.w     0xa8c, w0
    1b7a:	10 40 78    	mov.b     [w0], w0
    1b7c:	00 80 fb    	ze        w0, w0
    1b7e:	70 54 88    	mov.w     w0, 0xa8e
                        if (USB_setup.wLength.w<USB_request.bytes_left.w) {
    1b80:	40 83 20    	mov.w     #0x834, w0
    1b82:	b0 00 90    	mov.w     [w0+6], w1
    1b84:	70 54 80    	mov.w     0xa8e, w0
    1b86:	80 8f 50    	sub.w     w1, w0, [w15]
    1b88:	03 00 31    	bra       C, 0x1b90 <.L107>
                            USB_request.bytes_left.w = USB_setup.wLength.w;
    1b8a:	40 83 20    	mov.w     #0x834, w0
    1b8c:	30 00 90    	mov.w     [w0+6], w0
    1b8e:	70 54 88    	mov.w     w0, 0xa8e

00001b90 <.L107>:
                        }
                        SendDataPacket();
    1b90:	d6 00 07    	rcall     0x1d3e <_SendDataPacket> <L0> <.LFB6> <.LFE5>

00001b92 <.L106>:
                    }
                    break;
    1b92:	04 00 37    	bra       0x1b9c <.L95>

00001b94 <.L133>:
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
    1b94:	3c c8 bf    	mov.b     0x83c, WREG
    1b96:	00 04 a0    	bset.b    w0, #0x0
    1b98:	3c e8 b7    	mov.b     WREG, 0x83c
            }
            break;
    1b9a:	75 00 37    	bra       0x1c86 <.L29>

00001b9c <.L95>:
    1b9c:	74 00 37    	bra       0x1c86 <.L29>

00001b9e <.L35>:
        case GET_CONFIGURATION:
            BD[EP0IN].address[0] = USB_curr_config;          // copy current device configuration to EP0 IN buffer
    1b9e:	30 60 80    	mov.w     0xc06, w0
    1ba0:	d1 83 20    	mov.w     #0x83d, w1
    1ba2:	91 40 78    	mov.b     [w1], w1
    1ba4:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 0x01;
    1ba6:	40 c0 20    	mov.w     #0xc04, w0
    1ba8:	11 c0 b3    	mov.b     #0x1, w1
    1baa:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;                         // send packet as DATA1, set UOWN bit
    1bac:	50 c0 20    	mov.w     #0xc05, w0
    1bae:	81 cc b3    	mov.b     #0xc8, w1
    1bb0:	01 48 78    	mov.b     w1, [w0]
            break;
    1bb2:	69 00 37    	bra       0x1c86 <.L29>

00001bb4 <.L36>:
        case SET_CONFIGURATION:
            if (USB_setup.wValue.b[0]<=NUM_CONFIGURATIONS) {
    1bb4:	40 83 20    	mov.w     #0x834, w0
    1bb6:	20 40 90    	mov.b     [w0+2], w0
    1bb8:	e1 4f 50    	sub.b     w0, #0x1, [w15]
    1bba:	22 00 3e    	bra       GTU, 0x1c00 <.L108>
                U1EP = (unsigned int *)&U1EP0;
    1bbc:	a0 4a 20    	mov.w     #0x4aa, w0
    1bbe:	10 07 98    	mov.w     w0, [w14+2]
                for (n = 1; n<16; n++)
    1bc0:	10 c0 b3    	mov.b     #0x1, w0
    1bc2:	00 4f 78    	mov.b     w0, [w14]
    1bc4:	07 00 37    	bra       0x1bd4 <.L109>

00001bc6 <.L110>:
                    U1EP[n] = ENDPT_DISABLED;   // clear all EP control registers except for EP0 to disable EP1-EP15 prior to setting configuration
    1bc6:	1e 80 fb    	ze        [w14], w0
    1bc8:	00 00 40    	add.w     w0, w0, w0
    1bca:	9e 00 90    	mov.w     [w14+2], w1
    1bcc:	00 80 40    	add.w     w1, w0, w0
    1bce:	80 00 eb    	clr.w     w1
    1bd0:	01 08 78    	mov.w     w1, [w0]
    1bd2:	1e 4f e8    	inc.b     [w14], [w14]

00001bd4 <.L109>:
    1bd4:	1e 40 78    	mov.b     [w14], w0
    1bd6:	ef 4f 50    	sub.b     w0, #0xf, [w15]
    1bd8:	f6 ff 36    	bra       LEU, 0x1bc6 <.L110>
                switch (USB_curr_config = USB_setup.wValue.b[0]) {
    1bda:	40 83 20    	mov.w     #0x834, w0
    1bdc:	20 40 90    	mov.b     [w0+2], w0
    1bde:	3d e8 b7    	mov.b     WREG, 0x83d
    1be0:	3d c8 bf    	mov.b     0x83d, WREG
    1be2:	00 80 fb    	ze        w0, w0
    1be4:	00 00 e0    	cp0.w     w0
    1be6:	03 00 3a    	bra       NZ, 0x1bee <.L136>
                    case 0:
                        USB_USWSTAT = ADDRESS_STATE;
    1be8:	20 c0 b3    	mov.b     #0x2, w0
    1bea:	40 e8 b7    	mov.b     WREG, 0x840
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB2 = 1;
#endif
                        break;
    1bec:	02 00 37    	bra       0x1bf2 <.L113>

00001bee <.L136>:
                    default:
                        USB_USWSTAT = CONFIG_STATE;
    1bee:	30 c0 b3    	mov.b     #0x3, w0
    1bf0:	40 e8 b7    	mov.b     WREG, 0x840

00001bf2 <.L113>:
#ifdef SHOW_ENUM_STATUS
                        PORTB &= 0xE0;
                        PORTBbits.RB3 = 1;
#endif
                }
                BD[EP0IN].bytecount = 0x00;                  // set EP0 IN byte count to 0
    1bf2:	40 c0 20    	mov.w     #0xc04, w0
    1bf4:	80 40 eb    	clr.b     w1
    1bf6:	01 48 78    	mov.b     w1, [w0]
                BD[EP0IN].status = 0xC8;                     // send packet as DATA1, set UOWN bit
    1bf8:	50 c0 20    	mov.w     #0xc05, w0
    1bfa:	81 cc b3    	mov.b     #0xc8, w1
    1bfc:	01 48 78    	mov.b     w1, [w0]
            } else {
                USB_error_flags |= 0x01;                // set Request Error Flag
            }
            break;
    1bfe:	43 00 37    	bra       0x1c86 <.L29>

00001c00 <.L108>:
    1c00:	3c c8 bf    	mov.b     0x83c, WREG
    1c02:	00 04 a0    	bset.b    w0, #0x0
    1c04:	3c e8 b7    	mov.b     WREG, 0x83c
    1c06:	3f 00 37    	bra       0x1c86 <.L29>

00001c08 <.L37>:
        case GET_INTERFACE:
            switch (USB_USWSTAT) {
    1c08:	40 c8 bf    	mov.b     0x840, WREG
    1c0a:	00 80 fb    	ze        w0, w0
    1c0c:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1c0e:	13 00 3a    	bra       NZ, 0x1c36 <.L137>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    1c10:	40 83 20    	mov.w     #0x834, w0
    1c12:	40 40 90    	mov.b     [w0+4], w0
    1c14:	00 04 e0    	cp0.b     w0
    1c16:	0a 00 3a    	bra       NZ, 0x1c2c <.L117>
                        BD[EP0IN].address[0] = 0x00;         // always send back 0 for bAlternateSetting
    1c18:	30 60 80    	mov.w     0xc06, w0
    1c1a:	80 40 eb    	clr.b     w1
    1c1c:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].bytecount = 0x01;
    1c1e:	40 c0 20    	mov.w     #0xc04, w0
    1c20:	11 c0 b3    	mov.b     #0x1, w1
    1c22:	01 48 78    	mov.b     w1, [w0]
                        BD[EP0IN].status = 0xC8;             // send packet as DATA1, set UOWN bit
    1c24:	50 c0 20    	mov.w     #0xc05, w0
    1c26:	81 cc b3    	mov.b     #0xc8, w1
    1c28:	01 48 78    	mov.b     w1, [w0]
    1c2a:	03 00 37    	bra       0x1c32 <.L118>

00001c2c <.L117>:
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    1c2c:	3c c8 bf    	mov.b     0x83c, WREG
    1c2e:	00 04 a0    	bset.b    w0, #0x0
    1c30:	3c e8 b7    	mov.b     WREG, 0x83c

00001c32 <.L118>:
                    }
                    break;
    1c32:	00 00 00    	nop       
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    1c34:	28 00 37    	bra       0x1c86 <.L29>

00001c36 <.L137>:
    1c36:	3c c8 bf    	mov.b     0x83c, WREG
    1c38:	00 04 a0    	bset.b    w0, #0x0
    1c3a:	3c e8 b7    	mov.b     WREG, 0x83c
    1c3c:	24 00 37    	bra       0x1c86 <.L29>

00001c3e <.L38>:
        case SET_INTERFACE:
            switch (USB_USWSTAT) {
    1c3e:	40 c8 bf    	mov.b     0x840, WREG
    1c40:	00 80 fb    	ze        w0, w0
    1c42:	e3 0f 50    	sub.w     w0, #0x3, [w15]
    1c44:	19 00 3a    	bra       NZ, 0x1c78 <.L138>
                case CONFIG_STATE:
                    if (USB_setup.wIndex.b[0]<NUM_INTERFACES) {
    1c46:	40 83 20    	mov.w     #0x834, w0
    1c48:	40 40 90    	mov.b     [w0+4], w0
    1c4a:	00 04 e0    	cp0.b     w0
    1c4c:	10 00 3a    	bra       NZ, 0x1c6e <.L122>
                        switch (USB_setup.wValue.b[0]) {
    1c4e:	40 83 20    	mov.w     #0x834, w0
    1c50:	20 40 90    	mov.b     [w0+2], w0
    1c52:	00 80 fb    	ze        w0, w0
    1c54:	00 00 e0    	cp0.w     w0
    1c56:	07 00 3a    	bra       NZ, 0x1c66 <.L139>
                            case 0:                     // currently support only bAlternateSetting of 0
                                BD[EP0IN].bytecount = 0x00;  // set EP0 IN byte count to 0
    1c58:	40 c0 20    	mov.w     #0xc04, w0
    1c5a:	80 40 eb    	clr.b     w1
    1c5c:	01 48 78    	mov.b     w1, [w0]
                                BD[EP0IN].status = 0xC8;     // send packet as DATA1, set UOWN bit
    1c5e:	50 c0 20    	mov.w     #0xc05, w0
    1c60:	81 cc b3    	mov.b     #0xc8, w1
    1c62:	01 48 78    	mov.b     w1, [w0]
                                break;
    1c64:	07 00 37    	bra       0x1c74 <.L126>

00001c66 <.L139>:
                            default:
                                USB_error_flags |= 0x01;    // set Request Error Flag
    1c66:	3c c8 bf    	mov.b     0x83c, WREG
    1c68:	00 04 a0    	bset.b    w0, #0x0
    1c6a:	3c e8 b7    	mov.b     WREG, 0x83c
    1c6c:	03 00 37    	bra       0x1c74 <.L126>

00001c6e <.L122>:
                        }
                    } else {
                        USB_error_flags |= 0x01;        // set Request Error Flag
    1c6e:	3c c8 bf    	mov.b     0x83c, WREG
    1c70:	00 04 a0    	bset.b    w0, #0x0
    1c72:	3c e8 b7    	mov.b     WREG, 0x83c

00001c74 <.L126>:
                    }
                    break;
    1c74:	00 00 00    	nop       
                default:
                    USB_error_flags |= 0x01;            // set Request Error Flag
            }
            break;
    1c76:	07 00 37    	bra       0x1c86 <.L29>

00001c78 <.L138>:
    1c78:	3c c8 bf    	mov.b     0x83c, WREG
    1c7a:	00 04 a0    	bset.b    w0, #0x0
    1c7c:	3c e8 b7    	mov.b     WREG, 0x83c
    1c7e:	03 00 37    	bra       0x1c86 <.L29>

00001c80 <.L30>:
        case SET_DESCRIPTOR:
        case SYNCH_FRAME:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    1c80:	3c c8 bf    	mov.b     0x83c, WREG
    1c82:	00 04 a0    	bset.b    w0, #0x0
    1c84:	3c e8 b7    	mov.b     WREG, 0x83c

00001c86 <.L29>:
    }
}
    1c86:	00 80 fa    	ulnk      
    1c88:	00 00 06    	return    

00001c8a <_ProcessInToken>:

void ProcessInToken(void) {
    1c8a:	00 00 fa    	lnk       #0x0
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    1c8c:	3f c8 bf    	mov.b     0x83f, WREG
    1c8e:	80 80 fb    	ze        w0, w1
    1c90:	00 0f 20    	mov.w     #0xf0, w0
    1c92:	00 80 60    	and.w     w1, w0, w0
    1c94:	00 00 e0    	cp0.w     w0
    1c96:	2b 00 3a    	bra       NZ, 0x1cee <.L140>
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    1c98:	40 a8 20    	mov.w     #0xa84, w0
    1c9a:	10 40 78    	mov.b     [w0], w0
    1c9c:	80 80 fb    	ze        w0, w1
    1c9e:	00 06 20    	mov.w     #0x60, w0
    1ca0:	00 80 60    	and.w     w1, w0, w0
    1ca2:	01 02 20    	mov.w     #0x20, w1
    1ca4:	81 0f 50    	sub.w     w0, w1, [w15]
    1ca6:	1f 00 32    	bra       Z, 0x1ce6 <.L154>
    1ca8:	01 04 20    	mov.w     #0x40, w1
    1caa:	81 0f 50    	sub.w     w0, w1, [w15]
    1cac:	1a 00 32    	bra       Z, 0x1ce2 <.L146>
    1cae:	00 00 e0    	cp0.w     w0
    1cb0:	1d 00 3a    	bra       NZ, 0x1cec <.L155>
                case STANDARD_REQ:
                    switch (USB_request.setup.bRequest) {
    1cb2:	50 a8 20    	mov.w     #0xa85, w0
    1cb4:	10 40 78    	mov.b     [w0], w0
    1cb6:	00 80 fb    	ze        w0, w0
    1cb8:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    1cba:	03 00 32    	bra       Z, 0x1cc2 <.L148>
    1cbc:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    1cbe:	0e 00 32    	bra       Z, 0x1cdc <.L149>
                        case SET_ADDRESS:
                            switch (U1ADDR = USB_request.setup.wValue.b[0]) {
                                case 0:
                                    USB_USWSTAT = DEFAULT_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB1 = 1;
#endif
                                    break;
                                  default:
                                    USB_USWSTAT = ADDRESS_STATE;
#ifdef SHOW_ENUM_STATUS
                                    PORTB &= 0xE0;
                                    PORTBbits.RB2 = 1;
#endif
                            }
                            break;
                        case GET_DESCRIPTOR:
                            SendDataPacket();
                            break;
                    }
                    break;
    1cc0:	13 00 37    	bra       0x1ce8 <.L143>

00001cc2 <.L148>:
    1cc2:	60 a8 20    	mov.w     #0xa86, w0
    1cc4:	10 40 78    	mov.b     [w0], w0
    1cc6:	00 80 fb    	ze        w0, w0
    1cc8:	b0 24 88    	mov.w     w0, 0x496
    1cca:	b0 24 80    	mov.w     0x496, w0
    1ccc:	00 00 e0    	cp0.w     w0
    1cce:	03 00 3a    	bra       NZ, 0x1cd6 <.L153>
    1cd0:	10 c0 b3    	mov.b     #0x1, w0
    1cd2:	40 e8 b7    	mov.b     WREG, 0x840
    1cd4:	02 00 37    	bra       0x1cda <.L152>

00001cd6 <.L153>:
    1cd6:	20 c0 b3    	mov.b     #0x2, w0
    1cd8:	40 e8 b7    	mov.b     WREG, 0x840

00001cda <.L152>:
    1cda:	02 00 37    	bra       0x1ce0 <.L147>

00001cdc <.L149>:
    1cdc:	30 00 07    	rcall     0x1d3e <_SendDataPacket> <L0> <.LFB6> <.LFE5>
    1cde:	00 00 00    	nop       

00001ce0 <.L147>:
    1ce0:	03 00 37    	bra       0x1ce8 <.L143>

00001ce2 <.L146>:
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsIn();
    1ce2:	48 06 07    	rcall     0x2974 <_VendorRequestsIn> <L0> <.LFB5> <.LFE4>
                    break;
    1ce4:	01 00 37    	bra       0x1ce8 <.L143>

00001ce6 <.L154>:
    1ce6:	00 00 00    	nop       

00001ce8 <.L143>:
            }
            break;
    1ce8:	00 00 00    	nop       
    1cea:	01 00 37    	bra       0x1cee <.L140>

00001cec <.L155>:
    1cec:	00 00 00    	nop       

00001cee <.L140>:
    }
}
    1cee:	00 80 fa    	ulnk      
    1cf0:	00 00 06    	return    

00001cf2 <_ProcessOutToken>:

void ProcessOutToken(void) {
    1cf2:	00 00 fa    	lnk       #0x0
    switch (USB_USTAT&0xF0) {    // extract the EP bits
    1cf4:	3f c8 bf    	mov.b     0x83f, WREG
    1cf6:	80 80 fb    	ze        w0, w1
    1cf8:	00 0f 20    	mov.w     #0xf0, w0
    1cfa:	00 80 60    	and.w     w1, w0, w0
    1cfc:	00 00 e0    	cp0.w     w0
    1cfe:	1d 00 3a    	bra       NZ, 0x1d3a <.L156>

00001d00 <.L0>:
        case EP0:
            switch (USB_request.setup.bmRequestType&0x60) {   // extract request type bits
    1d00:	40 a8 20    	mov.w     #0xa84, w0
    1d02:	10 40 78    	mov.b     [w0], w0
    1d04:	80 80 fb    	ze        w0, w1
    1d06:	00 06 20    	mov.w     #0x60, w0
    1d08:	00 80 60    	and.w     w1, w0, w0
    1d0a:	01 02 20    	mov.w     #0x20, w1
    1d0c:	81 0f 50    	sub.w     w0, w1, [w15]
    1d0e:	05 00 32    	bra       Z, 0x1d1a <.L163>
    1d10:	01 04 20    	mov.w     #0x40, w1
    1d12:	81 0f 50    	sub.w     w0, w1, [w15]
    1d14:	04 00 3a    	bra       NZ, 0x1d1e <.L164>

00001d16 <.L0>:
                case STANDARD_REQ:
                    break;
                case CLASS_REQ:
                    break;
                case VENDOR_REQ:
                    VendorRequestsOut();
    1d16:	34 06 07    	rcall     0x2980 <_VendorRequestsOut> <L0> <.LFB6> <.LFE5>
                    break;
    1d18:	03 00 37    	bra       0x1d20 <.L159>

00001d1a <.L163>:
    1d1a:	00 00 00    	nop       
    1d1c:	01 00 37    	bra       0x1d20 <.L159>

00001d1e <.L164>:
    1d1e:	00 00 00    	nop       

00001d20 <.L159>:
            }
            BD[EP0OUT].bytecount = MAX_PACKET_SIZE;
    1d20:	00 c0 20    	mov.w     #0xc00, w0
    1d22:	01 c4 b3    	mov.b     #0x40, w1
    1d24:	01 48 78    	mov.b     w1, [w0]
            BD[EP0OUT].status = 0x88;
    1d26:	10 c0 20    	mov.w     #0xc01, w0
    1d28:	81 c8 b3    	mov.b     #0x88, w1
    1d2a:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].bytecount = 0x00;      // set EP0 IN byte count to 0
    1d2c:	40 c0 20    	mov.w     #0xc04, w0
    1d2e:	80 40 eb    	clr.b     w1
    1d30:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    1d32:	50 c0 20    	mov.w     #0xc05, w0
    1d34:	81 cc b3    	mov.b     #0xc8, w1
    1d36:	01 48 78    	mov.b     w1, [w0]
            break;
    1d38:	00 00 00    	nop       

00001d3a <.L156>:
    }
}
    1d3a:	00 80 fa    	ulnk      
    1d3c:	00 00 06    	return    

00001d3e <_SendDataPacket>:

void SendDataPacket(void) {
    1d3e:	02 00 fa    	lnk       #0x2
    BYTE packet_length, n;

    if (USB_request.bytes_left.w<MAX_PACKET_SIZE) {
    1d40:	71 54 80    	mov.w     0xa8e, w1
    1d42:	f0 03 20    	mov.w     #0x3f, w0
    1d44:	80 8f 50    	sub.w     w1, w0, [w15]
    1d46:	0b 00 3e    	bra       GTU, 0x1d5e <.L166>
        packet_length = (BYTE)USB_request.bytes_left.w;
    1d48:	70 54 80    	mov.w     0xa8e, w0
    1d4a:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w = 0;
    1d4c:	00 00 eb    	clr.w     w0
    1d4e:	70 54 88    	mov.w     w0, 0xa8e
        USB_request.setup.bmRequestType = NO_REQUEST;    // sending a short packet, so clear device request
    1d50:	40 a8 20    	mov.w     #0xa84, w0
    1d52:	80 c0 eb    	setm.b    w1
    1d54:	01 48 78    	mov.b     w1, [w0]
        USB_request.setup.bRequest = NO_REQUEST;
    1d56:	50 a8 20    	mov.w     #0xa85, w0
    1d58:	80 c0 eb    	setm.b    w1
    1d5a:	01 48 78    	mov.b     w1, [w0]
    1d5c:	05 00 37    	bra       0x1d68 <.L167>

00001d5e <.L166>:
    } else {
        packet_length = MAX_PACKET_SIZE;
    1d5e:	00 c4 b3    	mov.b     #0x40, w0
    1d60:	00 4f 78    	mov.b     w0, [w14]
        USB_request.bytes_left.w -= MAX_PACKET_SIZE;
    1d62:	70 54 80    	mov.w     0xa8e, w0
    1d64:	00 04 b1    	sub.w     #0x40, w0
    1d66:	70 54 88    	mov.w     w0, 0xa8e

00001d68 <.L167>:
    }
    for (n = 0; n<packet_length; n++) {
    1d68:	00 40 eb    	clr.b     w0
    1d6a:	10 47 98    	mov.b     w0, [w14+1]
    1d6c:	0c 00 37    	bra       0x1d86 <.L168>

00001d6e <.L169>:
        BD[EP0IN].address[n] = *USB_request.data_ptr++;
    1d6e:	31 60 80    	mov.w     0xc06, w1
    1d70:	1e 40 90    	mov.b     [w14+1], w0
    1d72:	00 80 fb    	ze        w0, w0
    1d74:	80 80 40    	add.w     w1, w0, w1
    1d76:	60 54 80    	mov.w     0xa8c, w0
    1d78:	10 41 78    	mov.b     [w0], w2
    1d7a:	82 48 78    	mov.b     w2, [w1]
    1d7c:	00 00 e8    	inc.w     w0, w0
    1d7e:	60 54 88    	mov.w     w0, 0xa8c
    1d80:	1e 40 90    	mov.b     [w14+1], w0
    1d82:	00 40 e8    	inc.b     w0, w0
    1d84:	10 47 98    	mov.b     w0, [w14+1]

00001d86 <.L168>:
    1d86:	1e 40 90    	mov.b     [w14+1], w0
    1d88:	9e 4f 50    	sub.b     w0, [w14], [w15]
    1d8a:	f1 ff 39    	bra       NC, 0x1d6e <.L169>
    }
    BD[EP0IN].bytecount = packet_length;
    1d8c:	40 c0 20    	mov.w     #0xc04, w0
    1d8e:	1e 48 78    	mov.b     [w14], [w0]
    BD[EP0IN].status = ((BD[EP0IN].status^0x40)&0x40)|0x88; // toggle the DATA01 bit, clear the PIDs bits, and set the UOWN and DTS bits
    1d90:	50 c0 20    	mov.w     #0xc05, w0
    1d92:	10 40 78    	mov.b     [w0], w0
    1d94:	00 c0 ea    	com.b     w0, w0
    1d96:	02 c4 b3    	mov.b     #0x40, w2
    1d98:	82 40 60    	and.b     w0, w2, w1
    1d9a:	80 c8 b3    	mov.b     #0x88, w0
    1d9c:	00 c0 70    	ior.b     w1, w0, w0
    1d9e:	80 40 78    	mov.b     w0, w1
    1da0:	50 c0 20    	mov.w     #0xc05, w0
    1da2:	01 48 78    	mov.b     w1, [w0]
}
    1da4:	00 80 fa    	ulnk      
    1da6:	00 00 06    	return    

00001da8 <_init_spi>:
#include "spi.h"

_SPI spi1, spi2, spi3;

void init_spi(void) {
    1da8:	00 00 fa    	lnk       #0x0
    spi_init(&spi1, (uint16_t *)&SPI1STAT, (uint16_t *)&SPI1CON1, 
    1daa:	80 00 20    	mov.w     #0x8, w0
    1dac:	80 1f 78    	mov.w     w0, [w15++]
    1dae:	77 00 20    	mov.w     #0x7, w7
    1db0:	00 43 eb    	clr.b     w6
    1db2:	85 6a 20    	mov.w     #0x6a8, w5
    1db4:	84 24 20    	mov.w     #0x248, w4
    1db6:	43 24 20    	mov.w     #0x244, w3
    1db8:	22 24 20    	mov.w     #0x242, w2
    1dba:	01 24 20    	mov.w     #0x240, w1
    1dbc:	00 a9 20    	mov.w     #0xa90, w0
    1dbe:	1b 00 07    	rcall     0x1df6 <_spi_init> <L0> <.LFB1> <.LFE0>
    1dc0:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&SPI1CON2, (uint16_t *)&SPI1BUF, 
             (uint16_t *)&RPINR20, 0, 7, 8);
    spi_init(&spi2, (uint16_t *)&SPI2STAT, (uint16_t *)&SPI2CON1, 
    1dc2:	b0 00 20    	mov.w     #0xb, w0
    1dc4:	80 1f 78    	mov.w     w0, [w15++]
    1dc6:	a7 00 20    	mov.w     #0xa, w7
    1dc8:	00 43 eb    	clr.b     w6
    1dca:	c5 6a 20    	mov.w     #0x6ac, w5
    1dcc:	84 26 20    	mov.w     #0x268, w4
    1dce:	43 26 20    	mov.w     #0x264, w3
    1dd0:	22 26 20    	mov.w     #0x262, w2
    1dd2:	01 26 20    	mov.w     #0x260, w1
    1dd4:	60 aa 20    	mov.w     #0xaa6, w0
    1dd6:	0f 00 07    	rcall     0x1df6 <_spi_init> <L0> <.LFB1> <.LFE0>
    1dd8:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&SPI2CON2, (uint16_t *)&SPI2BUF, 
             (uint16_t *)&RPINR22, 0, 10, 11);
    spi_init(&spi3, (uint16_t *)&SPI3STAT, (uint16_t *)&SPI3CON1, 
    1dda:	10 02 20    	mov.w     #0x21, w0
    1ddc:	80 1f 78    	mov.w     w0, [w15++]
    1dde:	07 02 20    	mov.w     #0x20, w7
    1de0:	00 43 eb    	clr.b     w6
    1de2:	85 6b 20    	mov.w     #0x6b8, w5
    1de4:	84 28 20    	mov.w     #0x288, w4
    1de6:	43 28 20    	mov.w     #0x284, w3
    1de8:	22 28 20    	mov.w     #0x282, w2
    1dea:	01 28 20    	mov.w     #0x280, w1
    1dec:	c0 ab 20    	mov.w     #0xabc, w0
    1dee:	03 00 07    	rcall     0x1df6 <_spi_init> <L0> <.LFB1> <.LFE0>
    1df0:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&SPI3CON2, (uint16_t *)&SPI3BUF, 
             (uint16_t *)&RPINR28, 0, 32, 33);
}
    1df2:	00 80 fa    	ulnk      
    1df4:	00 00 06    	return    

00001df6 <_spi_init>:

void spi_init(_SPI *self, uint16_t *SPIxSTAT, uint16_t *SPIxCON1, 
              uint16_t *SPIxCON2, uint16_t *SPIxBUF, 
              uint16_t *MISOrpinr, uint8_t MISOrpshift, 
              int16_t MOSIrpnum, int16_t SCKrpnum) {
    1df6:	10 00 fa    	lnk       #0x10
    1df8:	00 0f 78    	mov.w     w0, [w14]
    1dfa:	11 07 98    	mov.w     w1, [w14+2]
    1dfc:	22 07 98    	mov.w     w2, [w14+4]
    1dfe:	33 07 98    	mov.w     w3, [w14+6]
    1e00:	44 07 98    	mov.w     w4, [w14+8]
    1e02:	55 07 98    	mov.w     w5, [w14+10]
    1e04:	46 4f 98    	mov.b     w6, [w14+12]
    1e06:	77 07 98    	mov.w     w7, [w14+14]
    self->SPIxSTAT = SPIxSTAT;
    1e08:	1e 00 78    	mov.w     [w14], w0
    1e0a:	9e 00 90    	mov.w     [w14+2], w1
    1e0c:	01 08 78    	mov.w     w1, [w0]
    self->SPIxCON1 = SPIxCON1;
    1e0e:	1e 00 78    	mov.w     [w14], w0
    1e10:	ae 00 90    	mov.w     [w14+4], w1
    1e12:	11 00 98    	mov.w     w1, [w0+2]
    self->SPIxCON2 = SPIxCON2;
    1e14:	1e 00 78    	mov.w     [w14], w0
    1e16:	be 00 90    	mov.w     [w14+6], w1
    1e18:	21 00 98    	mov.w     w1, [w0+4]
    self->SPIxBUF = SPIxBUF;
    1e1a:	1e 00 78    	mov.w     [w14], w0
    1e1c:	ce 00 90    	mov.w     [w14+8], w1
    1e1e:	31 00 98    	mov.w     w1, [w0+6]
    self->MISOrpinr = MISOrpinr;
    1e20:	1e 00 78    	mov.w     [w14], w0
    1e22:	de 00 90    	mov.w     [w14+10], w1
    1e24:	41 00 98    	mov.w     w1, [w0+8]
    self->MISOrpshift = MISOrpshift;
    1e26:	1e 00 78    	mov.w     [w14], w0
    1e28:	ce 48 90    	mov.b     [w14+12], w1
    1e2a:	21 48 98    	mov.b     w1, [w0+10]
    self->MOSIrpnum = MOSIrpnum;
    1e2c:	1e 00 78    	mov.w     [w14], w0
    1e2e:	fe 00 90    	mov.w     [w14+14], w1
    1e30:	61 00 98    	mov.w     w1, [w0+12]
    self->SCKrpnum = SCKrpnum;
    1e32:	1e 00 78    	mov.w     [w14], w0
    1e34:	ce b8 97    	mov.w     [w14-8], w1
    1e36:	71 00 98    	mov.w     w1, [w0+14]
    self->MISO = NULL;
    1e38:	1e 00 78    	mov.w     [w14], w0
    1e3a:	80 00 eb    	clr.w     w1
    1e3c:	01 08 98    	mov.w     w1, [w0+16]
    self->MOSI = NULL;
    1e3e:	1e 00 78    	mov.w     [w14], w0
    1e40:	80 00 eb    	clr.w     w1
    1e42:	11 08 98    	mov.w     w1, [w0+18]
    self->SCK = NULL;
    1e44:	1e 00 78    	mov.w     [w14], w0
    1e46:	80 00 eb    	clr.w     w1
    1e48:	21 08 98    	mov.w     w1, [w0+20]
}
    1e4a:	00 80 fa    	ulnk      
    1e4c:	00 00 06    	return    

00001e4e <_spi_open>:

void spi_open(_SPI *self, _PIN *MISO, _PIN *MOSI, _PIN *SCK, float freq, uint8_t mode) {
    1e4e:	1a 00 fa    	lnk       #0x1a
    1e50:	88 1f 78    	mov.w     w8, [w15++]
    1e52:	60 07 98    	mov.w     w0, [w14+12]
    1e54:	71 07 98    	mov.w     w1, [w14+14]
    1e56:	02 0f 98    	mov.w     w2, [w14+16]
    1e58:	13 0f 98    	mov.w     w3, [w14+18]
    1e5a:	24 0f 98    	mov.w     w4, [w14+20]
    1e5c:	35 0f 98    	mov.w     w5, [w14+22]
    1e5e:	06 5f 98    	mov.b     w6, [w14+24]
    uint16_t primary, secondary;
    uint16_t modebits[4] = { 0x0100, 0x0000, 0x0140, 0x0040 };
    1e60:	00 10 20    	mov.w     #0x100, w0
    1e62:	20 07 98    	mov.w     w0, [w14+4]
    1e64:	00 00 eb    	clr.w     w0
    1e66:	30 07 98    	mov.w     w0, [w14+6]
    1e68:	00 14 20    	mov.w     #0x140, w0
    1e6a:	40 07 98    	mov.w     w0, [w14+8]
    1e6c:	00 04 20    	mov.w     #0x40, w0
    1e6e:	50 07 98    	mov.w     w0, [w14+10]

    if ((MISO->rpnum==-1) || (MOSI->rpnum==-1) || (SCK->rpnum==-1))
    1e70:	7e 00 90    	mov.w     [w14+14], w0
    1e72:	60 00 90    	mov.w     [w0+12], w0
    1e74:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1e76:	36 01 32    	bra       Z, 0x20e4 <.L21>
    1e78:	0e 08 90    	mov.w     [w14+16], w0
    1e7a:	60 00 90    	mov.w     [w0+12], w0
    1e7c:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1e7e:	34 01 32    	bra       Z, 0x20e8 <.L22>
    1e80:	1e 08 90    	mov.w     [w14+18], w0
    1e82:	60 00 90    	mov.w     [w0+12], w0
    1e84:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1e86:	32 01 32    	bra       Z, 0x20ec <.L23>
        return; // At least one of the specified pins is not an RP pin
    if ((MISO->owner==NULL) && (MOSI->owner==NULL) && (SCK->owner==NULL)) {
    1e88:	7e 00 90    	mov.w     [w14+14], w0
    1e8a:	00 08 90    	mov.w     [w0+16], w0
    1e8c:	00 00 e0    	cp0.w     w0
    1e8e:	97 00 3a    	bra       NZ, 0x1fbe <.L7>
    1e90:	0e 08 90    	mov.w     [w14+16], w0
    1e92:	00 08 90    	mov.w     [w0+16], w0
    1e94:	00 00 e0    	cp0.w     w0
    1e96:	93 00 3a    	bra       NZ, 0x1fbe <.L7>
    1e98:	1e 08 90    	mov.w     [w14+18], w0
    1e9a:	00 08 90    	mov.w     [w0+16], w0
    1e9c:	00 00 e0    	cp0.w     w0
    1e9e:	8f 00 3a    	bra       NZ, 0x1fbe <.L7>
        // All of the specified pins are available and RP pins, so configure 
        // as specified
        pin_digitalIn(MISO);
    1ea0:	7e 00 90    	mov.w     [w14+14], w0
    1ea2:	66 03 07    	rcall     0x2570 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
        pin_digitalOut(MOSI);
    1ea4:	0e 08 90    	mov.w     [w14+16], w0
    1ea6:	8b 03 07    	rcall     0x25be <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_set(MOSI);
    1ea8:	0e 08 90    	mov.w     [w14+16], w0
    1eaa:	e6 03 07    	rcall     0x2678 <_pin_set> <L0> <.LFB8> <.LFE7>
        pin_digitalOut(SCK);
    1eac:	1e 08 90    	mov.w     [w14+18], w0
    1eae:	87 03 07    	rcall     0x25be <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_clear(SCK);
    1eb0:	1e 08 90    	mov.w     [w14+18], w0
    1eb2:	f7 03 07    	rcall     0x26a2 <_pin_clear> <L0> <.LFB9> <.LFE8>
        self->MISO = MISO;
    1eb4:	6e 00 90    	mov.w     [w14+12], w0
    1eb6:	fe 00 90    	mov.w     [w14+14], w1
    1eb8:	01 08 98    	mov.w     w1, [w0+16]
        MISO->owner = (void *)self;
    1eba:	7e 00 90    	mov.w     [w14+14], w0
    1ebc:	ee 00 90    	mov.w     [w14+12], w1
    1ebe:	01 08 98    	mov.w     w1, [w0+16]
        MISO->write = NULL;
    1ec0:	7e 00 90    	mov.w     [w14+14], w0
    1ec2:	80 00 eb    	clr.w     w1
    1ec4:	11 08 98    	mov.w     w1, [w0+18]
        MISO->read = NULL;
    1ec6:	7e 00 90    	mov.w     [w14+14], w0
    1ec8:	80 00 eb    	clr.w     w1
    1eca:	21 08 98    	mov.w     w1, [w0+20]
        self->MOSI = MOSI;
    1ecc:	6e 00 90    	mov.w     [w14+12], w0
    1ece:	8e 08 90    	mov.w     [w14+16], w1
    1ed0:	11 08 98    	mov.w     w1, [w0+18]
        MOSI->owner = (void *)self;
    1ed2:	0e 08 90    	mov.w     [w14+16], w0
    1ed4:	ee 00 90    	mov.w     [w14+12], w1
    1ed6:	01 08 98    	mov.w     w1, [w0+16]
        MOSI->write = NULL;
    1ed8:	0e 08 90    	mov.w     [w14+16], w0
    1eda:	80 00 eb    	clr.w     w1
    1edc:	11 08 98    	mov.w     w1, [w0+18]
        MOSI->read = NULL;
    1ede:	0e 08 90    	mov.w     [w14+16], w0
    1ee0:	80 00 eb    	clr.w     w1
    1ee2:	21 08 98    	mov.w     w1, [w0+20]
        self->SCK = SCK;
    1ee4:	6e 00 90    	mov.w     [w14+12], w0
    1ee6:	9e 08 90    	mov.w     [w14+18], w1
    1ee8:	21 08 98    	mov.w     w1, [w0+20]
        SCK->owner = (void *)self;
    1eea:	1e 08 90    	mov.w     [w14+18], w0
    1eec:	ee 00 90    	mov.w     [w14+12], w1
    1eee:	01 08 98    	mov.w     w1, [w0+16]
        SCK->write = NULL;
    1ef0:	1e 08 90    	mov.w     [w14+18], w0
    1ef2:	80 00 eb    	clr.w     w1
    1ef4:	11 08 98    	mov.w     w1, [w0+18]
        SCK->read = NULL;
    1ef6:	1e 08 90    	mov.w     [w14+18], w0
    1ef8:	80 00 eb    	clr.w     w1
    1efa:	21 08 98    	mov.w     w1, [w0+20]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    1efc:	11 3a 80    	mov.w     0x742, w1
    1efe:	f0 0b 20    	mov.w     #0xbf, w0
    1f00:	00 81 60    	and.w     w1, w0, w2
    1f02:	60 04 20    	mov.w     #0x46, w0
    1f04:	71 05 20    	mov.w     #0x57, w1
    1f06:	23 74 20    	mov.w     #0x742, w3
    1f08:	80 49 78    	mov.b     w0, [w3]
    1f0a:	81 49 78    	mov.b     w1, [w3]
    1f0c:	82 49 78    	mov.b     w2, [w3]
        *(self->MISOrpinr) &= ~(0x3F<<(self->MISOrpshift));
    1f0e:	6e 00 90    	mov.w     [w14+12], w0
    1f10:	40 00 90    	mov.w     [w0+8], w0
    1f12:	ee 00 90    	mov.w     [w14+12], w1
    1f14:	c1 00 90    	mov.w     [w1+8], w1
    1f16:	11 01 78    	mov.w     [w1], w2
    1f18:	ee 00 90    	mov.w     [w14+12], w1
    1f1a:	a1 48 90    	mov.b     [w1+10], w1
    1f1c:	81 80 fb    	ze        w1, w1
    1f1e:	f3 03 20    	mov.w     #0x3f, w3
    1f20:	81 18 dd    	sl.w      w3, w1, w1
    1f22:	81 80 ea    	com.w     w1, w1
    1f24:	81 00 61    	and.w     w2, w1, w1
    1f26:	01 08 78    	mov.w     w1, [w0]
        *(self->MISOrpinr) |= (MISO->rpnum)<<(self->MISOrpshift);
    1f28:	6e 00 90    	mov.w     [w14+12], w0
    1f2a:	40 00 90    	mov.w     [w0+8], w0
    1f2c:	ee 00 90    	mov.w     [w14+12], w1
    1f2e:	c1 00 90    	mov.w     [w1+8], w1
    1f30:	11 01 78    	mov.w     [w1], w2
    1f32:	fe 00 90    	mov.w     [w14+14], w1
    1f34:	e1 01 90    	mov.w     [w1+12], w3
    1f36:	ee 00 90    	mov.w     [w14+12], w1
    1f38:	a1 48 90    	mov.b     [w1+10], w1
    1f3a:	81 80 fb    	ze        w1, w1
    1f3c:	81 18 dd    	sl.w      w3, w1, w1
    1f3e:	82 80 70    	ior.w     w1, w2, w1
    1f40:	01 08 78    	mov.w     w1, [w0]
        *(MOSI->rpor) &= ~(0x3F<<(MOSI->rpshift));
    1f42:	0e 08 90    	mov.w     [w14+16], w0
    1f44:	70 00 90    	mov.w     [w0+14], w0
    1f46:	8e 08 90    	mov.w     [w14+16], w1
    1f48:	f1 00 90    	mov.w     [w1+14], w1
    1f4a:	11 01 78    	mov.w     [w1], w2
    1f4c:	8e 08 90    	mov.w     [w14+16], w1
    1f4e:	a1 48 90    	mov.b     [w1+10], w1
    1f50:	81 80 fb    	ze        w1, w1
    1f52:	f3 03 20    	mov.w     #0x3f, w3
    1f54:	81 18 dd    	sl.w      w3, w1, w1
    1f56:	81 80 ea    	com.w     w1, w1
    1f58:	81 00 61    	and.w     w2, w1, w1
    1f5a:	01 08 78    	mov.w     w1, [w0]
        *(MOSI->rpor) |= (self->MOSIrpnum)<<(MOSI->rpshift);
    1f5c:	0e 08 90    	mov.w     [w14+16], w0
    1f5e:	70 00 90    	mov.w     [w0+14], w0
    1f60:	8e 08 90    	mov.w     [w14+16], w1
    1f62:	f1 00 90    	mov.w     [w1+14], w1
    1f64:	11 01 78    	mov.w     [w1], w2
    1f66:	ee 00 90    	mov.w     [w14+12], w1
    1f68:	e1 01 90    	mov.w     [w1+12], w3
    1f6a:	8e 08 90    	mov.w     [w14+16], w1
    1f6c:	a1 48 90    	mov.b     [w1+10], w1
    1f6e:	81 80 fb    	ze        w1, w1
    1f70:	81 18 dd    	sl.w      w3, w1, w1
    1f72:	82 80 70    	ior.w     w1, w2, w1
    1f74:	01 08 78    	mov.w     w1, [w0]
        *(SCK->rpor) &= ~(0x3F<<(SCK->rpshift));
    1f76:	1e 08 90    	mov.w     [w14+18], w0
    1f78:	70 00 90    	mov.w     [w0+14], w0
    1f7a:	9e 08 90    	mov.w     [w14+18], w1
    1f7c:	f1 00 90    	mov.w     [w1+14], w1
    1f7e:	11 01 78    	mov.w     [w1], w2
    1f80:	9e 08 90    	mov.w     [w14+18], w1
    1f82:	a1 48 90    	mov.b     [w1+10], w1
    1f84:	81 80 fb    	ze        w1, w1
    1f86:	f3 03 20    	mov.w     #0x3f, w3
    1f88:	81 18 dd    	sl.w      w3, w1, w1
    1f8a:	81 80 ea    	com.w     w1, w1
    1f8c:	81 00 61    	and.w     w2, w1, w1
    1f8e:	01 08 78    	mov.w     w1, [w0]
        *(SCK->rpor) |= (self->SCKrpnum)<<(SCK->rpshift);
    1f90:	1e 08 90    	mov.w     [w14+18], w0
    1f92:	70 00 90    	mov.w     [w0+14], w0
    1f94:	9e 08 90    	mov.w     [w14+18], w1
    1f96:	f1 00 90    	mov.w     [w1+14], w1
    1f98:	11 01 78    	mov.w     [w1], w2
    1f9a:	ee 00 90    	mov.w     [w14+12], w1
    1f9c:	f1 01 90    	mov.w     [w1+14], w3
    1f9e:	9e 08 90    	mov.w     [w14+18], w1
    1fa0:	a1 48 90    	mov.b     [w1+10], w1
    1fa2:	81 80 fb    	ze        w1, w1
    1fa4:	81 18 dd    	sl.w      w3, w1, w1
    1fa6:	82 80 70    	ior.w     w1, w2, w1
    1fa8:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    1faa:	10 3a 80    	mov.w     0x742, w0
    1fac:	00 01 78    	mov.w     w0, w2
    1fae:	02 60 a0    	bset.w    w2, #0x6
    1fb0:	60 04 20    	mov.w     #0x46, w0
    1fb2:	71 05 20    	mov.w     #0x57, w1
    1fb4:	23 74 20    	mov.w     #0x742, w3
    1fb6:	80 49 78    	mov.b     w0, [w3]
    1fb8:	81 49 78    	mov.b     w1, [w3]
    1fba:	82 49 78    	mov.b     w2, [w3]
    1fbc:	0f 00 37    	bra       0x1fdc <.L8>

00001fbe <.L7>:
    } else if ((self->MISO!=MISO) || (self->MOSI!=MOSI) || (self->SCK!=SCK)) {
    1fbe:	6e 00 90    	mov.w     [w14+12], w0
    1fc0:	80 08 90    	mov.w     [w0+16], w1
    1fc2:	7e 00 90    	mov.w     [w14+14], w0
    1fc4:	80 8f 50    	sub.w     w1, w0, [w15]
    1fc6:	94 00 3a    	bra       NZ, 0x20f0 <.L24>
    1fc8:	6e 00 90    	mov.w     [w14+12], w0
    1fca:	90 08 90    	mov.w     [w0+18], w1
    1fcc:	0e 08 90    	mov.w     [w14+16], w0
    1fce:	80 8f 50    	sub.w     w1, w0, [w15]
    1fd0:	91 00 3a    	bra       NZ, 0x20f4 <.L25>
    1fd2:	6e 00 90    	mov.w     [w14+12], w0
    1fd4:	a0 08 90    	mov.w     [w0+20], w1
    1fd6:	1e 08 90    	mov.w     [w14+18], w0
    1fd8:	80 8f 50    	sub.w     w1, w0, [w15]
    1fda:	8e 00 3a    	bra       NZ, 0x20f8 <.L26>

00001fdc <.L8>:
        return; // At least one of the specified pins does not match the 
                // previous assignment
    }
    // Clip freq to be in allowable range of values
    if (freq>(FCY/2.))
    1fdc:	18 c0 b3    	mov.b     #0x1, w8
    1fde:	02 40 22    	mov.w     #0x2400, w2
    1fe0:	43 af 24    	mov.w     #0x4af4, w3
    1fe2:	2e 08 90    	mov.w     [w14+20], w0
    1fe4:	be 08 90    	mov.w     [w14+22], w1
    1fe6:	bf f9 07    	rcall     0x1366 <___gesf2> <___gtsf2>
    1fe8:	00 00 e0    	cp0.w     w0
    1fea:	01 00 3c    	bra       GT, 0x1fee <.L10>
    1fec:	00 44 eb    	clr.b     w8

00001fee <.L10>:
    1fee:	08 04 e0    	cp0.b     w8
    1ff0:	04 00 32    	bra       Z, 0x1ffa <.L11>
        freq = FCY/2.;
    1ff2:	00 40 22    	mov.w     #0x2400, w0
    1ff4:	41 af 24    	mov.w     #0x4af4, w1
    1ff6:	20 0f 98    	mov.w     w0, [w14+20]
    1ff8:	31 0f 98    	mov.w     w1, [w14+22]

00001ffa <.L11>:
    if (freq<(FCY/(64.*8.)))
    1ffa:	18 c0 b3    	mov.b     #0x1, w8
    1ffc:	02 40 22    	mov.w     #0x2400, w2
    1ffe:	43 6f 24    	mov.w     #0x46f4, w3
    2000:	2e 08 90    	mov.w     [w14+20], w0
    2002:	be 08 90    	mov.w     [w14+22], w1
    2004:	ae f9 07    	rcall     0x1362 <___eqsf2> <___lesf2> <___ltsf2>
    2006:	00 00 e0    	cp0.w     w0
    2008:	01 00 35    	bra       LT, 0x200c <.L12>
    200a:	00 44 eb    	clr.b     w8

0000200c <.L12>:
    200c:	08 04 e0    	cp0.b     w8
    200e:	04 00 32    	bra       Z, 0x2018 <.L13>
        freq = FCY/(64.*8.);
    2010:	00 40 22    	mov.w     #0x2400, w0
    2012:	41 6f 24    	mov.w     #0x46f4, w1
    2014:	20 0f 98    	mov.w     w0, [w14+20]
    2016:	31 0f 98    	mov.w     w1, [w14+22]

00002018 <.L13>:
    // Select primary prescale bits
    if (freq<=(FCY/(2.*64.))) {
    2018:	18 c0 b3    	mov.b     #0x1, w8
    201a:	02 40 22    	mov.w     #0x2400, w2
    201c:	43 7f 24    	mov.w     #0x47f4, w3
    201e:	2e 08 90    	mov.w     [w14+20], w0
    2020:	be 08 90    	mov.w     [w14+22], w1
    2022:	9f f9 07    	rcall     0x1362 <___eqsf2> <___lesf2> <___ltsf2>
    2024:	00 00 e0    	cp0.w     w0
    2026:	01 00 34    	bra       LE, 0x202a <.L14>
    2028:	00 44 eb    	clr.b     w8

0000202a <.L14>:
    202a:	08 04 e0    	cp0.b     w8
    202c:	0a 00 32    	bra       Z, 0x2042 <.L15>
        freq *= 64.;
    202e:	02 00 20    	mov.w     #0x0, w2
    2030:	03 28 24    	mov.w     #0x4280, w3
    2032:	2e 08 90    	mov.w     [w14+20], w0
    2034:	be 08 90    	mov.w     [w14+22], w1
    2036:	07 fa 07    	rcall     0x1446 <___mulsf3>
    2038:	20 0f 98    	mov.w     w0, [w14+20]
    203a:	31 0f 98    	mov.w     w1, [w14+22]
        primary = 0;    // Set primary prescale bits for 64:1
    203c:	00 00 eb    	clr.w     w0
    203e:	00 0f 78    	mov.w     w0, [w14]
    2040:	2c 00 37    	bra       0x209a <.L16>

00002042 <.L15>:
    } else if (freq<=(FCY/(2.*16.))) {
    2042:	18 c0 b3    	mov.b     #0x1, w8
    2044:	02 40 22    	mov.w     #0x2400, w2
    2046:	43 8f 24    	mov.w     #0x48f4, w3
    2048:	2e 08 90    	mov.w     [w14+20], w0
    204a:	be 08 90    	mov.w     [w14+22], w1
    204c:	8a f9 07    	rcall     0x1362 <___eqsf2> <___lesf2> <___ltsf2>
    204e:	00 00 e0    	cp0.w     w0
    2050:	01 00 34    	bra       LE, 0x2054 <.L17>
    2052:	00 44 eb    	clr.b     w8

00002054 <.L17>:
    2054:	08 04 e0    	cp0.b     w8
    2056:	0a 00 32    	bra       Z, 0x206c <.L18>
        freq *= 16.;
    2058:	02 00 20    	mov.w     #0x0, w2
    205a:	03 18 24    	mov.w     #0x4180, w3
    205c:	2e 08 90    	mov.w     [w14+20], w0
    205e:	be 08 90    	mov.w     [w14+22], w1
    2060:	f2 f9 07    	rcall     0x1446 <___mulsf3>
    2062:	20 0f 98    	mov.w     w0, [w14+20]
    2064:	31 0f 98    	mov.w     w1, [w14+22]
        primary = 1;    // Set primary prescale bits for 16:1
    2066:	10 00 20    	mov.w     #0x1, w0
    2068:	00 0f 78    	mov.w     w0, [w14]
    206a:	17 00 37    	bra       0x209a <.L16>

0000206c <.L18>:
    } else if (freq<=(FCY/(2.*4.))) {
    206c:	18 c0 b3    	mov.b     #0x1, w8
    206e:	02 40 22    	mov.w     #0x2400, w2
    2070:	43 9f 24    	mov.w     #0x49f4, w3
    2072:	2e 08 90    	mov.w     [w14+20], w0
    2074:	be 08 90    	mov.w     [w14+22], w1
    2076:	75 f9 07    	rcall     0x1362 <___eqsf2> <___lesf2> <___ltsf2>
    2078:	00 00 e0    	cp0.w     w0
    207a:	01 00 34    	bra       LE, 0x207e <.L19>
    207c:	00 44 eb    	clr.b     w8

0000207e <.L19>:
    207e:	08 04 e0    	cp0.b     w8
    2080:	0a 00 32    	bra       Z, 0x2096 <.L20>
        freq *= 4.;
    2082:	02 00 20    	mov.w     #0x0, w2
    2084:	03 08 24    	mov.w     #0x4080, w3
    2086:	2e 08 90    	mov.w     [w14+20], w0
    2088:	be 08 90    	mov.w     [w14+22], w1
    208a:	dd f9 07    	rcall     0x1446 <___mulsf3>
    208c:	20 0f 98    	mov.w     w0, [w14+20]
    208e:	31 0f 98    	mov.w     w1, [w14+22]
        primary = 2;    // Set primary prescale bits for 4:1
    2090:	20 00 20    	mov.w     #0x2, w0
    2092:	00 0f 78    	mov.w     w0, [w14]
    2094:	02 00 37    	bra       0x209a <.L16>

00002096 <.L20>:
    } else {
        primary = 3;    // Set primary prescale bits for 1:1
    2096:	30 00 20    	mov.w     #0x3, w0
    2098:	00 0f 78    	mov.w     w0, [w14]

0000209a <.L16>:
    }
    // Compute secondary prescale value to get closest SPI clock freq to that 
    // specified
    secondary = (uint16_t)(0.5+FCY/freq);
    209a:	2e 09 90    	mov.w     [w14+20], w2
    209c:	be 09 90    	mov.w     [w14+22], w3
    209e:	00 40 22    	mov.w     #0x2400, w0
    20a0:	41 b7 24    	mov.w     #0x4b74, w1
    20a2:	1d f9 07    	rcall     0x12de <___divsf3>
    20a4:	02 00 20    	mov.w     #0x0, w2
    20a6:	03 f0 23    	mov.w     #0x3f00, w3
    20a8:	bd f8 07    	rcall     0x1224 <___addsf3>
    20aa:	5f f9 07    	rcall     0x136a <___fixunssfsi>
    20ac:	10 07 98    	mov.w     w0, [w14+2]
    secondary = (8-secondary)<<2;   // Map secondary prescale bits for SPIxCON1
    20ae:	1e 00 90    	mov.w     [w14+2], w0
    20b0:	68 00 10    	subr.w    w0, #0x8, w0
    20b2:	42 00 dd    	sl.w      w0, #0x2, w0
    20b4:	10 07 98    	mov.w     w0, [w14+2]
    // Configure the SPI module
    //   set SPI module to 8-bit master mode, SMP = 0
    //   set CKE and CKP bits according to the SPI mode specified
    //   set SPRE and PPRE bits to get the closest SPI clock freq to that 
    //   specified
    *(self->SPIxCON1) = 0x0020 | modebits[mode & 0x03] | primary | secondary;
    20b6:	6e 00 90    	mov.w     [w14+12], w0
    20b8:	90 00 90    	mov.w     [w0+2], w1
    20ba:	0e 58 90    	mov.b     [w14+24], w0
    20bc:	00 80 fb    	ze        w0, w0
    20be:	63 00 60    	and.w     w0, #0x3, w0
    20c0:	00 00 40    	add.w     w0, w0, w0
    20c2:	64 01 47    	add.w     w14, #0x4, w2
    20c4:	00 00 41    	add.w     w2, w0, w0
    20c6:	10 00 78    	mov.w     [w0], w0
    20c8:	1e 01 70    	ior.w     w0, [w14], w2
    20ca:	1e 00 90    	mov.w     [w14+2], w0
    20cc:	02 00 70    	ior.w     w0, w2, w0
    20ce:	00 50 a0    	bset.w    w0, #0x5
    20d0:	80 08 78    	mov.w     w0, [w1]
    *(self->SPIxCON2) = 0;
    20d2:	6e 00 90    	mov.w     [w14+12], w0
    20d4:	20 00 90    	mov.w     [w0+4], w0
    20d6:	80 00 eb    	clr.w     w1
    20d8:	01 08 78    	mov.w     w1, [w0]
    // Enable the SPI module and clear status flags
    *(self->SPIxSTAT) = 0x8000;
    20da:	6e 00 90    	mov.w     [w14+12], w0
    20dc:	10 00 78    	mov.w     [w0], w0
    20de:	01 00 28    	mov.w     #0x8000, w1
    20e0:	01 08 78    	mov.w     w1, [w0]
    20e2:	0b 00 37    	bra       0x20fa <.L3>

000020e4 <.L21>:
    20e4:	00 00 00    	nop       
    20e6:	09 00 37    	bra       0x20fa <.L3>

000020e8 <.L22>:
    20e8:	00 00 00    	nop       
    20ea:	07 00 37    	bra       0x20fa <.L3>

000020ec <.L23>:
    20ec:	00 00 00    	nop       
    20ee:	05 00 37    	bra       0x20fa <.L3>

000020f0 <.L24>:
    20f0:	00 00 00    	nop       
    20f2:	03 00 37    	bra       0x20fa <.L3>

000020f4 <.L25>:
    20f4:	00 00 00    	nop       
    20f6:	01 00 37    	bra       0x20fa <.L3>

000020f8 <.L26>:
    20f8:	00 00 00    	nop       

000020fa <.L3>:
}
    20fa:	4f 04 78    	mov.w     [--w15], w8
    20fc:	00 80 fa    	ulnk      
    20fe:	00 00 06    	return    

00002100 <_spi_close>:

void spi_close(_SPI *self) {
    2100:	02 00 fa    	lnk       #0x2
    2102:	00 0f 78    	mov.w     w0, [w14]
    *(self->SPIxSTAT) = 0;
    2104:	1e 00 78    	mov.w     [w14], w0
    2106:	10 00 78    	mov.w     [w0], w0
    2108:	80 00 eb    	clr.w     w1
    210a:	01 08 78    	mov.w     w1, [w0]
    *(self->SPIxCON1) = 0;
    210c:	1e 00 78    	mov.w     [w14], w0
    210e:	10 00 90    	mov.w     [w0+2], w0
    2110:	80 00 eb    	clr.w     w1
    2112:	01 08 78    	mov.w     w1, [w0]
    *(self->SPIxCON2) = 0;
    2114:	1e 00 78    	mov.w     [w14], w0
    2116:	20 00 90    	mov.w     [w0+4], w0
    2118:	80 00 eb    	clr.w     w1
    211a:	01 08 78    	mov.w     w1, [w0]
    if (self->MISO) {
    211c:	1e 00 78    	mov.w     [w14], w0
    211e:	00 08 90    	mov.w     [w0+16], w0
    2120:	00 00 e0    	cp0.w     w0
    2122:	28 00 32    	bra       Z, 0x2174 <.L28>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2124:	11 3a 80    	mov.w     0x742, w1
    2126:	f0 0b 20    	mov.w     #0xbf, w0
    2128:	00 81 60    	and.w     w1, w0, w2
    212a:	60 04 20    	mov.w     #0x46, w0
    212c:	71 05 20    	mov.w     #0x57, w1
    212e:	23 74 20    	mov.w     #0x742, w3
    2130:	80 49 78    	mov.b     w0, [w3]
    2132:	81 49 78    	mov.b     w1, [w3]
    2134:	82 49 78    	mov.b     w2, [w3]
        *(self->MISOrpinr) |= 0x3F<<(self->MISOrpshift);
    2136:	1e 00 78    	mov.w     [w14], w0
    2138:	40 00 90    	mov.w     [w0+8], w0
    213a:	9e 00 78    	mov.w     [w14], w1
    213c:	c1 00 90    	mov.w     [w1+8], w1
    213e:	11 01 78    	mov.w     [w1], w2
    2140:	9e 00 78    	mov.w     [w14], w1
    2142:	a1 48 90    	mov.b     [w1+10], w1
    2144:	81 80 fb    	ze        w1, w1
    2146:	f3 03 20    	mov.w     #0x3f, w3
    2148:	81 18 dd    	sl.w      w3, w1, w1
    214a:	82 80 70    	ior.w     w1, w2, w1
    214c:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    214e:	10 3a 80    	mov.w     0x742, w0
    2150:	00 01 78    	mov.w     w0, w2
    2152:	02 60 a0    	bset.w    w2, #0x6
    2154:	60 04 20    	mov.w     #0x46, w0
    2156:	71 05 20    	mov.w     #0x57, w1
    2158:	23 74 20    	mov.w     #0x742, w3
    215a:	80 49 78    	mov.b     w0, [w3]
    215c:	81 49 78    	mov.b     w1, [w3]
    215e:	82 49 78    	mov.b     w2, [w3]
        self->MISO->owner = NULL;
    2160:	1e 00 78    	mov.w     [w14], w0
    2162:	00 08 90    	mov.w     [w0+16], w0
    2164:	80 00 eb    	clr.w     w1
    2166:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalIn(self->MISO);
    2168:	1e 00 78    	mov.w     [w14], w0
    216a:	00 08 90    	mov.w     [w0+16], w0
    216c:	01 02 07    	rcall     0x2570 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
        self->MISO = NULL;
    216e:	1e 00 78    	mov.w     [w14], w0
    2170:	80 00 eb    	clr.w     w1
    2172:	01 08 98    	mov.w     w1, [w0+16]

00002174 <.L28>:
    }
    if (self->MOSI) {
    2174:	1e 00 78    	mov.w     [w14], w0
    2176:	10 08 90    	mov.w     [w0+18], w0
    2178:	00 00 e0    	cp0.w     w0
    217a:	2f 00 32    	bra       Z, 0x21da <.L29>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    217c:	11 3a 80    	mov.w     0x742, w1
    217e:	f0 0b 20    	mov.w     #0xbf, w0
    2180:	00 81 60    	and.w     w1, w0, w2
    2182:	60 04 20    	mov.w     #0x46, w0
    2184:	71 05 20    	mov.w     #0x57, w1
    2186:	23 74 20    	mov.w     #0x742, w3
    2188:	80 49 78    	mov.b     w0, [w3]
    218a:	81 49 78    	mov.b     w1, [w3]
    218c:	82 49 78    	mov.b     w2, [w3]
        *(self->MOSI->rpor) &= ~(0x3F<<(self->MOSI->rpshift));
    218e:	1e 00 78    	mov.w     [w14], w0
    2190:	10 08 90    	mov.w     [w0+18], w0
    2192:	70 00 90    	mov.w     [w0+14], w0
    2194:	9e 00 78    	mov.w     [w14], w1
    2196:	91 08 90    	mov.w     [w1+18], w1
    2198:	f1 00 90    	mov.w     [w1+14], w1
    219a:	11 01 78    	mov.w     [w1], w2
    219c:	9e 00 78    	mov.w     [w14], w1
    219e:	91 08 90    	mov.w     [w1+18], w1
    21a0:	a1 48 90    	mov.b     [w1+10], w1
    21a2:	81 80 fb    	ze        w1, w1
    21a4:	f3 03 20    	mov.w     #0x3f, w3
    21a6:	81 18 dd    	sl.w      w3, w1, w1
    21a8:	81 80 ea    	com.w     w1, w1
    21aa:	81 00 61    	and.w     w2, w1, w1
    21ac:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    21ae:	10 3a 80    	mov.w     0x742, w0
    21b0:	00 01 78    	mov.w     w0, w2
    21b2:	02 60 a0    	bset.w    w2, #0x6
    21b4:	60 04 20    	mov.w     #0x46, w0
    21b6:	71 05 20    	mov.w     #0x57, w1
    21b8:	23 74 20    	mov.w     #0x742, w3
    21ba:	80 49 78    	mov.b     w0, [w3]
    21bc:	81 49 78    	mov.b     w1, [w3]
    21be:	82 49 78    	mov.b     w2, [w3]
        self->MOSI->owner = NULL;
    21c0:	1e 00 78    	mov.w     [w14], w0
    21c2:	10 08 90    	mov.w     [w0+18], w0
    21c4:	80 00 eb    	clr.w     w1
    21c6:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->MOSI);
    21c8:	1e 00 78    	mov.w     [w14], w0
    21ca:	10 08 90    	mov.w     [w0+18], w0
    21cc:	f8 01 07    	rcall     0x25be <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_set(self->MOSI);
    21ce:	1e 00 78    	mov.w     [w14], w0
    21d0:	10 08 90    	mov.w     [w0+18], w0
    21d2:	52 02 07    	rcall     0x2678 <_pin_set> <L0> <.LFB8> <.LFE7>
        self->MOSI = NULL;
    21d4:	1e 00 78    	mov.w     [w14], w0
    21d6:	80 00 eb    	clr.w     w1
    21d8:	11 08 98    	mov.w     w1, [w0+18]

000021da <.L29>:
    }
    if (self->SCK) {
    21da:	1e 00 78    	mov.w     [w14], w0
    21dc:	20 08 90    	mov.w     [w0+20], w0
    21de:	00 00 e0    	cp0.w     w0
    21e0:	2f 00 32    	bra       Z, 0x2240 <.L27>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    21e2:	11 3a 80    	mov.w     0x742, w1
    21e4:	f0 0b 20    	mov.w     #0xbf, w0
    21e6:	00 81 60    	and.w     w1, w0, w2
    21e8:	60 04 20    	mov.w     #0x46, w0
    21ea:	71 05 20    	mov.w     #0x57, w1
    21ec:	23 74 20    	mov.w     #0x742, w3
    21ee:	80 49 78    	mov.b     w0, [w3]
    21f0:	81 49 78    	mov.b     w1, [w3]
    21f2:	82 49 78    	mov.b     w2, [w3]
        *(self->SCK->rpor) &= ~(0x3F<<(self->SCK->rpshift));
    21f4:	1e 00 78    	mov.w     [w14], w0
    21f6:	20 08 90    	mov.w     [w0+20], w0
    21f8:	70 00 90    	mov.w     [w0+14], w0
    21fa:	9e 00 78    	mov.w     [w14], w1
    21fc:	a1 08 90    	mov.w     [w1+20], w1
    21fe:	f1 00 90    	mov.w     [w1+14], w1
    2200:	11 01 78    	mov.w     [w1], w2
    2202:	9e 00 78    	mov.w     [w14], w1
    2204:	a1 08 90    	mov.w     [w1+20], w1
    2206:	a1 48 90    	mov.b     [w1+10], w1
    2208:	81 80 fb    	ze        w1, w1
    220a:	f3 03 20    	mov.w     #0x3f, w3
    220c:	81 18 dd    	sl.w      w3, w1, w1
    220e:	81 80 ea    	com.w     w1, w1
    2210:	81 00 61    	and.w     w2, w1, w1
    2212:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2214:	10 3a 80    	mov.w     0x742, w0
    2216:	00 01 78    	mov.w     w0, w2
    2218:	02 60 a0    	bset.w    w2, #0x6
    221a:	60 04 20    	mov.w     #0x46, w0
    221c:	71 05 20    	mov.w     #0x57, w1
    221e:	23 74 20    	mov.w     #0x742, w3
    2220:	80 49 78    	mov.b     w0, [w3]
    2222:	81 49 78    	mov.b     w1, [w3]
    2224:	82 49 78    	mov.b     w2, [w3]
        self->SCK->owner = NULL;
    2226:	1e 00 78    	mov.w     [w14], w0
    2228:	20 08 90    	mov.w     [w0+20], w0
    222a:	80 00 eb    	clr.w     w1
    222c:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->SCK);
    222e:	1e 00 78    	mov.w     [w14], w0
    2230:	20 08 90    	mov.w     [w0+20], w0
    2232:	c5 01 07    	rcall     0x25be <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_clear(self->SCK);
    2234:	1e 00 78    	mov.w     [w14], w0
    2236:	20 08 90    	mov.w     [w0+20], w0
    2238:	34 02 07    	rcall     0x26a2 <_pin_clear> <L0> <.LFB9> <.LFE8>
        self->SCK = NULL;
    223a:	1e 00 78    	mov.w     [w14], w0
    223c:	80 00 eb    	clr.w     w1
    223e:	21 08 98    	mov.w     w1, [w0+20]

00002240 <.L27>:
    }
}
    2240:	00 80 fa    	ulnk      
    2242:	00 00 06    	return    

00002244 <_spi_transfer>:

uint8_t spi_transfer(_SPI *self, uint8_t val) {
    2244:	04 00 fa    	lnk       #0x4
    2246:	00 0f 78    	mov.w     w0, [w14]
    2248:	21 47 98    	mov.b     w1, [w14+2]
    *(self->SPIxBUF) = (uint16_t)val;
    224a:	1e 00 78    	mov.w     [w14], w0
    224c:	30 00 90    	mov.w     [w0+6], w0
    224e:	ae 40 90    	mov.b     [w14+2], w1
    2250:	81 80 fb    	ze        w1, w1
    2252:	01 08 78    	mov.w     w1, [w0]
    while (bitread(self->SPIxSTAT, 0)==0) {}
    2254:	00 00 00    	nop       

00002256 <.L32>:
    2256:	1e 00 78    	mov.w     [w14], w0
    2258:	10 00 78    	mov.w     [w0], w0
    225a:	10 00 78    	mov.w     [w0], w0
    225c:	61 00 60    	and.w     w0, #0x1, w0
    225e:	00 00 e0    	cp0.w     w0
    2260:	fa ff 32    	bra       Z, 0x2256 <.L32>
    return (uint8_t)(*(self->SPIxBUF));
    2262:	1e 00 78    	mov.w     [w14], w0
    2264:	30 00 90    	mov.w     [w0+6], w0
    2266:	10 00 78    	mov.w     [w0], w0
    2268:	00 40 78    	mov.b     w0, w0
}
    226a:	00 80 fa    	ulnk      
    226c:	00 00 06    	return    

0000226e <___digitalWrite>:
    226e:	04 00 fa    	lnk       #0x4
    2270:	00 0f 78    	mov.w     w0, [w14]
    2272:	11 07 98    	mov.w     w1, [w14+2]
    2274:	1e 00 90    	mov.w     [w14+2], w0
    2276:	00 00 e0    	cp0.w     w0
    2278:	0d 00 32    	bra       Z, 0x2294 <.L2>
    227a:	1e 00 78    	mov.w     [w14], w0
    227c:	10 00 78    	mov.w     [w0], w0
    227e:	9e 00 78    	mov.w     [w14], w1
    2280:	91 00 78    	mov.w     [w1], w1
    2282:	11 01 78    	mov.w     [w1], w2
    2284:	9e 00 78    	mov.w     [w14], w1
    2286:	e1 40 90    	mov.b     [w1+6], w1
    2288:	81 80 fb    	ze        w1, w1
    228a:	13 00 20    	mov.w     #0x1, w3
    228c:	81 18 dd    	sl.w      w3, w1, w1
    228e:	82 80 70    	ior.w     w1, w2, w1
    2290:	01 08 78    	mov.w     w1, [w0]
    2292:	0d 00 37    	bra       0x22ae <.L1>

00002294 <.L2>:
    2294:	1e 00 78    	mov.w     [w14], w0
    2296:	10 00 78    	mov.w     [w0], w0
    2298:	9e 00 78    	mov.w     [w14], w1
    229a:	91 00 78    	mov.w     [w1], w1
    229c:	11 01 78    	mov.w     [w1], w2
    229e:	9e 00 78    	mov.w     [w14], w1
    22a0:	e1 40 90    	mov.b     [w1+6], w1
    22a2:	81 80 fb    	ze        w1, w1
    22a4:	13 00 20    	mov.w     #0x1, w3
    22a6:	81 18 dd    	sl.w      w3, w1, w1
    22a8:	81 80 ea    	com.w     w1, w1
    22aa:	81 00 61    	and.w     w2, w1, w1
    22ac:	01 08 78    	mov.w     w1, [w0]

000022ae <.L1>:
    22ae:	00 80 fa    	ulnk      
    22b0:	00 00 06    	return    

000022b2 <___digitalRead>:
    22b2:	02 00 fa    	lnk       #0x2
    22b4:	00 0f 78    	mov.w     w0, [w14]
    22b6:	1e 00 78    	mov.w     [w14], w0
    22b8:	10 00 78    	mov.w     [w0], w0
    22ba:	90 00 78    	mov.w     [w0], w1
    22bc:	1e 00 78    	mov.w     [w14], w0
    22be:	60 40 90    	mov.b     [w0+6], w0
    22c0:	00 80 fb    	ze        w0, w0
    22c2:	12 00 20    	mov.w     #0x1, w2
    22c4:	00 10 dd    	sl.w      w2, w0, w0
    22c6:	00 80 60    	and.w     w1, w0, w0
    22c8:	00 f0 a7    	btsc.w    w0, #0xf
    22ca:	00 00 ea    	neg.w     w0, w0
    22cc:	00 00 ea    	neg.w     w0, w0
    22ce:	4f 00 de    	lsr.w     w0, #0xf, w0
    22d0:	00 80 fa    	ulnk      
    22d2:	00 00 06    	return    

000022d4 <___analogRead>:
    22d4:	02 00 fa    	lnk       #0x2
    22d6:	00 0f 78    	mov.w     w0, [w14]
    22d8:	1e 00 78    	mov.w     [w14], w0
    22da:	40 00 90    	mov.w     [w0+8], w0
    22dc:	40 19 88    	mov.w     w0, 0x328
    22de:	20 23 a8    	bset.b    0x320, #0x1
    22e0:	00 00 00    	nop       

000022e2 <.L6>:
    22e2:	00 19 80    	mov.w     0x320, w0
    22e4:	61 00 60    	and.w     w0, #0x1, w0
    22e6:	00 00 e0    	cp0.w     w0
    22e8:	fc ff 32    	bra       Z, 0x22e2 <.L6>
    22ea:	00 18 80    	mov.w     0x300, w0
    22ec:	00 80 fa    	ulnk      
    22ee:	00 00 06    	return    

000022f0 <_init_pin>:
    22f0:	02 00 fa    	lnk       #0x2
    22f2:	40 6d 20    	mov.w     #0x6d4, w0
    22f4:	80 1f 78    	mov.w     w0, [w15++]
    22f6:	47 01 20    	mov.w     #0x14, w7
    22f8:	00 43 eb    	clr.b     w6
    22fa:	80 82 eb    	setm.w    w5
    22fc:	54 c0 b3    	mov.b     #0x5, w4
    22fe:	80 01 eb    	clr.w     w3
    2300:	82 2d 20    	mov.w     #0x2d8, w2
    2302:	a1 2d 20    	mov.w     #0x2da, w1
    2304:	c0 84 20    	mov.w     #0x84c, w0
    2306:	08 01 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2308:	8f 87 e9    	dec2.w    w15, w15
    230a:	80 6d 20    	mov.w     #0x6d8, w0
    230c:	80 1f 78    	mov.w     w0, [w15++]
    230e:	97 01 20    	mov.w     #0x19, w7
    2310:	86 c0 b3    	mov.b     #0x8, w6
    2312:	80 82 eb    	setm.w    w5
    2314:	44 c0 b3    	mov.b     #0x4, w4
    2316:	80 01 eb    	clr.w     w3
    2318:	82 2d 20    	mov.w     #0x2d8, w2
    231a:	a1 2d 20    	mov.w     #0x2da, w1
    231c:	20 86 20    	mov.w     #0x862, w0
    231e:	fc 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2320:	8f 87 e9    	dec2.w    w15, w15
    2322:	a0 6c 20    	mov.w     #0x6ca, w0
    2324:	80 1f 78    	mov.w     w0, [w15++]
    2326:	a7 00 20    	mov.w     #0xa, w7
    2328:	00 43 eb    	clr.b     w6
    232a:	80 82 eb    	setm.w    w5
    232c:	44 c0 b3    	mov.b     #0x4, w4
    232e:	80 01 eb    	clr.w     w3
    2330:	82 2e 20    	mov.w     #0x2e8, w2
    2332:	a1 2e 20    	mov.w     #0x2ea, w1
    2334:	80 87 20    	mov.w     #0x878, w0
    2336:	f0 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2338:	8f 87 e9    	dec2.w    w15, w15
    233a:	00 6d 20    	mov.w     #0x6d0, w0
    233c:	80 1f 78    	mov.w     w0, [w15++]
    233e:	17 01 20    	mov.w     #0x11, w7
    2340:	86 c0 b3    	mov.b     #0x8, w6
    2342:	80 82 eb    	setm.w    w5
    2344:	54 c0 b3    	mov.b     #0x5, w4
    2346:	80 01 eb    	clr.w     w3
    2348:	82 2e 20    	mov.w     #0x2e8, w2
    234a:	a1 2e 20    	mov.w     #0x2ea, w1
    234c:	e0 88 20    	mov.w     #0x88e, w0
    234e:	e4 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2350:	8f 87 e9    	dec2.w    w15, w15
    2352:	c0 6d 20    	mov.w     #0x6dc, w0
    2354:	80 1f 78    	mov.w     w0, [w15++]
    2356:	d7 01 20    	mov.w     #0x1d, w7
    2358:	86 c0 b3    	mov.b     #0x8, w6
    235a:	f5 00 20    	mov.w     #0xf, w5
    235c:	f4 c0 b3    	mov.b     #0xf, w4
    235e:	23 4e 20    	mov.w     #0x4e2, w3
    2360:	82 2c 20    	mov.w     #0x2c8, w2
    2362:	a1 2c 20    	mov.w     #0x2ca, w1
    2364:	40 8a 20    	mov.w     #0x8a4, w0
    2366:	d8 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2368:	8f 87 e9    	dec2.w    w15, w15
    236a:	00 6d 20    	mov.w     #0x6d0, w0
    236c:	80 1f 78    	mov.w     w0, [w15++]
    236e:	07 01 20    	mov.w     #0x10, w7
    2370:	00 43 eb    	clr.b     w6
    2372:	80 82 eb    	setm.w    w5
    2374:	34 c0 b3    	mov.b     #0x3, w4
    2376:	80 01 eb    	clr.w     w3
    2378:	82 2e 20    	mov.w     #0x2e8, w2
    237a:	a1 2e 20    	mov.w     #0x2ea, w1
    237c:	a0 8b 20    	mov.w     #0x8ba, w0
    237e:	cc 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2380:	8f 87 e9    	dec2.w    w15, w15
    2382:	20 6c 20    	mov.w     #0x6c2, w0
    2384:	80 1f 78    	mov.w     w0, [w15++]
    2386:	27 00 20    	mov.w     #0x2, w7
    2388:	00 43 eb    	clr.b     w6
    238a:	80 82 eb    	setm.w    w5
    238c:	84 c0 b3    	mov.b     #0x8, w4
    238e:	80 01 eb    	clr.w     w3
    2390:	82 2d 20    	mov.w     #0x2d8, w2
    2392:	a1 2d 20    	mov.w     #0x2da, w1
    2394:	00 8d 20    	mov.w     #0x8d0, w0
    2396:	c0 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2398:	8f 87 e9    	dec2.w    w15, w15
    239a:	c0 6c 20    	mov.w     #0x6cc, w0
    239c:	80 1f 78    	mov.w     w0, [w15++]
    239e:	c7 00 20    	mov.w     #0xc, w7
    23a0:	00 43 eb    	clr.b     w6
    23a2:	80 82 eb    	setm.w    w5
    23a4:	b4 c0 b3    	mov.b     #0xb, w4
    23a6:	80 01 eb    	clr.w     w3
    23a8:	82 2d 20    	mov.w     #0x2d8, w2
    23aa:	a1 2d 20    	mov.w     #0x2da, w1
    23ac:	60 8e 20    	mov.w     #0x8e6, w0
    23ae:	b4 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    23b0:	8f 87 e9    	dec2.w    w15, w15
    23b2:	40 6c 20    	mov.w     #0x6c4, w0
    23b4:	80 1f 78    	mov.w     w0, [w15++]
    23b6:	47 00 20    	mov.w     #0x4, w7
    23b8:	00 43 eb    	clr.b     w6
    23ba:	80 82 eb    	setm.w    w5
    23bc:	94 c0 b3    	mov.b     #0x9, w4
    23be:	80 01 eb    	clr.w     w3
    23c0:	82 2d 20    	mov.w     #0x2d8, w2
    23c2:	a1 2d 20    	mov.w     #0x2da, w1
    23c4:	c0 8f 20    	mov.w     #0x8fc, w0
    23c6:	a8 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    23c8:	8f 87 e9    	dec2.w    w15, w15
    23ca:	20 6c 20    	mov.w     #0x6c2, w0
    23cc:	80 1f 78    	mov.w     w0, [w15++]
    23ce:	37 00 20    	mov.w     #0x3, w7
    23d0:	86 c0 b3    	mov.b     #0x8, w6
    23d2:	80 82 eb    	setm.w    w5
    23d4:	a4 c0 b3    	mov.b     #0xa, w4
    23d6:	80 01 eb    	clr.w     w3
    23d8:	82 2d 20    	mov.w     #0x2d8, w2
    23da:	a1 2d 20    	mov.w     #0x2da, w1
    23dc:	20 91 20    	mov.w     #0x912, w0
    23de:	9c 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    23e0:	8f 87 e9    	dec2.w    w15, w15
    23e2:	a0 6c 20    	mov.w     #0x6ca, w0
    23e4:	80 1f 78    	mov.w     w0, [w15++]
    23e6:	b7 00 20    	mov.w     #0xb, w7
    23e8:	86 c0 b3    	mov.b     #0x8, w6
    23ea:	80 82 eb    	setm.w    w5
    23ec:	00 42 eb    	clr.b     w4
    23ee:	80 01 eb    	clr.w     w3
    23f0:	82 2d 20    	mov.w     #0x2d8, w2
    23f2:	a1 2d 20    	mov.w     #0x2da, w1
    23f4:	80 92 20    	mov.w     #0x928, w0
    23f6:	90 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    23f8:	8f 87 e9    	dec2.w    w15, w15
    23fa:	80 6d 20    	mov.w     #0x6d8, w0
    23fc:	80 1f 78    	mov.w     w0, [w15++]
    23fe:	87 01 20    	mov.w     #0x18, w7
    2400:	00 43 eb    	clr.b     w6
    2402:	80 82 eb    	setm.w    w5
    2404:	14 c0 b3    	mov.b     #0x1, w4
    2406:	80 01 eb    	clr.w     w3
    2408:	82 2d 20    	mov.w     #0x2d8, w2
    240a:	a1 2d 20    	mov.w     #0x2da, w1
    240c:	e0 93 20    	mov.w     #0x93e, w0
    240e:	84 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2410:	8f 87 e9    	dec2.w    w15, w15
    2412:	60 6d 20    	mov.w     #0x6d6, w0
    2414:	80 1f 78    	mov.w     w0, [w15++]
    2416:	77 01 20    	mov.w     #0x17, w7
    2418:	86 c0 b3    	mov.b     #0x8, w6
    241a:	80 82 eb    	setm.w    w5
    241c:	24 c0 b3    	mov.b     #0x2, w4
    241e:	80 01 eb    	clr.w     w3
    2420:	82 2d 20    	mov.w     #0x2d8, w2
    2422:	a1 2d 20    	mov.w     #0x2da, w1
    2424:	40 95 20    	mov.w     #0x954, w0
    2426:	78 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2428:	8f 87 e9    	dec2.w    w15, w15
    242a:	60 6d 20    	mov.w     #0x6d6, w0
    242c:	80 1f 78    	mov.w     w0, [w15++]
    242e:	67 01 20    	mov.w     #0x16, w7
    2430:	00 43 eb    	clr.b     w6
    2432:	80 82 eb    	setm.w    w5
    2434:	34 c0 b3    	mov.b     #0x3, w4
    2436:	80 01 eb    	clr.w     w3
    2438:	82 2d 20    	mov.w     #0x2d8, w2
    243a:	a1 2d 20    	mov.w     #0x2da, w1
    243c:	a0 96 20    	mov.w     #0x96a, w0
    243e:	6c 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2440:	8f 87 e9    	dec2.w    w15, w15
    2442:	00 6c 20    	mov.w     #0x6c0, w0
    2444:	80 1f 78    	mov.w     w0, [w15++]
    2446:	80 03 eb    	clr.w     w7
    2448:	00 43 eb    	clr.b     w6
    244a:	80 02 eb    	clr.w     w5
    244c:	00 42 eb    	clr.b     w4
    244e:	23 4e 20    	mov.w     #0x4e2, w3
    2450:	82 2c 20    	mov.w     #0x2c8, w2
    2452:	a1 2c 20    	mov.w     #0x2ca, w1
    2454:	e0 9e 20    	mov.w     #0x9ee, w0
    2456:	60 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2458:	8f 87 e9    	dec2.w    w15, w15
    245a:	00 6c 20    	mov.w     #0x6c0, w0
    245c:	80 1f 78    	mov.w     w0, [w15++]
    245e:	17 00 20    	mov.w     #0x1, w7
    2460:	86 c0 b3    	mov.b     #0x8, w6
    2462:	15 00 20    	mov.w     #0x1, w5
    2464:	14 c0 b3    	mov.b     #0x1, w4
    2466:	23 4e 20    	mov.w     #0x4e2, w3
    2468:	82 2c 20    	mov.w     #0x2c8, w2
    246a:	a1 2c 20    	mov.w     #0x2ca, w1
    246c:	80 9d 20    	mov.w     #0x9d8, w0
    246e:	54 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2470:	8f 87 e9    	dec2.w    w15, w15
    2472:	c0 6c 20    	mov.w     #0x6cc, w0
    2474:	80 1f 78    	mov.w     w0, [w15++]
    2476:	d7 00 20    	mov.w     #0xd, w7
    2478:	86 c0 b3    	mov.b     #0x8, w6
    247a:	25 00 20    	mov.w     #0x2, w5
    247c:	24 c0 b3    	mov.b     #0x2, w4
    247e:	23 4e 20    	mov.w     #0x4e2, w3
    2480:	82 2c 20    	mov.w     #0x2c8, w2
    2482:	a1 2c 20    	mov.w     #0x2ca, w1
    2484:	20 9c 20    	mov.w     #0x9c2, w0
    2486:	48 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    2488:	8f 87 e9    	dec2.w    w15, w15
    248a:	00 00 eb    	clr.w     w0
    248c:	80 1f 78    	mov.w     w0, [w15++]
    248e:	80 83 eb    	setm.w    w7
    2490:	00 43 eb    	clr.b     w6
    2492:	35 00 20    	mov.w     #0x3, w5
    2494:	34 c0 b3    	mov.b     #0x3, w4
    2496:	23 4e 20    	mov.w     #0x4e2, w3
    2498:	82 2c 20    	mov.w     #0x2c8, w2
    249a:	a1 2c 20    	mov.w     #0x2ca, w1
    249c:	c0 9a 20    	mov.w     #0x9ac, w0
    249e:	3c 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    24a0:	8f 87 e9    	dec2.w    w15, w15
    24a2:	c0 6d 20    	mov.w     #0x6dc, w0
    24a4:	80 1f 78    	mov.w     w0, [w15++]
    24a6:	c7 01 20    	mov.w     #0x1c, w7
    24a8:	00 43 eb    	clr.b     w6
    24aa:	45 00 20    	mov.w     #0x4, w5
    24ac:	44 c0 b3    	mov.b     #0x4, w4
    24ae:	23 4e 20    	mov.w     #0x4e2, w3
    24b0:	82 2c 20    	mov.w     #0x2c8, w2
    24b2:	a1 2c 20    	mov.w     #0x2ca, w1
    24b4:	60 99 20    	mov.w     #0x996, w0
    24b6:	30 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    24b8:	8f 87 e9    	dec2.w    w15, w15
    24ba:	20 6d 20    	mov.w     #0x6d2, w0
    24bc:	80 1f 78    	mov.w     w0, [w15++]
    24be:	27 01 20    	mov.w     #0x12, w7
    24c0:	00 43 eb    	clr.b     w6
    24c2:	55 00 20    	mov.w     #0x5, w5
    24c4:	54 c0 b3    	mov.b     #0x5, w4
    24c6:	23 4e 20    	mov.w     #0x4e2, w3
    24c8:	82 2c 20    	mov.w     #0x2c8, w2
    24ca:	a1 2c 20    	mov.w     #0x2ca, w1
    24cc:	00 98 20    	mov.w     #0x980, w0
    24ce:	24 00 07    	rcall     0x2518 <_pin_init> <L0> <.LFB4> <.LFE3>
    24d0:	8f 87 e9    	dec2.w    w15, w15
    24d2:	00 00 eb    	clr.w     w0
    24d4:	00 0f 78    	mov.w     w0, [w14]
    24d6:	07 00 37    	bra       0x24e6 <.L8>

000024d8 <.L9>:
    24d8:	1e 00 78    	mov.w     [w14], w0
    24da:	76 00 b9    	mul.su    w0, #0x16, w0
    24dc:	80 00 78    	mov.w     w0, w1
    24de:	c0 84 20    	mov.w     #0x84c, w0
    24e0:	00 80 40    	add.w     w1, w0, w0
    24e2:	46 00 07    	rcall     0x2570 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    24e4:	1e 0f e8    	inc.w     [w14], [w14]

000024e6 <.L8>:
    24e6:	1e 00 78    	mov.w     [w14], w0
    24e8:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    24ea:	f6 ff 36    	bra       LEU, 0x24d8 <.L9>
    24ec:	00 00 eb    	clr.w     w0
    24ee:	00 0f 78    	mov.w     w0, [w14]
    24f0:	07 00 37    	bra       0x2500 <.L10>

000024f2 <.L11>:
    24f2:	1e 00 78    	mov.w     [w14], w0
    24f4:	76 00 b9    	mul.su    w0, #0x16, w0
    24f6:	80 00 78    	mov.w     w0, w1
    24f8:	00 98 20    	mov.w     #0x980, w0
    24fa:	00 80 40    	add.w     w1, w0, w0
    24fc:	95 00 07    	rcall     0x2628 <_pin_analogIn> <L0> <.LFB7> <.LFE6>
    24fe:	1e 0f e8    	inc.w     [w14], [w14]

00002500 <.L10>:
    2500:	1e 00 78    	mov.w     [w14], w0
    2502:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2504:	f6 ff 36    	bra       LEU, 0x24f2 <.L11>
    2506:	00 2e 20    	mov.w     #0x2e0, w0
    2508:	00 19 88    	mov.w     w0, 0x320
    250a:	22 23 ef    	clr.w     0x322
    250c:	00 c4 20    	mov.w     #0xc40, w0
    250e:	20 19 88    	mov.w     w0, 0x324
    2510:	28 23 ef    	clr.w     0x328
    2512:	21 e3 a8    	bset.b    0x321, #0x7
    2514:	00 80 fa    	ulnk      
    2516:	00 00 06    	return    

00002518 <_pin_init>:
    2518:	10 00 fa    	lnk       #0x10
    251a:	00 0f 78    	mov.w     w0, [w14]
    251c:	11 07 98    	mov.w     w1, [w14+2]
    251e:	22 07 98    	mov.w     w2, [w14+4]
    2520:	33 07 98    	mov.w     w3, [w14+6]
    2522:	04 4f 98    	mov.b     w4, [w14+8]
    2524:	55 07 98    	mov.w     w5, [w14+10]
    2526:	46 4f 98    	mov.b     w6, [w14+12]
    2528:	77 07 98    	mov.w     w7, [w14+14]
    252a:	1e 00 78    	mov.w     [w14], w0
    252c:	9e 00 90    	mov.w     [w14+2], w1
    252e:	01 08 78    	mov.w     w1, [w0]
    2530:	1e 00 78    	mov.w     [w14], w0
    2532:	ae 00 90    	mov.w     [w14+4], w1
    2534:	11 00 98    	mov.w     w1, [w0+2]
    2536:	1e 00 78    	mov.w     [w14], w0
    2538:	be 00 90    	mov.w     [w14+6], w1
    253a:	21 00 98    	mov.w     w1, [w0+4]
    253c:	1e 00 78    	mov.w     [w14], w0
    253e:	8e 48 90    	mov.b     [w14+8], w1
    2540:	61 40 98    	mov.b     w1, [w0+6]
    2542:	1e 00 78    	mov.w     [w14], w0
    2544:	de 00 90    	mov.w     [w14+10], w1
    2546:	41 00 98    	mov.w     w1, [w0+8]
    2548:	1e 00 78    	mov.w     [w14], w0
    254a:	ce 48 90    	mov.b     [w14+12], w1
    254c:	21 48 98    	mov.b     w1, [w0+10]
    254e:	fe 00 90    	mov.w     [w14+14], w1
    2550:	1e 00 78    	mov.w     [w14], w0
    2552:	61 00 98    	mov.w     w1, [w0+12]
    2554:	1e 00 78    	mov.w     [w14], w0
    2556:	ce b8 97    	mov.w     [w14-8], w1
    2558:	71 00 98    	mov.w     w1, [w0+14]
    255a:	1e 00 78    	mov.w     [w14], w0
    255c:	80 00 eb    	clr.w     w1
    255e:	01 08 98    	mov.w     w1, [w0+16]
    2560:	1e 00 78    	mov.w     [w14], w0
    2562:	80 00 eb    	clr.w     w1
    2564:	11 08 98    	mov.w     w1, [w0+18]
    2566:	1e 00 78    	mov.w     [w14], w0
    2568:	80 00 eb    	clr.w     w1
    256a:	21 08 98    	mov.w     w1, [w0+20]
    256c:	00 80 fa    	ulnk      
    256e:	00 00 06    	return    

00002570 <_pin_digitalIn>:
    2570:	02 00 fa    	lnk       #0x2
    2572:	00 0f 78    	mov.w     w0, [w14]
    2574:	1e 00 78    	mov.w     [w14], w0
    2576:	20 00 90    	mov.w     [w0+4], w0
    2578:	00 00 e0    	cp0.w     w0
    257a:	0d 00 32    	bra       Z, 0x2596 <.L14>
    257c:	1e 00 78    	mov.w     [w14], w0
    257e:	20 00 90    	mov.w     [w0+4], w0
    2580:	9e 00 78    	mov.w     [w14], w1
    2582:	a1 00 90    	mov.w     [w1+4], w1
    2584:	11 01 78    	mov.w     [w1], w2
    2586:	9e 00 78    	mov.w     [w14], w1
    2588:	e1 40 90    	mov.b     [w1+6], w1
    258a:	81 80 fb    	ze        w1, w1
    258c:	13 00 20    	mov.w     #0x1, w3
    258e:	81 18 dd    	sl.w      w3, w1, w1
    2590:	81 80 ea    	com.w     w1, w1
    2592:	81 00 61    	and.w     w2, w1, w1
    2594:	01 08 78    	mov.w     w1, [w0]

00002596 <.L14>:
    2596:	1e 00 78    	mov.w     [w14], w0
    2598:	10 00 90    	mov.w     [w0+2], w0
    259a:	9e 00 78    	mov.w     [w14], w1
    259c:	91 00 90    	mov.w     [w1+2], w1
    259e:	11 01 78    	mov.w     [w1], w2
    25a0:	9e 00 78    	mov.w     [w14], w1
    25a2:	e1 40 90    	mov.b     [w1+6], w1
    25a4:	81 80 fb    	ze        w1, w1
    25a6:	13 00 20    	mov.w     #0x1, w3
    25a8:	81 18 dd    	sl.w      w3, w1, w1
    25aa:	82 80 70    	ior.w     w1, w2, w1
    25ac:	01 08 78    	mov.w     w1, [w0]
    25ae:	1e 00 78    	mov.w     [w14], w0
    25b0:	80 00 eb    	clr.w     w1
    25b2:	11 08 98    	mov.w     w1, [w0+18]
    25b4:	1e 00 78    	mov.w     [w14], w0
    25b6:	21 2b 22    	mov.w     #0x22b2, w1
    25b8:	21 08 98    	mov.w     w1, [w0+20]
    25ba:	00 80 fa    	ulnk      
    25bc:	00 00 06    	return    

000025be <_pin_digitalOut>:
    25be:	02 00 fa    	lnk       #0x2
    25c0:	00 0f 78    	mov.w     w0, [w14]
    25c2:	1e 00 78    	mov.w     [w14], w0
    25c4:	20 00 90    	mov.w     [w0+4], w0
    25c6:	00 00 e0    	cp0.w     w0
    25c8:	0d 00 32    	bra       Z, 0x25e4 <.L16>
    25ca:	1e 00 78    	mov.w     [w14], w0
    25cc:	20 00 90    	mov.w     [w0+4], w0
    25ce:	9e 00 78    	mov.w     [w14], w1
    25d0:	a1 00 90    	mov.w     [w1+4], w1
    25d2:	11 01 78    	mov.w     [w1], w2
    25d4:	9e 00 78    	mov.w     [w14], w1
    25d6:	e1 40 90    	mov.b     [w1+6], w1
    25d8:	81 80 fb    	ze        w1, w1
    25da:	13 00 20    	mov.w     #0x1, w3
    25dc:	81 18 dd    	sl.w      w3, w1, w1
    25de:	81 80 ea    	com.w     w1, w1
    25e0:	81 00 61    	and.w     w2, w1, w1
    25e2:	01 08 78    	mov.w     w1, [w0]

000025e4 <.L16>:
    25e4:	1e 00 78    	mov.w     [w14], w0
    25e6:	10 00 78    	mov.w     [w0], w0
    25e8:	9e 00 78    	mov.w     [w14], w1
    25ea:	91 00 78    	mov.w     [w1], w1
    25ec:	11 01 78    	mov.w     [w1], w2
    25ee:	9e 00 78    	mov.w     [w14], w1
    25f0:	e1 40 90    	mov.b     [w1+6], w1
    25f2:	81 80 fb    	ze        w1, w1
    25f4:	13 00 20    	mov.w     #0x1, w3
    25f6:	81 18 dd    	sl.w      w3, w1, w1
    25f8:	81 80 ea    	com.w     w1, w1
    25fa:	81 00 61    	and.w     w2, w1, w1
    25fc:	01 08 78    	mov.w     w1, [w0]
    25fe:	1e 00 78    	mov.w     [w14], w0
    2600:	10 00 90    	mov.w     [w0+2], w0
    2602:	9e 00 78    	mov.w     [w14], w1
    2604:	91 00 90    	mov.w     [w1+2], w1
    2606:	11 01 78    	mov.w     [w1], w2
    2608:	9e 00 78    	mov.w     [w14], w1
    260a:	e1 40 90    	mov.b     [w1+6], w1
    260c:	81 80 fb    	ze        w1, w1
    260e:	13 00 20    	mov.w     #0x1, w3
    2610:	81 18 dd    	sl.w      w3, w1, w1
    2612:	81 80 ea    	com.w     w1, w1
    2614:	81 00 61    	and.w     w2, w1, w1
    2616:	01 08 78    	mov.w     w1, [w0]
    2618:	1e 00 78    	mov.w     [w14], w0
    261a:	e1 26 22    	mov.w     #0x226e, w1
    261c:	11 08 98    	mov.w     w1, [w0+18]
    261e:	1e 00 78    	mov.w     [w14], w0
    2620:	21 2b 22    	mov.w     #0x22b2, w1
    2622:	21 08 98    	mov.w     w1, [w0+20]
    2624:	00 80 fa    	ulnk      
    2626:	00 00 06    	return    

00002628 <_pin_analogIn>:
    2628:	02 00 fa    	lnk       #0x2
    262a:	00 0f 78    	mov.w     w0, [w14]
    262c:	1e 00 78    	mov.w     [w14], w0
    262e:	20 00 90    	mov.w     [w0+4], w0
    2630:	00 00 e0    	cp0.w     w0
    2632:	1f 00 32    	bra       Z, 0x2672 <.L20>
    2634:	1e 00 78    	mov.w     [w14], w0
    2636:	10 00 90    	mov.w     [w0+2], w0
    2638:	9e 00 78    	mov.w     [w14], w1
    263a:	91 00 90    	mov.w     [w1+2], w1
    263c:	11 01 78    	mov.w     [w1], w2
    263e:	9e 00 78    	mov.w     [w14], w1
    2640:	e1 40 90    	mov.b     [w1+6], w1
    2642:	81 80 fb    	ze        w1, w1
    2644:	13 00 20    	mov.w     #0x1, w3
    2646:	81 18 dd    	sl.w      w3, w1, w1
    2648:	82 80 70    	ior.w     w1, w2, w1
    264a:	01 08 78    	mov.w     w1, [w0]
    264c:	1e 00 78    	mov.w     [w14], w0
    264e:	20 00 90    	mov.w     [w0+4], w0
    2650:	9e 00 78    	mov.w     [w14], w1
    2652:	a1 00 90    	mov.w     [w1+4], w1
    2654:	11 01 78    	mov.w     [w1], w2
    2656:	9e 00 78    	mov.w     [w14], w1
    2658:	e1 40 90    	mov.b     [w1+6], w1
    265a:	81 80 fb    	ze        w1, w1
    265c:	13 00 20    	mov.w     #0x1, w3
    265e:	81 18 dd    	sl.w      w3, w1, w1
    2660:	82 80 70    	ior.w     w1, w2, w1
    2662:	01 08 78    	mov.w     w1, [w0]
    2664:	1e 00 78    	mov.w     [w14], w0
    2666:	80 00 eb    	clr.w     w1
    2668:	11 08 98    	mov.w     w1, [w0+18]
    266a:	1e 00 78    	mov.w     [w14], w0
    266c:	41 2d 22    	mov.w     #0x22d4, w1
    266e:	21 08 98    	mov.w     w1, [w0+20]
    2670:	01 00 37    	bra       0x2674 <.L17>

00002672 <.L20>:
    2672:	00 00 00    	nop       

00002674 <.L17>:
    2674:	00 80 fa    	ulnk      
    2676:	00 00 06    	return    

00002678 <_pin_set>:
    2678:	02 00 fa    	lnk       #0x2
    267a:	00 0f 78    	mov.w     w0, [w14]
    267c:	1e 00 78    	mov.w     [w14], w0
    267e:	90 08 90    	mov.w     [w0+18], w1
    2680:	e0 26 22    	mov.w     #0x226e, w0
    2682:	80 8f 50    	sub.w     w1, w0, [w15]
    2684:	0c 00 3a    	bra       NZ, 0x269e <.L21>
    2686:	1e 00 78    	mov.w     [w14], w0
    2688:	10 00 78    	mov.w     [w0], w0
    268a:	9e 00 78    	mov.w     [w14], w1
    268c:	91 00 78    	mov.w     [w1], w1
    268e:	11 01 78    	mov.w     [w1], w2
    2690:	9e 00 78    	mov.w     [w14], w1
    2692:	e1 40 90    	mov.b     [w1+6], w1
    2694:	81 80 fb    	ze        w1, w1
    2696:	13 00 20    	mov.w     #0x1, w3
    2698:	81 18 dd    	sl.w      w3, w1, w1
    269a:	82 80 70    	ior.w     w1, w2, w1
    269c:	01 08 78    	mov.w     w1, [w0]

0000269e <.L21>:
    269e:	00 80 fa    	ulnk      
    26a0:	00 00 06    	return    

000026a2 <_pin_clear>:
    26a2:	02 00 fa    	lnk       #0x2
    26a4:	00 0f 78    	mov.w     w0, [w14]
    26a6:	1e 00 78    	mov.w     [w14], w0
    26a8:	90 08 90    	mov.w     [w0+18], w1
    26aa:	e0 26 22    	mov.w     #0x226e, w0
    26ac:	80 8f 50    	sub.w     w1, w0, [w15]
    26ae:	0d 00 3a    	bra       NZ, 0x26ca <.L23>
    26b0:	1e 00 78    	mov.w     [w14], w0
    26b2:	10 00 78    	mov.w     [w0], w0
    26b4:	9e 00 78    	mov.w     [w14], w1
    26b6:	91 00 78    	mov.w     [w1], w1
    26b8:	11 01 78    	mov.w     [w1], w2
    26ba:	9e 00 78    	mov.w     [w14], w1
    26bc:	e1 40 90    	mov.b     [w1+6], w1
    26be:	81 80 fb    	ze        w1, w1
    26c0:	13 00 20    	mov.w     #0x1, w3
    26c2:	81 18 dd    	sl.w      w3, w1, w1
    26c4:	81 80 ea    	com.w     w1, w1
    26c6:	81 00 61    	and.w     w2, w1, w1
    26c8:	01 08 78    	mov.w     w1, [w0]

000026ca <.L23>:
    26ca:	00 80 fa    	ulnk      
    26cc:	00 00 06    	return    

000026ce <_pin_toggle>:
    26ce:	02 00 fa    	lnk       #0x2
    26d0:	00 0f 78    	mov.w     w0, [w14]
    26d2:	1e 00 78    	mov.w     [w14], w0
    26d4:	90 08 90    	mov.w     [w0+18], w1
    26d6:	e0 26 22    	mov.w     #0x226e, w0
    26d8:	80 8f 50    	sub.w     w1, w0, [w15]
    26da:	0c 00 3a    	bra       NZ, 0x26f4 <.L25>
    26dc:	1e 00 78    	mov.w     [w14], w0
    26de:	10 00 78    	mov.w     [w0], w0
    26e0:	9e 00 78    	mov.w     [w14], w1
    26e2:	91 00 78    	mov.w     [w1], w1
    26e4:	11 01 78    	mov.w     [w1], w2
    26e6:	9e 00 78    	mov.w     [w14], w1
    26e8:	e1 40 90    	mov.b     [w1+6], w1
    26ea:	81 80 fb    	ze        w1, w1
    26ec:	13 00 20    	mov.w     #0x1, w3
    26ee:	81 18 dd    	sl.w      w3, w1, w1
    26f0:	81 00 69    	xor.w     w2, w1, w1
    26f2:	01 08 78    	mov.w     w1, [w0]

000026f4 <.L25>:
    26f4:	00 80 fa    	ulnk      
    26f6:	00 00 06    	return    

000026f8 <_pin_write>:
    26f8:	04 00 fa    	lnk       #0x4
    26fa:	00 0f 78    	mov.w     w0, [w14]
    26fc:	11 07 98    	mov.w     w1, [w14+2]
    26fe:	1e 00 78    	mov.w     [w14], w0
    2700:	10 08 90    	mov.w     [w0+18], w0
    2702:	00 00 e0    	cp0.w     w0
    2704:	05 00 32    	bra       Z, 0x2710 <.L27>
    2706:	1e 00 78    	mov.w     [w14], w0
    2708:	10 09 90    	mov.w     [w0+18], w2
    270a:	9e 00 90    	mov.w     [w14+2], w1
    270c:	1e 00 78    	mov.w     [w14], w0
    270e:	02 00 01    	call      w2

00002710 <.L27>:
    2710:	00 80 fa    	ulnk      
    2712:	00 00 06    	return    

00002714 <_pin_read>:
    2714:	02 00 fa    	lnk       #0x2
    2716:	00 0f 78    	mov.w     w0, [w14]
    2718:	1e 00 78    	mov.w     [w14], w0
    271a:	20 08 90    	mov.w     [w0+20], w0
    271c:	00 00 e0    	cp0.w     w0
    271e:	05 00 32    	bra       Z, 0x272a <.L30>
    2720:	1e 00 78    	mov.w     [w14], w0
    2722:	a0 08 90    	mov.w     [w0+20], w1
    2724:	1e 00 78    	mov.w     [w14], w0
    2726:	01 00 01    	call      w1
    2728:	01 00 37    	bra       0x272c <.L31>

0000272a <.L30>:
    272a:	00 80 eb    	setm.w    w0

0000272c <.L31>:
    272c:	00 80 fa    	ulnk      
    272e:	00 00 06    	return    

00002730 <_mpu_writeReg>:
    2730:	02 00 fa    	lnk       #0x2
    2732:	00 4f 78    	mov.b     w0, [w14]
#define READ_SW3            10

_PIN *SCK, *MISO, *MOSI, *CSN, *INT;

void mpu_writeReg(uint8_t address, uint8_t value) {
    2734:	11 47 98    	mov.b     w1, [w14+1]
    if (address<=0x7E) {
    2736:	e0 c7 b3    	mov.b     #0x7e, w0
    2738:	9e 40 78    	mov.b     [w14], w1
    273a:	80 cf 50    	sub.b     w1, w0, [w15]
    273c:	0a 00 3e    	bra       GTU, 0x2752 <.L1>
        pin_clear(CSN);
    273e:	40 42 80    	mov.w     0x848, w0
    2740:	b0 ff 07    	rcall     0x26a2 <_pin_clear> <L0> <.LFB9> <.LFE8>
        spi_transfer(&spi1, address);
    2742:	9e 40 78    	mov.b     [w14], w1
    2744:	00 a9 20    	mov.w     #0xa90, w0
    2746:	7e fd 07    	rcall     0x2244 <_spi_transfer> <L0> <.LFB4> <.LFE3>
        spi_transfer(&spi1, value);
    2748:	9e 40 90    	mov.b     [w14+1], w1
    274a:	00 a9 20    	mov.w     #0xa90, w0
    274c:	7b fd 07    	rcall     0x2244 <_spi_transfer> <L0> <.LFB4> <.LFE3>
        pin_set(CSN);
    274e:	40 42 80    	mov.w     0x848, w0
    2750:	93 ff 07    	rcall     0x2678 <_pin_set> <L0> <.LFB8> <.LFE7>

00002752 <.L1>:
    }
}
    2752:	00 80 fa    	ulnk      
    2754:	00 00 06    	return    

00002756 <_mpu_readReg>:

uint8_t mpu_readReg(uint8_t address) {
    2756:	04 00 fa    	lnk       #0x4
    2758:	20 47 98    	mov.b     w0, [w14+2]
    uint8_t value;

    if (address<=0x7E) {
    275a:	ae 40 90    	mov.b     [w14+2], w1
    275c:	e0 c7 b3    	mov.b     #0x7e, w0
    275e:	80 cf 50    	sub.b     w1, w0, [w15]
    2760:	10 00 3e    	bra       GTU, 0x2782 <.L4>
        pin_clear(CSN);
    2762:	40 42 80    	mov.w     0x848, w0
    2764:	9e ff 07    	rcall     0x26a2 <_pin_clear> <L0> <.LFB9> <.LFE8>
        spi_transfer(&spi1, 0x80|address);
    2766:	ae 40 90    	mov.b     [w14+2], w1
    2768:	00 c8 b3    	mov.b     #0x80, w0
    276a:	00 c0 70    	ior.b     w1, w0, w0
    276c:	80 40 78    	mov.b     w0, w1
    276e:	00 a9 20    	mov.w     #0xa90, w0
    2770:	69 fd 07    	rcall     0x2244 <_spi_transfer> <L0> <.LFB4> <.LFE3>
        value = spi_transfer(&spi1, 0);
    2772:	80 40 eb    	clr.b     w1
    2774:	00 a9 20    	mov.w     #0xa90, w0
    2776:	66 fd 07    	rcall     0x2244 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    2778:	00 4f 78    	mov.b     w0, [w14]
        pin_set(CSN);
    277a:	40 42 80    	mov.w     0x848, w0
    277c:	7d ff 07    	rcall     0x2678 <_pin_set> <L0> <.LFB8> <.LFE7>
        return value;
    277e:	1e 40 78    	mov.b     [w14], w0
    2780:	01 00 37    	bra       0x2784 <.L5>

00002782 <.L4>:
    } else
        return 0xFF;
    2782:	00 c0 eb    	setm.b    w0

00002784 <.L5>:
}
    2784:	00 80 fa    	ulnk      
    2786:	00 00 06    	return    

00002788 <_mpu_writeRegs>:

void mpu_writeRegs(uint8_t address, uint8_t *buffer, uint8_t n) {
    2788:	08 00 fa    	lnk       #0x8
    278a:	20 47 98    	mov.b     w0, [w14+2]
    278c:	21 07 98    	mov.w     w1, [w14+4]
    278e:	62 47 98    	mov.b     w2, [w14+6]
    uint8_t i;

    if (address+n<=0x7E) {
    2790:	2e 40 90    	mov.b     [w14+2], w0
    2792:	80 80 fb    	ze        w0, w1
    2794:	6e 40 90    	mov.b     [w14+6], w0
    2796:	00 80 fb    	ze        w0, w0
    2798:	80 80 40    	add.w     w1, w0, w1
    279a:	e0 07 20    	mov.w     #0x7e, w0
    279c:	80 8f 50    	sub.w     w1, w0, [w15]
    279e:	16 00 3c    	bra       GT, 0x27cc <.L6>
        pin_clear(CSN);
    27a0:	40 42 80    	mov.w     0x848, w0
    27a2:	7f ff 07    	rcall     0x26a2 <_pin_clear> <L0> <.LFB9> <.LFE8>
        spi_transfer(&spi1, address);
    27a4:	ae 40 90    	mov.b     [w14+2], w1
    27a6:	00 a9 20    	mov.w     #0xa90, w0
    27a8:	4d fd 07    	rcall     0x2244 <_spi_transfer> <L0> <.LFB4> <.LFE3>
        for (i = 0; i<n; i++)
    27aa:	00 40 eb    	clr.b     w0
    27ac:	00 4f 78    	mov.b     w0, [w14]
    27ae:	08 00 37    	bra       0x27c0 <.L8>

000027b0 <.L9>:
            spi_transfer(&spi1, buffer[i]);
    27b0:	1e 80 fb    	ze        [w14], w0
    27b2:	ae 00 90    	mov.w     [w14+4], w1
    27b4:	00 80 40    	add.w     w1, w0, w0
    27b6:	10 40 78    	mov.b     [w0], w0
    27b8:	80 40 78    	mov.b     w0, w1
    27ba:	00 a9 20    	mov.w     #0xa90, w0
    27bc:	43 fd 07    	rcall     0x2244 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    27be:	1e 4f e8    	inc.b     [w14], [w14]

000027c0 <.L8>:
    27c0:	6e 40 90    	mov.b     [w14+6], w0
    27c2:	9e 40 78    	mov.b     [w14], w1
    27c4:	80 cf 50    	sub.b     w1, w0, [w15]
    27c6:	f4 ff 39    	bra       NC, 0x27b0 <.L9>
        pin_set(CSN);
    27c8:	40 42 80    	mov.w     0x848, w0
    27ca:	56 ff 07    	rcall     0x2678 <_pin_set> <L0> <.LFB8> <.LFE7>

000027cc <.L6>:
    }
}
    27cc:	00 80 fa    	ulnk      
    27ce:	00 00 06    	return    

000027d0 <_mpu_readRegs>:

void mpu_readRegs(uint8_t address, uint8_t *buffer, uint8_t n) {
    27d0:	08 00 fa    	lnk       #0x8
    27d2:	88 1f 78    	mov.w     w8, [w15++]
    27d4:	20 47 98    	mov.b     w0, [w14+2]
    27d6:	21 07 98    	mov.w     w1, [w14+4]
    27d8:	62 47 98    	mov.b     w2, [w14+6]
    uint8_t i;

    if (address+n<=0x7E) {
    27da:	2e 40 90    	mov.b     [w14+2], w0
    27dc:	80 80 fb    	ze        w0, w1
    27de:	6e 40 90    	mov.b     [w14+6], w0
    27e0:	00 80 fb    	ze        w0, w0
    27e2:	80 80 40    	add.w     w1, w0, w1
    27e4:	e0 07 20    	mov.w     #0x7e, w0
    27e6:	80 8f 50    	sub.w     w1, w0, [w15]
    27e8:	1c 00 3c    	bra       GT, 0x2822 <.L11>
        led_toggle(&led2);
    27ea:	80 80 20    	mov.w     #0x808, w0
    27ec:	8b 01 07    	rcall     0x2b04 <_led_toggle> <L0> <.LFB4> <.LFE3>
        pin_clear(CSN); // select
    27ee:	40 42 80    	mov.w     0x848, w0
    27f0:	58 ff 07    	rcall     0x26a2 <_pin_clear> <L0> <.LFB9> <.LFE8>
        spi_transfer(&spi1, 0x80|address);
    27f2:	ae 40 90    	mov.b     [w14+2], w1
    27f4:	00 c8 b3    	mov.b     #0x80, w0
    27f6:	00 c0 70    	ior.b     w1, w0, w0
    27f8:	80 40 78    	mov.b     w0, w1
    27fa:	00 a9 20    	mov.w     #0xa90, w0
    27fc:	23 fd 07    	rcall     0x2244 <_spi_transfer> <L0> <.LFB4> <.LFE3>
        for (i = 0; i<n; i++)
    27fe:	00 40 eb    	clr.b     w0
    2800:	00 4f 78    	mov.b     w0, [w14]
    2802:	08 00 37    	bra       0x2814 <.L12>

00002804 <.L13>:
            buffer[i] = spi_transfer(&spi1, 0);
    2804:	1e 80 fb    	ze        [w14], w0
    2806:	ae 00 90    	mov.w     [w14+4], w1
    2808:	00 84 40    	add.w     w1, w0, w8
    280a:	80 40 eb    	clr.b     w1
    280c:	00 a9 20    	mov.w     #0xa90, w0
    280e:	1a fd 07    	rcall     0x2244 <_spi_transfer> <L0> <.LFB4> <.LFE3>
    2810:	00 4c 78    	mov.b     w0, [w8]
    2812:	1e 4f e8    	inc.b     [w14], [w14]

00002814 <.L12>:
    2814:	6e 40 90    	mov.b     [w14+6], w0
    2816:	9e 40 78    	mov.b     [w14], w1
    2818:	80 cf 50    	sub.b     w1, w0, [w15]
    281a:	f4 ff 39    	bra       NC, 0x2804 <.L13>
            //buffer[i] = i+1;
        pin_set(CSN);
    281c:	40 42 80    	mov.w     0x848, w0
    281e:	2c ff 07    	rcall     0x2678 <_pin_set> <L0> <.LFB8> <.LFE7>
    2820:	0f 00 37    	bra       0x2840 <.L10>

00002822 <.L11>:
    } else {
        led_toggle(&led3);
    2822:	00 81 20    	mov.w     #0x810, w0
    2824:	6f 01 07    	rcall     0x2b04 <_led_toggle> <L0> <.LFB4> <.LFE3>
        for (i = 0; i<n; i++){
    2826:	00 40 eb    	clr.b     w0
    2828:	00 4f 78    	mov.b     w0, [w14]
    282a:	06 00 37    	bra       0x2838 <.L15>

0000282c <.L16>:
            buffer[i] = 0xFF;
    282c:	1e 80 fb    	ze        [w14], w0
    282e:	ae 00 90    	mov.w     [w14+4], w1
    2830:	00 80 40    	add.w     w1, w0, w0
    2832:	80 c0 eb    	setm.b    w1
    2834:	01 48 78    	mov.b     w1, [w0]
    2836:	1e 4f e8    	inc.b     [w14], [w14]

00002838 <.L15>:
    2838:	6e 40 90    	mov.b     [w14+6], w0
    283a:	9e 40 78    	mov.b     [w14], w1
    283c:	80 cf 50    	sub.b     w1, w0, [w15]
    283e:	f6 ff 39    	bra       NC, 0x282c <.L16>

00002840 <.L10>:
          }
    }
}
    2840:	4f 04 78    	mov.w     [--w15], w8
    2842:	00 80 fa    	ulnk      
    2844:	00 00 06    	return    

00002846 <_VendorRequests>:

//void ClassRequests(void) {
//    switch (USB_setup.bRequest) {
//        default:
//            USB_error_flags |= 0x01;                    // set Request Error Flag
//    }
//}

void VendorRequests(void) {
    2846:	04 00 fa    	lnk       #0x4
    2848:	88 1f 78    	mov.w     w8, [w15++]
    WORD32 address;

    switch (USB_setup.bRequest) {
    284a:	40 83 20    	mov.w     #0x834, w0
    284c:	10 40 90    	mov.b     [w0+1], w0
    284e:	00 80 fb    	ze        w0, w0
    2850:	61 01 b9    	mul.su    w0, #0x1, w2
    2852:	00 80 eb    	setm.w    w0
    2854:	80 80 eb    	setm.w    w1
    2856:	02 00 40    	add.w     w0, w2, w0
    2858:	83 80 48    	addc.w    w1, w3, w1
    285a:	92 00 20    	mov.w     #0x9, w2
    285c:	03 00 20    	mov.w     #0x0, w3
    285e:	82 0f 50    	sub.w     w0, w2, [w15]
    2860:	83 8f 58    	subb.w    w1, w3, [w15]
    2862:	82 00 3e    	bra       GTU, 0x2968 <.L18>
    2864:	00 60 01    	bra       w0
    2866:	09 00 37    	bra       0x287a <.L19>
    2868:	11 00 37    	bra       0x288c <.L20>
    286a:	19 00 37    	bra       0x289e <.L21>
    286c:	24 00 37    	bra       0x28b6 <.L22>
    286e:	2f 00 37    	bra       0x28ce <.L23>
    2870:	3a 00 37    	bra       0x28e6 <.L24>
    2872:	4b 00 37    	bra       0x290a <.L25>
    2874:	58 00 37    	bra       0x2926 <.L26>
    2876:	60 00 37    	bra       0x2938 <.L27>
    2878:	6b 00 37    	bra       0x2950 <.L28>

0000287a <.L19>:
        case TOGGLE_LED1:
            led_toggle(&led1);
    287a:	00 80 20    	mov.w     #0x800, w0
    287c:	43 01 07    	rcall     0x2b04 <_led_toggle> <L0> <.LFB4> <.LFE3>
            BD[EP0IN].bytecount = 0;         // set EP0 IN byte count to 0
    287e:	40 c0 20    	mov.w     #0xc04, w0
    2880:	80 40 eb    	clr.b     w1
    2882:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    2884:	50 c0 20    	mov.w     #0xc05, w0
    2886:	81 cc b3    	mov.b     #0xc8, w1
    2888:	01 48 78    	mov.b     w1, [w0]
            break;
    288a:	71 00 37    	bra       0x296e <.L17>

0000288c <.L20>:
        case TOGGLE_LED2:
            led_toggle(&led2);
    288c:	80 80 20    	mov.w     #0x808, w0
    288e:	3a 01 07    	rcall     0x2b04 <_led_toggle> <L0> <.LFB4> <.LFE3>
            BD[EP0IN].bytecount = 0;         // set EP0 IN byte count to 0
    2890:	40 c0 20    	mov.w     #0xc04, w0
    2892:	80 40 eb    	clr.b     w1
    2894:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    2896:	50 c0 20    	mov.w     #0xc05, w0
    2898:	81 cc b3    	mov.b     #0xc8, w1
    289a:	01 48 78    	mov.b     w1, [w0]
            break;
    289c:	68 00 37    	bra       0x296e <.L17>

0000289e <.L21>:
        case READ_SW1:
            BD[EP0IN].address[0] = (uint8_t)sw_read(&sw1);
    289e:	38 60 80    	mov.w     0xc06, w8
    28a0:	80 81 20    	mov.w     #0x818, w0
    28a2:	a0 01 07    	rcall     0x2be4 <_sw_read> <L0> <.LFB8> <.LFE7>
    28a4:	00 40 78    	mov.b     w0, w0
    28a6:	00 4c 78    	mov.b     w0, [w8]
            BD[EP0IN].bytecount = 1;         // set EP0 IN byte count to 1
    28a8:	40 c0 20    	mov.w     #0xc04, w0
    28aa:	11 c0 b3    	mov.b     #0x1, w1
    28ac:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    28ae:	50 c0 20    	mov.w     #0xc05, w0
    28b0:	81 cc b3    	mov.b     #0xc8, w1
    28b2:	01 48 78    	mov.b     w1, [w0]
            break;
    28b4:	5c 00 37    	bra       0x296e <.L17>

000028b6 <.L22>:
        case MPU_WRITE_REG:
            mpu_writeReg(USB_setup.wValue.b[0], USB_setup.wIndex.b[0]);
    28b6:	40 83 20    	mov.w     #0x834, w0
    28b8:	c0 40 90    	mov.b     [w0+4], w1
    28ba:	40 83 20    	mov.w     #0x834, w0
    28bc:	20 40 90    	mov.b     [w0+2], w0
    28be:	38 ff 07    	rcall     0x2730 <_mpu_writeReg> <L0> <.L0> <.LFB0> <.LFE12> <.Letext0> <.Ltext0>
            BD[EP0IN].bytecount = 0;         // set EP0 IN byte count to 0
    28c0:	40 c0 20    	mov.w     #0xc04, w0
    28c2:	80 40 eb    	clr.b     w1
    28c4:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    28c6:	50 c0 20    	mov.w     #0xc05, w0
    28c8:	81 cc b3    	mov.b     #0xc8, w1
    28ca:	01 48 78    	mov.b     w1, [w0]
            break;
    28cc:	50 00 37    	bra       0x296e <.L17>

000028ce <.L23>:
        case MPU_READ_REG:
            BD[EP0IN].address[0] = mpu_readReg(USB_setup.wValue.b[0]);
    28ce:	38 60 80    	mov.w     0xc06, w8
    28d0:	40 83 20    	mov.w     #0x834, w0
    28d2:	20 40 90    	mov.b     [w0+2], w0
    28d4:	40 ff 07    	rcall     0x2756 <_mpu_readReg> <L0> <.LFB1> <.LFE0>
    28d6:	00 4c 78    	mov.b     w0, [w8]
            BD[EP0IN].bytecount = 1;         // set EP0 IN byte count to 1
    28d8:	40 c0 20    	mov.w     #0xc04, w0
    28da:	11 c0 b3    	mov.b     #0x1, w1
    28dc:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    28de:	50 c0 20    	mov.w     #0xc05, w0
    28e0:	81 cc b3    	mov.b     #0xc8, w1
    28e2:	01 48 78    	mov.b     w1, [w0]
            break;
    28e4:	44 00 37    	bra       0x296e <.L17>

000028e6 <.L24>:
        case MPU_WRITE_REGS:
            USB_request.setup.bmRequestType = USB_setup.bmRequestType;
    28e6:	40 83 20    	mov.w     #0x834, w0
    28e8:	90 40 78    	mov.b     [w0], w1
    28ea:	40 a8 20    	mov.w     #0xa84, w0
    28ec:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.bRequest = USB_setup.bRequest;
    28ee:	40 83 20    	mov.w     #0x834, w0
    28f0:	90 40 90    	mov.b     [w0+1], w1
    28f2:	50 a8 20    	mov.w     #0xa85, w0
    28f4:	01 48 78    	mov.b     w1, [w0]
            USB_request.setup.wValue.w = USB_setup.wValue.w;
    28f6:	40 83 20    	mov.w     #0x834, w0
    28f8:	10 00 90    	mov.w     [w0+2], w0
    28fa:	30 54 88    	mov.w     w0, 0xa86
            USB_request.setup.wIndex.w = USB_setup.wIndex.w;
    28fc:	40 83 20    	mov.w     #0x834, w0
    28fe:	20 00 90    	mov.w     [w0+4], w0
    2900:	40 54 88    	mov.w     w0, 0xa88
            USB_request.setup.wLength.w = USB_setup.wLength.w;
    2902:	40 83 20    	mov.w     #0x834, w0
    2904:	30 00 90    	mov.w     [w0+6], w0
    2906:	50 54 88    	mov.w     w0, 0xa8a
            break;
    2908:	32 00 37    	bra       0x296e <.L17>

0000290a <.L25>:
        case MPU_READ_REGS:
            mpu_readRegs(USB_setup.wValue.b[0], BD[EP0IN].address, USB_setup.wLength.b[0]);
    290a:	40 83 20    	mov.w     #0x834, w0
    290c:	60 41 90    	mov.b     [w0+6], w2
    290e:	31 60 80    	mov.w     0xc06, w1
    2910:	40 83 20    	mov.w     #0x834, w0
    2912:	20 40 90    	mov.b     [w0+2], w0
    2914:	5d ff 07    	rcall     0x27d0 <_mpu_readRegs> <L0> <.LFB3> <.LFE2>
            BD[EP0IN].bytecount = USB_setup.wLength.b[0];
    2916:	40 83 20    	mov.w     #0x834, w0
    2918:	e0 40 90    	mov.b     [w0+6], w1
    291a:	40 c0 20    	mov.w     #0xc04, w0
    291c:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    291e:	50 c0 20    	mov.w     #0xc05, w0
    2920:	81 cc b3    	mov.b     #0xc8, w1
    2922:	01 48 78    	mov.b     w1, [w0]
            break;
    2924:	24 00 37    	bra       0x296e <.L17>

00002926 <.L26>:
        case TOGGLE_LED3:
            led_toggle(&led3);
    2926:	00 81 20    	mov.w     #0x810, w0
    2928:	ed 00 07    	rcall     0x2b04 <_led_toggle> <L0> <.LFB4> <.LFE3>
            BD[EP0IN].bytecount = 0;         // set EP0 IN byte count to 0
    292a:	40 c0 20    	mov.w     #0xc04, w0
    292c:	80 40 eb    	clr.b     w1
    292e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    2930:	50 c0 20    	mov.w     #0xc05, w0
    2932:	81 cc b3    	mov.b     #0xc8, w1
    2934:	01 48 78    	mov.b     w1, [w0]
            break;
    2936:	1b 00 37    	bra       0x296e <.L17>

00002938 <.L27>:
        case READ_SW2:
            BD[EP0IN].address[0] = (uint8_t)sw_read(&sw2);
    2938:	38 60 80    	mov.w     0xc06, w8
    293a:	00 82 20    	mov.w     #0x820, w0
    293c:	53 01 07    	rcall     0x2be4 <_sw_read> <L0> <.LFB8> <.LFE7>
    293e:	00 40 78    	mov.b     w0, w0
    2940:	00 4c 78    	mov.b     w0, [w8]
            BD[EP0IN].bytecount = 1;         // set EP0 IN byte count to 1
    2942:	40 c0 20    	mov.w     #0xc04, w0
    2944:	11 c0 b3    	mov.b     #0x1, w1
    2946:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    2948:	50 c0 20    	mov.w     #0xc05, w0
    294a:	81 cc b3    	mov.b     #0xc8, w1
    294c:	01 48 78    	mov.b     w1, [w0]
            break;
    294e:	0f 00 37    	bra       0x296e <.L17>

00002950 <.L28>:
        case READ_SW3:
            BD[EP0IN].address[0] = (uint8_t)sw_read(&sw3);
    2950:	38 60 80    	mov.w     0xc06, w8
    2952:	80 82 20    	mov.w     #0x828, w0
    2954:	47 01 07    	rcall     0x2be4 <_sw_read> <L0> <.LFB8> <.LFE7>
    2956:	00 40 78    	mov.b     w0, w0
    2958:	00 4c 78    	mov.b     w0, [w8]
            BD[EP0IN].bytecount = 1;         // set EP0 IN byte count to 1
    295a:	40 c0 20    	mov.w     #0xc04, w0
    295c:	11 c0 b3    	mov.b     #0x1, w1
    295e:	01 48 78    	mov.b     w1, [w0]
            BD[EP0IN].status = 0xC8;         // send packet as DATA1, set UOWN bit
    2960:	50 c0 20    	mov.w     #0xc05, w0
    2962:	81 cc b3    	mov.b     #0xc8, w1
    2964:	01 48 78    	mov.b     w1, [w0]
            break;
    2966:	03 00 37    	bra       0x296e <.L17>

00002968 <.L18>:
        default:
            USB_error_flags |= 0x01;    // set Request Error Flag
    2968:	3c c8 bf    	mov.b     0x83c, WREG
    296a:	00 04 a0    	bset.b    w0, #0x0
    296c:	3c e8 b7    	mov.b     WREG, 0x83c

0000296e <.L17>:
    }
}
    296e:	4f 04 78    	mov.w     [--w15], w8
    2970:	00 80 fa    	ulnk      
    2972:	00 00 06    	return    

00002974 <_VendorRequestsIn>:

void VendorRequestsIn(void) {
    2974:	00 00 fa    	lnk       #0x0
    switch (USB_request.setup.bRequest) {
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    2976:	3c c8 bf    	mov.b     0x83c, WREG
    2978:	00 04 a0    	bset.b    w0, #0x0
    297a:	3c e8 b7    	mov.b     WREG, 0x83c
    }
}
    297c:	00 80 fa    	ulnk      
    297e:	00 00 06    	return    

00002980 <_VendorRequestsOut>:

void VendorRequestsOut(void) {
    2980:	04 00 fa    	lnk       #0x4
    WORD32 address;

    switch (USB_request.setup.bRequest) {
    2982:	50 a8 20    	mov.w     #0xa85, w0
    2984:	10 40 78    	mov.b     [w0], w0
    2986:	00 80 fb    	ze        w0, w0
    2988:	e6 0f 50    	sub.w     w0, #0x6, [w15]
    298a:	07 00 3a    	bra       NZ, 0x299a <.L36>
        case MPU_WRITE_REGS:
            mpu_writeRegs(USB_request.setup.wValue.b[0], BD[EP0OUT].address, USB_request.setup.wLength.b[0]);
    298c:	a0 a8 20    	mov.w     #0xa8a, w0
    298e:	10 41 78    	mov.b     [w0], w2
    2990:	11 60 80    	mov.w     0xc02, w1
    2992:	60 a8 20    	mov.w     #0xa86, w0
    2994:	10 40 78    	mov.b     [w0], w0
    2996:	f8 fe 07    	rcall     0x2788 <_mpu_writeRegs> <L0> <.LFB2> <.LFE1>
            break;
    2998:	03 00 37    	bra       0x29a0 <.L32>

0000299a <.L36>:
        default:
            USB_error_flags |= 0x01;                    // set Request Error Flag
    299a:	3c c8 bf    	mov.b     0x83c, WREG
    299c:	00 04 a0    	bset.b    w0, #0x0
    299e:	3c e8 b7    	mov.b     WREG, 0x83c

000029a0 <.L32>:
    }
}
    29a0:	00 80 fa    	ulnk      
    29a2:	00 00 06    	return    

000029a4 <_main>:

int16_t main(void) {
    29a4:	00 00 fa    	lnk       #0x0
    init_clock();
    29a6:	00 10 20    	mov.w     #0x100, w0
    29a8:	20 3a 88    	mov.w     w0, 0x744
    init_ui();
    29aa:	29 00 07    	rcall     0x29fe <_init_ui> <L0> <.L0> <.LFB0> <.LFE7> <.Letext0> <.Ltext0>
    init_pin();
    29ac:	a1 fc 07    	rcall     0x22f0 <_init_pin> <L0> <.LFB3> <.LFE2>
    init_spi();
    29ae:	fc f9 07    	rcall     0x1da8 <_init_spi> <L0> <.L0> <.LFB0> <.LFE6> <.Letext0> <.Ltext0>

    SCK = &D[11];
    29b0:	e0 93 20    	mov.w     #0x93e, w0
    29b2:	10 42 88    	mov.w     w0, 0x842
    MISO = &D[13];
    29b4:	a0 96 20    	mov.w     #0x96a, w0
    29b6:	20 42 88    	mov.w     w0, 0x844
    MOSI = &D[12];
    29b8:	40 95 20    	mov.w     #0x954, w0
    29ba:	30 42 88    	mov.w     w0, 0x846
    //INT = &D[9];
    CSN = &D[10];
    29bc:	80 92 20    	mov.w     #0x928, w0
    29be:	40 42 88    	mov.w     w0, 0x848
    led_toggle(&led1);
    29c0:	00 80 20    	mov.w     #0x800, w0
    29c2:	a0 00 07    	rcall     0x2b04 <_led_toggle> <L0> <.LFB4> <.LFE3>
    pin_digitalOut(CSN);
    29c4:	40 42 80    	mov.w     0x848, w0
    29c6:	fb fd 07    	rcall     0x25be <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    pin_digitalOut(MOSI);
    29c8:	30 42 80    	mov.w     0x846, w0
    29ca:	f9 fd 07    	rcall     0x25be <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    pin_digitalIn(MISO);
    29cc:	20 42 80    	mov.w     0x844, w0
    29ce:	d0 fd 07    	rcall     0x2570 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    pin_digitalOut(SCK);
    29d0:	10 42 80    	mov.w     0x842, w0
    29d2:	f5 fd 07    	rcall     0x25be <_pin_digitalOut> <L0> <.LFB6> <.LFE5>

    pin_set(CSN);
    29d4:	40 42 80    	mov.w     0x848, w0
    29d6:	50 fe 07    	rcall     0x2678 <_pin_set> <L0> <.LFB8> <.LFE7>

    spi_open(&spi1, MISO, MOSI, SCK, 1e6, 0);
    29d8:	12 42 80    	mov.w     0x842, w2
    29da:	31 42 80    	mov.w     0x846, w1
    29dc:	20 42 80    	mov.w     0x844, w0
    29de:	00 43 eb    	clr.b     w6
    29e0:	04 40 22    	mov.w     #0x2400, w4
    29e2:	45 97 24    	mov.w     #0x4974, w5
    29e4:	82 01 78    	mov.w     w2, w3
    29e6:	01 01 78    	mov.w     w1, w2
    29e8:	80 00 78    	mov.w     w0, w1
    29ea:	00 a9 20    	mov.w     #0xa90, w0
    29ec:	30 fa 07    	rcall     0x1e4e <_spi_open> <L0> <.LFB2> <.LFE1>

    InitUSB();                              // initialize the USB registers and serial interface engine
    29ee:	ab f5 07    	rcall     0x1546 <_InitUSB> <.L0> <.LFB0> <.Ltext0>
    while (USB_USWSTAT!=CONFIG_STATE) {     // while the peripheral is not configured...
    29f0:	01 00 37    	bra       0x29f4 <.L38> <.LBE2>

000029f2 <.L39>:
        ServiceUSB();                       // ...service USB requests
    29f2:	e8 f5 07    	rcall     0x15c4 <_ServiceUSB> <L0> <.LFB1> <.LFE0>

000029f4 <.L38>:
    29f4:	40 c8 bf    	mov.b     0x840, WREG
    29f6:	e3 4f 50    	sub.b     w0, #0x3, [w15]
    29f8:	fc ff 3a    	bra       NZ, 0x29f2 <.L39> <.LBB2>

000029fa <.L40>:
    }
    while (1) {
        ServiceUSB();                       // service any pending USB requests
    29fa:	e4 f5 07    	rcall     0x15c4 <_ServiceUSB> <L0> <.LFB1> <.LFE0>

000029fc <.LBE3>:
    }
    29fc:	fe ff 37    	bra       0x29fa <.L40> <.LBB3>

000029fe <_init_ui>:

_LED led1, led2, led3;
_SW sw1, sw2, sw3;

void init_ui(void) {
    29fe:	00 00 fa    	lnk       #0x0
    led_init(&led1, (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2a00:	74 c0 b3    	mov.b     #0x7, w4
    2a02:	63 4e 20    	mov.w     #0x4e6, w3
    2a04:	82 2d 20    	mov.w     #0x2d8, w2
    2a06:	a1 2d 20    	mov.w     #0x2da, w1
    2a08:	00 80 20    	mov.w     #0x800, w0
    2a0a:	20 00 07    	rcall     0x2a4c <_led_init> <L0> <.LFB1> <.LFE0>
             (uint16_t *)&ANSD, 7);
    led_init(&led2, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2a0c:	00 42 eb    	clr.b     w4
    2a0e:	a3 4e 20    	mov.w     #0x4ea, w3
    2a10:	82 2e 20    	mov.w     #0x2e8, w2
    2a12:	a1 2e 20    	mov.w     #0x2ea, w1
    2a14:	80 80 20    	mov.w     #0x808, w0
    2a16:	1a 00 07    	rcall     0x2a4c <_led_init> <L0> <.LFB1> <.LFE0>
             (uint16_t *)&ANSF, 0);
    led_init(&led3, (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2a18:	14 c0 b3    	mov.b     #0x1, w4
    2a1a:	a3 4e 20    	mov.w     #0x4ea, w3
    2a1c:	82 2e 20    	mov.w     #0x2e8, w2
    2a1e:	a1 2e 20    	mov.w     #0x2ea, w1
    2a20:	00 81 20    	mov.w     #0x810, w0
    2a22:	14 00 07    	rcall     0x2a4c <_led_init> <L0> <.LFB1> <.LFE0>
             (uint16_t *)&ANSF, 1);
    sw_init(&sw1, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    2a24:	f4 c0 b3    	mov.b     #0xf, w4
    2a26:	43 4e 20    	mov.w     #0x4e4, w3
    2a28:	02 2d 20    	mov.w     #0x2d0, w2
    2a2a:	21 2d 20    	mov.w     #0x2d2, w1
    2a2c:	80 81 20    	mov.w     #0x818, w0
    2a2e:	ad 00 07    	rcall     0x2b8a <_sw_init> <L0> <.LFB7> <.LFE6>
            (uint16_t *)&ANSC, 15);
    sw_init(&sw2, (uint16_t *)&PORTC, (uint16_t *)&TRISC, 
    2a30:	c4 c0 b3    	mov.b     #0xc, w4
    2a32:	43 4e 20    	mov.w     #0x4e4, w3
    2a34:	02 2d 20    	mov.w     #0x2d0, w2
    2a36:	21 2d 20    	mov.w     #0x2d2, w1
    2a38:	00 82 20    	mov.w     #0x820, w0
    2a3a:	a7 00 07    	rcall     0x2b8a <_sw_init> <L0> <.LFB7> <.LFE6>
            (uint16_t *)&ANSC, 12);
    sw_init(&sw3, (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2a3c:	c4 c0 b3    	mov.b     #0xc, w4
    2a3e:	23 4e 20    	mov.w     #0x4e2, w3
    2a40:	82 2c 20    	mov.w     #0x2c8, w2
    2a42:	a1 2c 20    	mov.w     #0x2ca, w1
    2a44:	80 82 20    	mov.w     #0x828, w0
    2a46:	a1 00 07    	rcall     0x2b8a <_sw_init> <L0> <.LFB7> <.LFE6>
            (uint16_t *)&ANSB, 12);
}
    2a48:	00 80 fa    	ulnk      
    2a4a:	00 00 06    	return    

00002a4c <_led_init>:

void led_init(_LED *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit) {
    2a4c:	0a 00 fa    	lnk       #0xa
    2a4e:	00 0f 78    	mov.w     w0, [w14]
    2a50:	11 07 98    	mov.w     w1, [w14+2]
    2a52:	22 07 98    	mov.w     w2, [w14+4]
    2a54:	33 07 98    	mov.w     w3, [w14+6]
    2a56:	04 4f 98    	mov.b     w4, [w14+8]
    self->port = port;
    2a58:	1e 00 78    	mov.w     [w14], w0
    2a5a:	9e 00 90    	mov.w     [w14+2], w1
    2a5c:	01 08 78    	mov.w     w1, [w0]
    self->tris = tris;
    2a5e:	1e 00 78    	mov.w     [w14], w0
    2a60:	ae 00 90    	mov.w     [w14+4], w1
    2a62:	11 00 98    	mov.w     w1, [w0+2]
    self->ans = ans;
    2a64:	1e 00 78    	mov.w     [w14], w0
    2a66:	be 00 90    	mov.w     [w14+6], w1
    2a68:	21 00 98    	mov.w     w1, [w0+4]
    self->bit = bit;
    2a6a:	1e 00 78    	mov.w     [w14], w0
    2a6c:	8e 48 90    	mov.b     [w14+8], w1
    2a6e:	61 40 98    	mov.b     w1, [w0+6]

    bitclear(self->ans, self->bit);
    2a70:	1e 00 78    	mov.w     [w14], w0
    2a72:	20 00 90    	mov.w     [w0+4], w0
    2a74:	9e 00 78    	mov.w     [w14], w1
    2a76:	a1 00 90    	mov.w     [w1+4], w1
    2a78:	11 01 78    	mov.w     [w1], w2
    2a7a:	9e 00 78    	mov.w     [w14], w1
    2a7c:	e1 40 90    	mov.b     [w1+6], w1
    2a7e:	81 80 fb    	ze        w1, w1
    2a80:	13 00 20    	mov.w     #0x1, w3
    2a82:	81 18 dd    	sl.w      w3, w1, w1
    2a84:	81 80 ea    	com.w     w1, w1
    2a86:	81 00 61    	and.w     w2, w1, w1
    2a88:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->port, self->bit);
    2a8a:	1e 00 78    	mov.w     [w14], w0
    2a8c:	10 00 78    	mov.w     [w0], w0
    2a8e:	9e 00 78    	mov.w     [w14], w1
    2a90:	91 00 78    	mov.w     [w1], w1
    2a92:	11 01 78    	mov.w     [w1], w2
    2a94:	9e 00 78    	mov.w     [w14], w1
    2a96:	e1 40 90    	mov.b     [w1+6], w1
    2a98:	81 80 fb    	ze        w1, w1
    2a9a:	13 00 20    	mov.w     #0x1, w3
    2a9c:	81 18 dd    	sl.w      w3, w1, w1
    2a9e:	81 80 ea    	com.w     w1, w1
    2aa0:	81 00 61    	and.w     w2, w1, w1
    2aa2:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->tris, self->bit);
    2aa4:	1e 00 78    	mov.w     [w14], w0
    2aa6:	10 00 90    	mov.w     [w0+2], w0
    2aa8:	9e 00 78    	mov.w     [w14], w1
    2aaa:	91 00 90    	mov.w     [w1+2], w1
    2aac:	11 01 78    	mov.w     [w1], w2
    2aae:	9e 00 78    	mov.w     [w14], w1
    2ab0:	e1 40 90    	mov.b     [w1+6], w1
    2ab2:	81 80 fb    	ze        w1, w1
    2ab4:	13 00 20    	mov.w     #0x1, w3
    2ab6:	81 18 dd    	sl.w      w3, w1, w1
    2ab8:	81 80 ea    	com.w     w1, w1
    2aba:	81 00 61    	and.w     w2, w1, w1
    2abc:	01 08 78    	mov.w     w1, [w0]
}
    2abe:	00 80 fa    	ulnk      
    2ac0:	00 00 06    	return    

00002ac2 <_led_on>:

void led_on(_LED *self) {
    2ac2:	02 00 fa    	lnk       #0x2
    2ac4:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->port, self->bit);
    2ac6:	1e 00 78    	mov.w     [w14], w0
    2ac8:	10 00 78    	mov.w     [w0], w0
    2aca:	9e 00 78    	mov.w     [w14], w1
    2acc:	91 00 78    	mov.w     [w1], w1
    2ace:	11 01 78    	mov.w     [w1], w2
    2ad0:	9e 00 78    	mov.w     [w14], w1
    2ad2:	e1 40 90    	mov.b     [w1+6], w1
    2ad4:	81 80 fb    	ze        w1, w1
    2ad6:	13 00 20    	mov.w     #0x1, w3
    2ad8:	81 18 dd    	sl.w      w3, w1, w1
    2ada:	82 80 70    	ior.w     w1, w2, w1
    2adc:	01 08 78    	mov.w     w1, [w0]
}
    2ade:	00 80 fa    	ulnk      
    2ae0:	00 00 06    	return    

00002ae2 <_led_off>:

void led_off(_LED *self) {
    2ae2:	02 00 fa    	lnk       #0x2
    2ae4:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->port, self->bit);
    2ae6:	1e 00 78    	mov.w     [w14], w0
    2ae8:	10 00 78    	mov.w     [w0], w0
    2aea:	9e 00 78    	mov.w     [w14], w1
    2aec:	91 00 78    	mov.w     [w1], w1
    2aee:	11 01 78    	mov.w     [w1], w2
    2af0:	9e 00 78    	mov.w     [w14], w1
    2af2:	e1 40 90    	mov.b     [w1+6], w1
    2af4:	81 80 fb    	ze        w1, w1
    2af6:	13 00 20    	mov.w     #0x1, w3
    2af8:	81 18 dd    	sl.w      w3, w1, w1
    2afa:	81 80 ea    	com.w     w1, w1
    2afc:	81 00 61    	and.w     w2, w1, w1
    2afe:	01 08 78    	mov.w     w1, [w0]
}
    2b00:	00 80 fa    	ulnk      
    2b02:	00 00 06    	return    

00002b04 <_led_toggle>:

void led_toggle(_LED *self) {
    2b04:	02 00 fa    	lnk       #0x2
    2b06:	00 0f 78    	mov.w     w0, [w14]
    bitflip(self->port, self->bit);
    2b08:	1e 00 78    	mov.w     [w14], w0
    2b0a:	10 00 78    	mov.w     [w0], w0
    2b0c:	9e 00 78    	mov.w     [w14], w1
    2b0e:	91 00 78    	mov.w     [w1], w1
    2b10:	11 01 78    	mov.w     [w1], w2
    2b12:	9e 00 78    	mov.w     [w14], w1
    2b14:	e1 40 90    	mov.b     [w1+6], w1
    2b16:	81 80 fb    	ze        w1, w1
    2b18:	13 00 20    	mov.w     #0x1, w3
    2b1a:	81 18 dd    	sl.w      w3, w1, w1
    2b1c:	81 00 69    	xor.w     w2, w1, w1
    2b1e:	01 08 78    	mov.w     w1, [w0]
}
    2b20:	00 80 fa    	ulnk      
    2b22:	00 00 06    	return    

00002b24 <_led_write>:

void led_write(_LED *self, uint16_t val) {
    2b24:	04 00 fa    	lnk       #0x4
    2b26:	00 0f 78    	mov.w     w0, [w14]
    2b28:	11 07 98    	mov.w     w1, [w14+2]
    if (val)
    2b2a:	1e 00 90    	mov.w     [w14+2], w0
    2b2c:	00 00 e0    	cp0.w     w0
    2b2e:	0d 00 32    	bra       Z, 0x2b4a <.L7>
        bitset(self->port, self->bit);
    2b30:	1e 00 78    	mov.w     [w14], w0
    2b32:	10 00 78    	mov.w     [w0], w0
    2b34:	9e 00 78    	mov.w     [w14], w1
    2b36:	91 00 78    	mov.w     [w1], w1
    2b38:	11 01 78    	mov.w     [w1], w2
    2b3a:	9e 00 78    	mov.w     [w14], w1
    2b3c:	e1 40 90    	mov.b     [w1+6], w1
    2b3e:	81 80 fb    	ze        w1, w1
    2b40:	13 00 20    	mov.w     #0x1, w3
    2b42:	81 18 dd    	sl.w      w3, w1, w1
    2b44:	82 80 70    	ior.w     w1, w2, w1
    2b46:	01 08 78    	mov.w     w1, [w0]
    2b48:	0d 00 37    	bra       0x2b64 <.L6>

00002b4a <.L7>:
    else
        bitclear(self->port, self->bit);
    2b4a:	1e 00 78    	mov.w     [w14], w0
    2b4c:	10 00 78    	mov.w     [w0], w0
    2b4e:	9e 00 78    	mov.w     [w14], w1
    2b50:	91 00 78    	mov.w     [w1], w1
    2b52:	11 01 78    	mov.w     [w1], w2
    2b54:	9e 00 78    	mov.w     [w14], w1
    2b56:	e1 40 90    	mov.b     [w1+6], w1
    2b58:	81 80 fb    	ze        w1, w1
    2b5a:	13 00 20    	mov.w     #0x1, w3
    2b5c:	81 18 dd    	sl.w      w3, w1, w1
    2b5e:	81 80 ea    	com.w     w1, w1
    2b60:	81 00 61    	and.w     w2, w1, w1
    2b62:	01 08 78    	mov.w     w1, [w0]

00002b64 <.L6>:
}
    2b64:	00 80 fa    	ulnk      
    2b66:	00 00 06    	return    

00002b68 <_led_read>:

uint16_t led_read(_LED *self) {
    2b68:	02 00 fa    	lnk       #0x2
    2b6a:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->port, self->bit);
    2b6c:	1e 00 78    	mov.w     [w14], w0
    2b6e:	10 00 78    	mov.w     [w0], w0
    2b70:	90 00 78    	mov.w     [w0], w1
    2b72:	1e 00 78    	mov.w     [w14], w0
    2b74:	60 40 90    	mov.b     [w0+6], w0
    2b76:	00 80 fb    	ze        w0, w0
    2b78:	12 00 20    	mov.w     #0x1, w2
    2b7a:	00 10 dd    	sl.w      w2, w0, w0
    2b7c:	00 80 60    	and.w     w1, w0, w0
    2b7e:	00 f0 a7    	btsc.w    w0, #0xf
    2b80:	00 00 ea    	neg.w     w0, w0
    2b82:	00 00 ea    	neg.w     w0, w0
    2b84:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    2b86:	00 80 fa    	ulnk      
    2b88:	00 00 06    	return    

00002b8a <_sw_init>:

void sw_init(_SW *self, uint16_t *port, uint16_t *tris, 
             uint16_t *ans, uint8_t bit) {
    2b8a:	0a 00 fa    	lnk       #0xa
    2b8c:	00 0f 78    	mov.w     w0, [w14]
    2b8e:	11 07 98    	mov.w     w1, [w14+2]
    2b90:	22 07 98    	mov.w     w2, [w14+4]
    2b92:	33 07 98    	mov.w     w3, [w14+6]
    2b94:	04 4f 98    	mov.b     w4, [w14+8]
    self->port = port;
    2b96:	1e 00 78    	mov.w     [w14], w0
    2b98:	9e 00 90    	mov.w     [w14+2], w1
    2b9a:	01 08 78    	mov.w     w1, [w0]
    self->tris = tris;
    2b9c:	1e 00 78    	mov.w     [w14], w0
    2b9e:	ae 00 90    	mov.w     [w14+4], w1
    2ba0:	11 00 98    	mov.w     w1, [w0+2]
    self->ans = ans;
    2ba2:	1e 00 78    	mov.w     [w14], w0
    2ba4:	be 00 90    	mov.w     [w14+6], w1
    2ba6:	21 00 98    	mov.w     w1, [w0+4]
    self->bit = bit;
    2ba8:	1e 00 78    	mov.w     [w14], w0
    2baa:	8e 48 90    	mov.b     [w14+8], w1
    2bac:	61 40 98    	mov.b     w1, [w0+6]

    bitclear(self->ans, self->bit);
    2bae:	1e 00 78    	mov.w     [w14], w0
    2bb0:	20 00 90    	mov.w     [w0+4], w0
    2bb2:	9e 00 78    	mov.w     [w14], w1
    2bb4:	a1 00 90    	mov.w     [w1+4], w1
    2bb6:	11 01 78    	mov.w     [w1], w2
    2bb8:	9e 00 78    	mov.w     [w14], w1
    2bba:	e1 40 90    	mov.b     [w1+6], w1
    2bbc:	81 80 fb    	ze        w1, w1
    2bbe:	13 00 20    	mov.w     #0x1, w3
    2bc0:	81 18 dd    	sl.w      w3, w1, w1
    2bc2:	81 80 ea    	com.w     w1, w1
    2bc4:	81 00 61    	and.w     w2, w1, w1
    2bc6:	01 08 78    	mov.w     w1, [w0]
    bitset(self->tris, self->bit);
    2bc8:	1e 00 78    	mov.w     [w14], w0
    2bca:	10 00 90    	mov.w     [w0+2], w0
    2bcc:	9e 00 78    	mov.w     [w14], w1
    2bce:	91 00 90    	mov.w     [w1+2], w1
    2bd0:	11 01 78    	mov.w     [w1], w2
    2bd2:	9e 00 78    	mov.w     [w14], w1
    2bd4:	e1 40 90    	mov.b     [w1+6], w1
    2bd6:	81 80 fb    	ze        w1, w1
    2bd8:	13 00 20    	mov.w     #0x1, w3
    2bda:	81 18 dd    	sl.w      w3, w1, w1
    2bdc:	82 80 70    	ior.w     w1, w2, w1
    2bde:	01 08 78    	mov.w     w1, [w0]
}
    2be0:	00 80 fa    	ulnk      
    2be2:	00 00 06    	return    

00002be4 <_sw_read>:

uint16_t sw_read(_SW *self) {
    2be4:	02 00 fa    	lnk       #0x2
    2be6:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->port, self->bit);
    2be8:	1e 00 78    	mov.w     [w14], w0
    2bea:	10 00 78    	mov.w     [w0], w0
    2bec:	90 00 78    	mov.w     [w0], w1
    2bee:	1e 00 78    	mov.w     [w14], w0
    2bf0:	60 40 90    	mov.b     [w0+6], w0
    2bf2:	00 80 fb    	ze        w0, w0
    2bf4:	12 00 20    	mov.w     #0x1, w2
    2bf6:	00 10 dd    	sl.w      w2, w0, w0
    2bf8:	00 80 60    	and.w     w1, w0, w0
    2bfa:	00 f0 a7    	btsc.w    w0, #0xf
    2bfc:	00 00 ea    	neg.w     w0, w0
    2bfe:	00 00 ea    	neg.w     w0, w0
    2c00:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    2c02:	00 80 fa    	ulnk      
    2c04:	00 00 06    	return    
Disassembly of section .dinit:

00002c06 <.dinit>:
    2c06:	42 08 00    	nop       
    2c08:	0a 00 00    	nop       
    2c0a:	80 00 00    	nop       
    2c0c:	04 0a 00    	nop       
    2c0e:	8c 00 00    	nop       
    2c10:	80 00 00    	nop       
    2c12:	00 0c 00    	nop       
    2c14:	80 00 00    	nop       
    2c16:	80 00 00    	nop       
    2c18:	30 08 00    	nop       
    2c1a:	12 00 00    	nop       
    2c1c:	80 00 00    	nop       
    2c1e:	00 08 00    	nop       
    2c20:	30 00 00    	nop       
    2c22:	80 00 00    	nop       
    2c24:	4c 08 00    	nop       
    2c26:	b8 01 00    	nop       
    2c28:	80 00 00    	nop       
    2c2a:	90 0a 00    	nop       
    2c2c:	42 00 00    	nop       
    2c2e:	80 00 00    	nop       
    2c30:	00 00 00    	nop       
Disassembly of section .isr:

00002c32 <__DefaultInterrupt>:
    2c32:	00 40 da    	break     
    2c34:	00 00 fe    	reset     
