
Elecanisms_Final.elf:     file format elf32-pic30

Disassembly of section .aivt._AltADC1Interrupt:

0000012e <.aivt._AltADC1Interrupt>:
 12e:	12 2c 00    	nop       
Disassembly of section .aivt._AltAddressError:

00000108 <.aivt._AltAddressError>:
 108:	12 2c 00    	nop       
Disassembly of section .aivt._AltCNInterrupt:

0000013a <.aivt._AltCNInterrupt>:
 13a:	12 2c 00    	nop       
Disassembly of section .aivt._AltCRCInterrupt:

0000019a <.aivt._AltCRCInterrupt>:
 19a:	12 2c 00    	nop       
Disassembly of section .aivt._AltCTMUInterrupt:

000001ae <.aivt._AltCTMUInterrupt>:
 1ae:	12 2c 00    	nop       
Disassembly of section .aivt._AltCompInterrupt:

00000138 <.aivt._AltCompInterrupt>:
 138:	12 2c 00    	nop       
Disassembly of section .aivt._AltIC1Interrupt:

00000116 <.aivt._AltIC1Interrupt>:
 116:	12 2c 00    	nop       
Disassembly of section .aivt._AltIC2Interrupt:

0000011e <__CONFIG1-0x156e0>:
 11e:	12 2c 00    	nop       
Disassembly of section .aivt._AltIC3Interrupt:

0000015e <__CONFIG2-0x1569e>:
 15e:	12 2c 00    	nop       
Disassembly of section .aivt._AltIC4Interrupt:

00000160 <__CONFIG3-0x1569a>:
 160:	12 2c 00    	nop       
Disassembly of section .aivt._AltIC5Interrupt:

00000162 <.aivt._AltIC5Interrupt>:
 162:	12 2c 00    	nop       
Disassembly of section .aivt._AltIC6Interrupt:

00000164 <.aivt._AltIC6Interrupt>:
 164:	12 2c 00    	nop       
Disassembly of section .aivt._AltIC7Interrupt:

00000140 <.aivt._AltIC7Interrupt>:
 140:	12 2c 00    	nop       
Disassembly of section .aivt._AltIC8Interrupt:

00000142 <.aivt._AltIC8Interrupt>:
 142:	12 2c 00    	nop       
Disassembly of section .aivt._AltIC9Interrupt:

000001ce <.aivt._AltIC9Interrupt>:
 1ce:	12 2c 00    	nop       
Disassembly of section .aivt._AltINT0Interrupt:

00000114 <.aivt._AltINT0Interrupt>:
 114:	12 2c 00    	nop       
Disassembly of section .aivt._AltINT1Interrupt:

0000013c <.aivt._AltINT1Interrupt>:
 13c:	12 2c 00    	nop       
Disassembly of section .aivt._AltINT2Interrupt:

0000014e <.aivt._AltINT2Interrupt>:
 14e:	12 2c 00    	nop       
Disassembly of section .aivt._AltINT3Interrupt:

0000017e <.aivt._AltINT3Interrupt>:
 17e:	12 2c 00    	nop       
Disassembly of section .aivt._AltINT4Interrupt:

00000180 <.aivt._AltINT4Interrupt>:
 180:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt14:

00000130 <.aivt._AltInterrupt14>:
 130:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt15:

00000132 <.aivt._AltInterrupt15>:
 132:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt21:

0000013e <.aivt._AltInterrupt21>:
 13e:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt24:

00000144 <.aivt._AltInterrupt24>:
 144:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt34:

00000158 <.aivt._AltInterrupt34>:
 158:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt35:

0000015a <.aivt._AltInterrupt35>:
 15a:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt36:

0000015c <.aivt._AltInterrupt36>:
 15c:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt4:

0000011c <.aivt._AltInterrupt4>:
 11c:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt46:

00000170 <.aivt._AltInterrupt46>:
 170:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt47:

00000172 <.aivt._AltInterrupt47>:
 172:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt48:

00000174 <.aivt._AltInterrupt48>:
 174:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt51:

0000017a <.aivt._AltInterrupt51>:
 17a:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt52:

0000017c <.aivt._AltInterrupt52>:
 17c:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt55:

00000182 <.aivt._AltInterrupt55>:
 182:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt56:

00000184 <.aivt._AltInterrupt56>:
 184:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt57:

00000186 <.aivt._AltInterrupt57>:
 186:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt58:

00000188 <.aivt._AltInterrupt58>:
 188:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt59:

0000018a <.aivt._AltInterrupt59>:
 18a:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt60:

0000018c <.aivt._AltInterrupt60>:
 18c:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt61:

0000018e <.aivt._AltInterrupt61>:
 18e:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt63:

00000192 <.aivt._AltInterrupt63>:
 192:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt64:

00000194 <.aivt._AltInterrupt64>:
 194:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt68:

0000019c <.aivt._AltInterrupt68>:
 19c:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt69:

0000019e <.aivt._AltInterrupt69>:
 19e:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt70:

000001a0 <.aivt._AltInterrupt70>:
 1a0:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt71:

000001a2 <.aivt._AltInterrupt71>:
 1a2:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt73:

000001a6 <.aivt._AltInterrupt73>:
 1a6:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt74:

000001a8 <.aivt._AltInterrupt74>:
 1a8:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt75:

000001aa <.aivt._AltInterrupt75>:
 1aa:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt76:

000001ac <.aivt._AltInterrupt76>:
 1ac:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt78:

000001b0 <.aivt._AltInterrupt78>:
 1b0:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt79:

000001b2 <.aivt._AltInterrupt79>:
 1b2:	12 2c 00    	nop       
Disassembly of section .aivt._AltInterrupt80:

000001b4 <.aivt._AltInterrupt80>:
 1b4:	12 2c 00    	nop       
Disassembly of section .aivt._AltLVDInterrupt:

000001a4 <.aivt._AltLVDInterrupt>:
 1a4:	12 2c 00    	nop       
Disassembly of section .aivt._AltMI2C1Interrupt:

00000136 <.aivt._AltMI2C1Interrupt>:
 136:	12 2c 00    	nop       
Disassembly of section .aivt._AltMI2C2Interrupt:

00000178 <.aivt._AltMI2C2Interrupt>:
 178:	12 2c 00    	nop       
Disassembly of section .aivt._AltMI2C3Interrupt:

000001be <.aivt._AltMI2C3Interrupt>:
 1be:	12 2c 00    	nop       
Disassembly of section .aivt._AltMathError:

0000010c <.aivt._AltMathError>:
 10c:	12 2c 00    	nop       
Disassembly of section .aivt._AltOC1Interrupt:

00000118 <.aivt._AltOC1Interrupt>:
 118:	12 2c 00    	nop       
Disassembly of section .aivt._AltOC2Interrupt:

00000120 <.aivt._AltOC2Interrupt>:
 120:	12 2c 00    	nop       
Disassembly of section .aivt._AltOC3Interrupt:

00000146 <.aivt._AltOC3Interrupt>:
 146:	12 2c 00    	nop       
Disassembly of section .aivt._AltOC4Interrupt:

00000148 <.aivt._AltOC4Interrupt>:
 148:	12 2c 00    	nop       
Disassembly of section .aivt._AltOC5Interrupt:

00000166 <.aivt._AltOC5Interrupt>:
 166:	12 2c 00    	nop       
Disassembly of section .aivt._AltOC6Interrupt:

00000168 <.aivt._AltOC6Interrupt>:
 168:	12 2c 00    	nop       
Disassembly of section .aivt._AltOC7Interrupt:

0000016a <.aivt._AltOC7Interrupt>:
 16a:	12 2c 00    	nop       
Disassembly of section .aivt._AltOC8Interrupt:

0000016c <.aivt._AltOC8Interrupt>:
 16c:	12 2c 00    	nop       
Disassembly of section .aivt._AltOC9Interrupt:

000001cc <.aivt._AltOC9Interrupt>:
 1cc:	12 2c 00    	nop       
Disassembly of section .aivt._AltOscillatorFail:

00000106 <.aivt._AltOscillatorFail>:
 106:	12 2c 00    	nop       
Disassembly of section .aivt._AltPMPInterrupt:

0000016e <.aivt._AltPMPInterrupt>:
 16e:	12 2c 00    	nop       
Disassembly of section .aivt._AltRTCCInterrupt:

00000190 <.aivt._AltRTCCInterrupt>:
 190:	12 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap0:

00000104 <.aivt._AltReservedTrap0>:
 104:	12 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap5:

0000010e <.aivt._AltReservedTrap5>:
 10e:	12 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap6:

00000110 <.aivt._AltReservedTrap6>:
 110:	12 2c 00    	nop       
Disassembly of section .aivt._AltReservedTrap7:

00000112 <.aivt._AltReservedTrap7>:
 112:	12 2c 00    	nop       
Disassembly of section .aivt._AltSI2C1Interrupt:

00000134 <.aivt._AltSI2C1Interrupt>:
 134:	12 2c 00    	nop       
Disassembly of section .aivt._AltSI2C2Interrupt:

00000176 <.aivt._AltSI2C2Interrupt>:
 176:	12 2c 00    	nop       
Disassembly of section .aivt._AltSI2C3Interrupt:

000001bc <.aivt._AltSI2C3Interrupt>:
 1bc:	12 2c 00    	nop       
Disassembly of section .aivt._AltSPI1ErrInterrupt:

00000126 <.aivt._AltSPI1ErrInterrupt>:
 126:	12 2c 00    	nop       
Disassembly of section .aivt._AltSPI1Interrupt:

00000128 <.aivt._AltSPI1Interrupt>:
 128:	12 2c 00    	nop       
Disassembly of section .aivt._AltSPI2ErrInterrupt:

00000154 <.aivt._AltSPI2ErrInterrupt>:
 154:	12 2c 00    	nop       
Disassembly of section .aivt._AltSPI2Interrupt:

00000156 <.aivt._AltSPI2Interrupt>:
 156:	12 2c 00    	nop       
Disassembly of section .aivt._AltSPI3ErrInterrupt:

000001c8 <.aivt._AltSPI3ErrInterrupt>:
 1c8:	12 2c 00    	nop       
Disassembly of section .aivt._AltSPI3Interrupt:

000001ca <.aivt._AltSPI3Interrupt>:
 1ca:	12 2c 00    	nop       
Disassembly of section .aivt._AltStackError:

0000010a <.aivt._AltStackError>:
 10a:	12 2c 00    	nop       
Disassembly of section .aivt._AltT1Interrupt:

0000011a <.aivt._AltT1Interrupt>:
 11a:	12 2c 00    	nop       
Disassembly of section .aivt._AltT2Interrupt:

00000122 <.aivt._AltT2Interrupt>:
 122:	12 2c 00    	nop       
Disassembly of section .aivt._AltT3Interrupt:

00000124 <.aivt._AltT3Interrupt>:
 124:	12 2c 00    	nop       
Disassembly of section .aivt._AltT4Interrupt:

0000014a <.aivt._AltT4Interrupt>:
 14a:	12 2c 00    	nop       
Disassembly of section .aivt._AltT5Interrupt:

0000014c <.aivt._AltT5Interrupt>:
 14c:	12 2c 00    	nop       
Disassembly of section .aivt._AltU1ErrInterrupt:

00000196 <.aivt._AltU1ErrInterrupt>:
 196:	12 2c 00    	nop       
Disassembly of section .aivt._AltU1RXInterrupt:

0000012a <.aivt._AltU1RXInterrupt>:
 12a:	12 2c 00    	nop       
Disassembly of section .aivt._AltU1TXInterrupt:

0000012c <.aivt._AltU1TXInterrupt>:
 12c:	12 2c 00    	nop       
Disassembly of section .aivt._AltU2ErrInterrupt:

00000198 <.aivt._AltU2ErrInterrupt>:
 198:	12 2c 00    	nop       
Disassembly of section .aivt._AltU2RXInterrupt:

00000150 <.aivt._AltU2RXInterrupt>:
 150:	12 2c 00    	nop       
Disassembly of section .aivt._AltU2TXInterrupt:

00000152 <.aivt._AltU2TXInterrupt>:
 152:	12 2c 00    	nop       
Disassembly of section .aivt._AltU3ErrInterrupt:

000001b6 <.aivt._AltU3ErrInterrupt>:
 1b6:	12 2c 00    	nop       
Disassembly of section .aivt._AltU3RXInterrupt:

000001b8 <.aivt._AltU3RXInterrupt>:
 1b8:	12 2c 00    	nop       
Disassembly of section .aivt._AltU3TXInterrupt:

000001ba <.aivt._AltU3TXInterrupt>:
 1ba:	12 2c 00    	nop       
Disassembly of section .aivt._AltU4ErrInterrupt:

000001c2 <.aivt._AltU4ErrInterrupt>:
 1c2:	12 2c 00    	nop       
Disassembly of section .aivt._AltU4RXInterrupt:

000001c4 <.aivt._AltU4RXInterrupt>:
 1c4:	12 2c 00    	nop       
Disassembly of section .aivt._AltU4TXInterrupt:

000001c6 <.aivt._AltU4TXInterrupt>:
 1c6:	12 2c 00    	nop       
Disassembly of section .aivt._AltUSB1Interrupt:

000001c0 <.aivt._AltUSB1Interrupt>:
 1c0:	12 2c 00    	nop       
Disassembly of section .reset:

00000000 <.reset>:
   0:	10 11 04    	goto      0x1110 <__reset>
   2:	00 00 00 
Disassembly of section .text:

00001110 <__reset>:
    1110:	af b4 20    	mov.w     #0xb4a, w15
    1112:	0e ff 27    	mov.w     #0x7ff0, w14
    1114:	0e 01 88    	mov.w     w14, 0x20
    1116:	00 00 00    	nop       
    1118:	00 00 20    	mov.w     #0x0, w0
    111a:	00 00 e0    	cp0.w     w0
    111c:	02 00 32    	bra       Z, 0x1122 <CORCON_RESET>
    111e:	00 01 20    	mov.w     #0x10, w0
    1120:	20 02 88    	mov.w     w0, 0x44

00001122 <CORCON_RESET>:
    1122:	14 00 07    	rcall     0x114c <__psv_init>
    1124:	85 00 07    	rcall     0x1230 <__crt_start_mode> <__crt_start_mode_normal>
    1126:	00 00 e0    	cp0.w     w0
    1128:	03 00 3a    	bra       NZ, 0x1130 <L11>
    112a:	a0 bb 22    	mov.w     #0x2bba, w0
    112c:	01 00 20    	mov.w     #0x0, w1
    112e:	02 00 37    	bra       0x1134 <L21>

00001130 <L11>:
    1130:	00 00 20    	mov.w     #0x0, w0
    1132:	01 00 20    	mov.w     #0x0, w1

00001134 <L21>:
    1134:	81 0f 70    	ior.w     w0, w1, [w15]
    1136:	01 00 32    	bra       Z, 0x113a <L12>
    1138:	14 00 07    	rcall     0x1162 <__data_init> <__data_init_da>

0000113a <L12>:
    113a:	00 00 20    	mov.w     #0x0, w0
    113c:	00 00 e0    	cp0.w     w0
    113e:	02 00 32    	bra       Z, 0x1144 <L13>
    1140:	00 00 02    	call      0x0 <__DEFAULT_VECTOR-0x110c>
    1142:	00 00 00 

00001144 <L13>:
    1144:	74 2b 02    	call      0x2b74 <_main>
    1146:	00 00 00 
    1148:	00 40 da    	break     
    114a:	00 00 fe    	reset     

0000114c <__psv_init>:
    114c:	44 40 a9    	bclr.b    0x44, #0x2
    114e:	60 08 20    	mov.w     #0x86, w0
    1150:	00 00 e0    	cp0.w     w0
    1152:	03 00 32    	bra       Z, 0x115a <L14>
    1154:	00 20 20    	mov.w     #0x200, w0
    1156:	90 01 88    	mov.w     w0, 0x32
    1158:	44 40 a8    	bset.b    0x44, #0x2

0000115a <L14>:
    115a:	00 00 06    	return    

0000115c <__long_indirect_call>:
    115c:	8a 1f 78    	mov.w     w10, [w15++]
    115e:	8b 1f 78    	mov.w     w11, [w15++]
    1160:	00 00 06    	return    

00001162 <__data_init>:
    1162:	a1 02 88    	mov.w     w1, 0x54
    1164:	80 04 78    	mov.w     w0, w9
    1166:	00 00 eb    	clr.w     w0
    1168:	1f 00 37    	bra       0x11a8 <L41>

0000116a <L11>:
    116a:	e2 84 44    	add.w     w9, #0x2, w9
    116c:	54 a0 b4    	addc.w    0x54
    116e:	99 05 ba    	tblrdl.w  [w9], w11
    1170:	e2 84 44    	add.w     w9, #0x2, w9
    1172:	54 a0 b4    	addc.w    0x54
    1174:	99 06 ba    	tblrdl.w  [w9], w13
    1176:	e2 84 44    	add.w     w9, #0x2, w9
    1178:	54 a0 b4    	addc.w    0x54
    117a:	00 06 eb    	clr.w     w12
    117c:	47 6f de    	lsr.w     w13, #0x7, w14
    117e:	fd 07 b2    	and.w     #0x7f, w13
    1180:	ae 01 88    	mov.w     w14, 0x34
    1182:	63 6c e1    	cp.b      w13, #0x3
    1184:	03 00 3a    	bra       NZ, 0x118c <L21>
    1186:	ea ff 07    	rcall     0x115c <__long_indirect_call>
    1188:	00 00 eb    	clr.w     w0
    118a:	0e 00 37    	bra       0x11a8 <L41>

0000118c <L21>:
    118c:	60 6c e1    	cp.b      w13, #0x0
    118e:	08 00 3a    	bra       NZ, 0x11a0 <L22>

00001190 <L91>:
    1190:	00 4d eb    	clr.b     [w10]
    1192:	0a 05 e8    	inc.w     w10, w10
    1194:	02 00 39    	bra       NC, 0x119a <L81>
    1196:	34 20 ec    	inc.w     0x34
    1198:	0a f0 a0    	bset.w    w10, #0xf

0000119a <L81>:
    119a:	8b 05 e9    	dec.w     w11, w11
    119c:	f9 ff 3e    	bra       GTU, 0x1190 <L91>
    119e:	04 00 37    	bra       0x11a8 <L41>

000011a0 <L22>:
    11a0:	61 68 e1    	cp.w      w13, #0x1
    11a2:	01 00 32    	bra       Z, 0x11a6 <L31>
    11a4:	00 86 eb    	setm.w    w12

000011a6 <L31>:
    11a6:	0b 00 07    	rcall     0x11be <L13> <__memcpyd3extended>

000011a8 <L41>:
    11a8:	19 c7 ba    	tblrdh.b  [w9], w14
    11aa:	19 05 ba    	tblrdl.w  [w9], w10
    11ac:	0e 04 e0    	cp0.b     w14
    11ae:	03 00 3a    	bra       NZ, 0x11b6 <L12>
    11b0:	0a 00 e0    	cp0.w     w10
    11b2:	db ff 3a    	bra       NZ, 0x116a <L11>
    11b4:	00 00 06    	return    

000011b6 <L12>:
    11b6:	fe 07 b2    	and.w     #0x7f, w14
    11b8:	ae 02 88    	mov.w     w14, 0x54
    11ba:	8a 04 78    	mov.w     w10, w9
    11bc:	f5 ff 37    	bra       0x11a8 <L41>

000011be <L13>:
    11be:	0c d0 a3    	btst.c    w12, #0xd
    11c0:	e2 0f 4d    	addc.w    w10, #0x2, [w15]
    11c2:	1c 00 39    	bra       NC, 0x11fc <L23>
    11c4:	89 02 78    	mov.w     w9, w5
    11c6:	35 4d ba    	tblrdl.b  [w5++], [w10]
    11c8:	0a 05 e8    	inc.w     w10, w10
    11ca:	02 00 39    	bra       NC, 0x11d0 <L32>
    11cc:	34 20 ec    	inc.w     0x34
    11ce:	0a f0 a0    	bset.w    w10, #0xf

000011d0 <L32>:
    11d0:	8b 05 e9    	dec.w     w11, w11
    11d2:	0f 00 32    	bra       Z, 0x11f2 <L42>
    11d4:	25 4d ba    	tblrdl.b  [w5--], [w10]
    11d6:	0a 05 e8    	inc.w     w10, w10
    11d8:	02 00 39    	bra       NC, 0x11de <L33>
    11da:	34 20 ec    	inc.w     0x34
    11dc:	0a f0 a0    	bset.w    w10, #0xf

000011de <L33>:
    11de:	8b 05 e9    	dec.w     w11, w11
    11e0:	08 00 32    	bra       Z, 0x11f2 <L42>
    11e2:	0c 00 e0    	cp0.w     w12
    11e4:	06 00 32    	bra       Z, 0x11f2 <L42>
    11e6:	15 cd ba    	tblrdh.b  [w5], [w10]
    11e8:	0a 05 e8    	inc.w     w10, w10
    11ea:	02 00 39    	bra       NC, 0x11f0 <L34>
    11ec:	34 20 ec    	inc.w     0x34
    11ee:	0a f0 a0    	bset.w    w10, #0xf

000011f0 <L34>:
    11f0:	8b 05 e9    	dec.w     w11, w11

000011f2 <L42>:
    11f2:	89 84 e8    	inc2.w    w9, w9
    11f4:	54 a0 b4    	addc.w    0x54
    11f6:	0b 00 e0    	cp0.w     w11
    11f8:	e2 ff 3a    	bra       NZ, 0x11be <L13> <__memcpyd3extended>
    11fa:	00 00 06    	return    

000011fc <L23>:
    11fc:	99 02 ba    	tblrdl.w  [w9], w5
    11fe:	05 5d 78    	mov.b     w5, [w10++]
    1200:	8b 05 e9    	dec.w     w11, w11
    1202:	f7 ff 32    	bra       Z, 0x11f2 <L42>
    1204:	c8 2a de    	lsr.w     w5, #0x8, w5
    1206:	05 5d 78    	mov.b     w5, [w10++]
    1208:	8b 05 e9    	dec.w     w11, w11
    120a:	f3 ff 32    	bra       Z, 0x11f2 <L42>
    120c:	0c 00 e0    	cp0.w     w12
    120e:	f1 ff 32    	bra       Z, 0x11f2 <L42>
    1210:	19 dd ba    	tblrdh.b  [w9], [w10++]
    1212:	ee ff 37    	bra       0x11f0 <L34>

00001214 <.handle>:
    1214:	12 20 04    	goto      0x2012 <___digitalRead>
    1216:	00 00 00 
    1218:	ce 1f 04    	goto      0x1fce <___digitalWrite>
    121a:	00 00 00 
    121c:	34 20 04    	goto      0x2034 <___analogRead>
    121e:	00 00 00 
    1220:	be 24 04    	goto      0x24be <___pwmWrite>
    1222:	00 00 00 
    1224:	90 24 04    	goto      0x2490 <___pwmRead>
    1226:	00 00 00 
    1228:	28 25 04    	goto      0x2528 <___servoWrite>
    122a:	00 00 00 
    122c:	f6 24 04    	goto      0x24f6 <___servoRead>
    122e:	00 00 00 

00001230 <__crt_start_mode>:
    1230:	00 00 05    	retlw.w   #0x0, w0

00001232 <___subsf3>:
    1232:	03 f0 a2    	btg.w     w3, #0xf

00001234 <___addsf3>:
    1234:	88 9f be    	mov.d     w8, [w15++]
    1236:	8a 9f be    	mov.d     w10, [w15++]
    1238:	8c 1f 78    	mov.w     w12, [w15++]
    123a:	f7 00 07    	rcall     0x142a <__funpack2>
    123c:	fe 00 33    	bra       N, 0x143a <__fPropagateNaN>
    123e:	64 50 e1    	cp.w      w10, #0x4
    1240:	4f 00 32    	bra       Z, 0x12e0 <aisinfinite>

00001242 <checkspecialb>:
    1242:	64 20 e1    	cp.w      w4, #0x4
    1244:	52 00 32    	bra       Z, 0x12ea <return2>
    1246:	03 82 6c    	xor.w     w9, w3, w4
    1248:	07 00 3b    	bra       NN, 0x1258 <getsign>
    124a:	09 05 d0    	sl.w      w9, w10
    124c:	03 06 d0    	sl.w      w3, w12
    124e:	82 0f 54    	sub.w     w8, w2, [w15]
    1250:	0c 06 5d    	subb.w    w10, w12, w12
    1252:	02 00 39    	bra       NC, 0x1258 <getsign>
    1254:	02 00 32    	bra       Z, 0x125a <gotsign>
    1256:	89 01 78    	mov.w     w9, w3

00001258 <getsign>:
    1258:	03 06 78    	mov.w     w3, w12

0000125a <gotsign>:
    125a:	85 82 55    	sub.w     w11, w5, w5
    125c:	04 00 3d    	bra       GE, 0x1266 <expcanonical>
    125e:	00 03 fd    	exch      w0, w6
    1260:	81 03 fd    	exch      w1, w7
    1262:	85 02 ea    	neg.w     w5, w5
    1264:	8b 85 42    	add.w     w5, w11, w11

00001266 <expcanonical>:
    1266:	84 0f 72    	ior.w     w4, w4, [w15]
    1268:	02 00 3b    	bra       NN, 0x126e <nonegate>
    126a:	60 00 10    	subr.w    w0, #0x0, w0
    126c:	e0 80 18    	subbr.w   w1, #0x0, w1

0000126e <nonegate>:
    126e:	60 11 b8    	mul.uu    w2, #0x0, w2
    1270:	00 05 eb    	clr.w     w10
    1272:	7a 28 e1    	cp.w      w5, #0x1a
    1274:	0a 00 39    	bra       NC, 0x128a <aligniter>
    1276:	06 00 78    	mov.w     w6, w0
    1278:	c7 5d dd    	sl.w      w11, #0x7, w11
    127a:	f7 07 b2    	and.w     #0x7f, w7
    127c:	87 80 75    	ior.w     w11, w7, w1
    127e:	2d 00 37    	bra       0x12da <signoff>

00001280 <align>:
    1280:	82 81 71    	ior.w     w3, w2, w3
    1282:	0a 01 78    	mov.w     w10, w2
    1284:	61 05 60    	and.w     w0, #0x1, w10
    1286:	81 80 d1    	asr.w     w1, w1
    1288:	00 80 d3    	rrc.w     w0, w0

0000128a <aligniter>:
    128a:	85 02 e9    	dec.w     w5, w5
    128c:	f9 ff 3b    	bra       NN, 0x1280 <align>

0000128e <aligned>:
    128e:	06 04 40    	add.w     w0, w6, w8
    1290:	87 84 48    	addc.w    w1, w7, w9
    1292:	02 00 3b    	bra       NN, 0x1298 <normalizesum>
    1294:	60 04 14    	subr.w    w8, #0x0, w8
    1296:	e0 84 1c    	subbr.w   w9, #0x0, w9

00001298 <normalizesum>:
    1298:	09 88 a3    	btst.z    w9, #0x8
    129a:	07 00 32    	bra       Z, 0x12aa <checknormal>
    129c:	8a 81 71    	ior.w     w3, w10, w3
    129e:	82 81 71    	ior.w     w3, w2, w3
    12a0:	61 01 64    	and.w     w8, #0x1, w2
    12a2:	89 04 d1    	lsr.w     w9, w9
    12a4:	08 84 d3    	rrc.w     w8, w8
    12a6:	8b 05 e8    	inc.w     w11, w11
    12a8:	17 00 37    	bra       0x12d8 <round>

000012aa <checknormal>:
    12aa:	09 78 a3    	btst.z    w9, #0x7
    12ac:	13 00 3a    	bra       NZ, 0x12d4 <discardguard>

000012ae <underflow>:
    12ae:	0b 00 e0    	cp0.w     w11
    12b0:	13 00 34    	bra       LE, 0x12d8 <round>
    12b2:	8b 05 e9    	dec.w     w11, w11
    12b4:	08 04 44    	add.w     w8, w8, w8
    12b6:	89 84 4c    	addc.w    w9, w9, w9
    12b8:	0a 44 74    	ior.b     w8, w10, w8
    12ba:	09 78 a3    	btst.z    w9, #0x7
    12bc:	0d 00 3a    	bra       NZ, 0x12d8 <round>

000012be <normalizeloop>:
    12be:	0b 00 e0    	cp0.w     w11
    12c0:	07 00 34    	bra       LE, 0x12d0 <normalizeexit>
    12c2:	8b 05 e9    	dec.w     w11, w11
    12c4:	08 04 44    	add.w     w8, w8, w8
    12c6:	89 84 4c    	addc.w    w9, w9, w9
    12c8:	01 00 3a    	bra       NZ, 0x12cc <normalizetest>
    12ca:	0b 00 20    	mov.w     #0x0, w11

000012cc <normalizetest>:
    12cc:	09 78 a3    	btst.z    w9, #0x7
    12ce:	f7 ff 32    	bra       Z, 0x12be <normalizeloop>

000012d0 <normalizeexit>:
    12d0:	00 01 eb    	clr.w     w2
    12d2:	02 00 37    	bra       0x12d8 <round>

000012d4 <discardguard>:
    12d4:	82 81 71    	ior.w     w3, w2, w3
    12d6:	0a 01 78    	mov.w     w10, w2

000012d8 <round>:
    12d8:	6d 00 07    	rcall     0x13b4 <__fpack>

000012da <signoff>:
    12da:	0c f0 a7    	btsc.w    w12, #0xf
    12dc:	01 f0 a0    	bset.w    w1, #0xf
    12de:	b6 00 37    	bra       0x144c <__fbopExit>

000012e0 <aisinfinite>:
    12e0:	64 20 e1    	cp.w      w4, #0x4
    12e2:	02 00 3a    	bra       NZ, 0x12e8 <return8>
    12e4:	83 8f 6c    	xor.w     w9, w3, [w15]
    12e6:	b6 00 33    	bra       N, 0x1454 <__fbopReturnNaN>

000012e8 <return8>:
    12e8:	08 01 be    	mov.d     w8, w2

000012ea <return2>:
    12ea:	02 00 be    	mov.d     w2, w0
    12ec:	af 00 37    	bra       0x144c <__fbopExit>

000012ee <___divsf3>:
    12ee:	88 9f be    	mov.d     w8, [w15++]
    12f0:	8a 9f be    	mov.d     w10, [w15++]
    12f2:	8c 1f 78    	mov.w     w12, [w15++]
    12f4:	9a 00 07    	rcall     0x142a <__funpack2>
    12f6:	a1 00 33    	bra       N, 0x143a <__fPropagateNaN>
    12f8:	03 86 6c    	xor.w     w9, w3, w12
    12fa:	64 50 e1    	cp.w      w10, #0x4
    12fc:	2e 00 32    	bra       Z, 0x135a <aisinfinite>
    12fe:	64 20 e1    	cp.w      w4, #0x4
    1300:	33 00 32    	bra       Z, 0x1368 <returnZero>
    1302:	61 50 e1    	cp.w      w10, #0x1
    1304:	2f 00 32    	bra       Z, 0x1364 <aiszero>
    1306:	61 20 e1    	cp.w      w4, #0x1
    1308:	31 00 32    	bra       Z, 0x136c <returnInf>

0000130a <finitenonzero>:
    130a:	85 85 55    	sub.w     w11, w5, w11
    130c:	eb 07 b0    	add.w     #0x7e, w11
    130e:	09 00 20    	mov.w     #0x0, w9
    1310:	08 04 20    	mov.w     #0x40, w8
    1312:	05 00 37    	bra       0x131e <diventry>

00001314 <divnext>:
    1314:	08 04 44    	add.w     w8, w8, w8
    1316:	89 84 4c    	addc.w    w9, w9, w9
    1318:	0a 00 31    	bra       C, 0x132e <divdone> <formsticky>

0000131a <divloop>:
    131a:	06 03 43    	add.w     w6, w6, w6
    131c:	87 83 4b    	addc.w    w7, w7, w7

0000131e <diventry>:
    131e:	00 01 53    	sub.w     w6, w0, w2
    1320:	81 81 5b    	subb.w    w7, w1, w3
    1322:	f8 ff 33    	bra       N, 0x1314 <divnext>
    1324:	02 03 be    	mov.d     w2, w6
    1326:	08 00 a0    	bset.w    w8, #0x0
    1328:	08 04 44    	add.w     w8, w8, w8
    132a:	89 84 4c    	addc.w    w9, w9, w9
    132c:	f6 ff 39    	bra       NC, 0x131a <divloop>

0000132e <divdone>:
    132e:	c6 39 dd    	sl.w      w7, #0x6, w3
    1330:	83 01 73    	ior.w     w6, w3, w3
    1332:	01 00 32    	bra       Z, 0x1336 <stickyok>
    1334:	13 00 20    	mov.w     #0x1, w3

00001336 <stickyok>:
    1336:	89 04 d1    	lsr.w     w9, w9
    1338:	08 84 d3    	rrc.w     w8, w8
    133a:	09 98 a3    	btst.z    w9, #0x9
    133c:	05 00 32    	bra       Z, 0x1348 <guardused>
    133e:	08 00 a7    	btsc.w    w8, #0x0
    1340:	03 00 a0    	bset.w    w3, #0x0
    1342:	89 04 d1    	lsr.w     w9, w9
    1344:	08 84 d3    	rrc.w     w8, w8
    1346:	8b 05 e8    	inc.w     w11, w11

00001348 <guardused>:
    1348:	89 04 d1    	lsr.w     w9, w9
    134a:	08 84 d3    	rrc.w     w8, w8
    134c:	00 01 eb    	clr.w     w2
    134e:	02 81 d2    	rlc.w     w2, w2
    1350:	31 00 07    	rcall     0x13b4 <__fpack>

00001352 <return0>:
    1352:	01 f0 a1    	bclr.w    w1, #0xf
    1354:	0c f0 a7    	btsc.w    w12, #0xf
    1356:	01 f0 a0    	bset.w    w1, #0xf
    1358:	79 00 37    	bra       0x144c <__fbopExit>

0000135a <aisinfinite>:
    135a:	64 20 e1    	cp.w      w4, #0x4
    135c:	7b 00 32    	bra       Z, 0x1454 <__fbopReturnNaN>

0000135e <return8>:
    135e:	08 01 be    	mov.d     w8, w2

00001360 <return2>:
    1360:	02 00 be    	mov.d     w2, w0
    1362:	f7 ff 37    	bra       0x1352 <return0>

00001364 <aiszero>:
    1364:	61 20 e1    	cp.w      w4, #0x1
    1366:	76 00 32    	bra       Z, 0x1454 <__fbopReturnNaN>

00001368 <returnZero>:
    1368:	60 00 b8    	mul.uu    w0, #0x0, w0
    136a:	f3 ff 37    	bra       0x1352 <return0>

0000136c <returnInf>:
    136c:	00 00 20    	mov.w     #0x0, w0
    136e:	01 f8 27    	mov.w     #0x7f80, w1
    1370:	f0 ff 37    	bra       0x1352 <return0>

00001372 <___eqsf2>:
    1372:	14 00 20    	mov.w     #0x1, w4
    1374:	b6 00 37    	bra       0x14e2 <__fcompare>

00001376 <___gesf2>:
    1376:	f4 ff 2f    	mov.w     #0xffff, w4
    1378:	b4 00 37    	bra       0x14e2 <__fcompare>

0000137a <___fixunssfsi>:
    137a:	00 01 be    	mov.d     w0, w2
    137c:	41 00 07    	rcall     0x1400 <__funpack>
    137e:	04 70 a7    	btsc.w    w4, #0x7
    1380:	03 f0 a1    	bclr.w    w3, #0xf
    1382:	03 f8 a3    	btst.z    w3, #0xf
    1384:	13 00 3a    	bra       NZ, 0x13ac <returnzero>
    1386:	65 09 b1    	sub.w     #0x96, w5
    1388:	10 00 32    	bra       Z, 0x13aa <exit>
    138a:	09 00 35    	bra       LT, 0x139e <shiftright>
    138c:	69 28 e1    	cp.w      w5, #0x9
    138e:	02 00 35    	bra       LT, 0x1394 <shiftleft>
    1390:	01 00 28    	mov.w     #0x8000, w1
    1392:	00 00 05    	retlw.w   #0x0, w0

00001394 <shiftleft>:
    1394:	00 00 40    	add.w     w0, w0, w0
    1396:	81 80 48    	addc.w    w1, w1, w1
    1398:	85 02 e9    	dec.w     w5, w5
    139a:	fc ff 3a    	bra       NZ, 0x1394 <shiftleft>
    139c:	00 00 06    	return    

0000139e <shiftright>:
    139e:	f8 8f 42    	add.w     w5, #0x18, [w15]
    13a0:	05 00 35    	bra       LT, 0x13ac <returnzero>

000013a2 <shiftrightloop>:
    13a2:	81 00 d1    	lsr.w     w1, w1
    13a4:	00 80 d3    	rrc.w     w0, w0
    13a6:	85 02 e8    	inc.w     w5, w5
    13a8:	fc ff 3a    	bra       NZ, 0x13a2 <shiftrightloop>

000013aa <exit>:
    13aa:	00 00 06    	return    

000013ac <returnzero>:
    13ac:	80 00 eb    	clr.w     w1
    13ae:	00 00 05    	retlw.w   #0x0, w0

000013b0 <___floatunsisf>:
    13b0:	60 11 b8    	mul.uu    w2, #0x0, w2
    13b2:	b2 00 37    	bra       0x1518 <___floatundisf>

000013b4 <__fpack>:
    13b4:	81 00 20    	mov.w     #0x8, w1
    13b6:	61 80 55    	sub.w     w11, #0x1, w0
    13b8:	0b 00 3d    	bra       GE, 0x13d0 <notsubnormal>
    13ba:	0b 00 20    	mov.w     #0x0, w11
    13bc:	61 fe 2f    	mov.w     #0xffe6, w1
    13be:	01 00 e1    	cp.w      w0, w1
    13c0:	1d 00 34    	bra       LE, 0x13fc <zerosig>

000013c2 <subnormal>:
    13c2:	82 81 71    	ior.w     w3, w2, w3
    13c4:	61 01 64    	and.w     w8, #0x1, w2
    13c6:	89 04 d1    	lsr.w     w9, w9
    13c8:	08 84 d3    	rrc.w     w8, w8
    13ca:	00 00 e8    	inc.w     w0, w0
    13cc:	fa ff 3a    	bra       NZ, 0x13c2 <subnormal>
    13ce:	71 00 20    	mov.w     #0x7, w1

000013d0 <notsubnormal>:
    13d0:	61 00 64    	and.w     w8, #0x1, w0
    13d2:	03 00 70    	ior.w     w0, w3, w0
    13d4:	02 00 60    	and.w     w0, w2, w0
    13d6:	09 00 32    	bra       Z, 0x13ea <packupandgo>
    13d8:	61 04 44    	add.w     w8, #0x1, w8
    13da:	e0 84 4c    	addc.w    w9, #0x0, w9
    13dc:	09 88 a5    	btst.z    w9, w1
    13de:	05 00 32    	bra       Z, 0x13ea <packupandgo>
    13e0:	8b 05 e8    	inc.w     w11, w11
    13e2:	68 08 e1    	cp.w      w1, #0x8
    13e4:	02 00 3a    	bra       NZ, 0x13ea <packupandgo>
    13e6:	89 04 d1    	lsr.w     w9, w9
    13e8:	08 84 d3    	rrc.w     w8, w8

000013ea <packupandgo>:
    13ea:	f2 0f 20    	mov.w     #0xff, w2
    13ec:	02 58 e1    	cp.w      w11, w2
    13ee:	05 00 3d    	bra       GE, 0x13fa <overflow>
    13f0:	c7 5d dd    	sl.w      w11, #0x7, w11
    13f2:	f9 07 b2    	and.w     #0x7f, w9
    13f4:	89 80 75    	ior.w     w11, w9, w1
    13f6:	08 00 78    	mov.w     w8, w0
    13f8:	00 00 06    	return    

000013fa <overflow>:
    13fa:	0b f8 27    	mov.w     #0x7f80, w11

000013fc <zerosig>:
    13fc:	8b 00 78    	mov.w     w11, w1
    13fe:	00 00 05    	retlw.w   #0x0, w0

00001400 <__funpack>:
    1400:	c7 0a de    	lsr.w     w1, #0x7, w5
    1402:	f1 07 b2    	and.w     #0x7f, w1
    1404:	f5 0f b2    	and.w     #0xff, w5
    1406:	08 00 32    	bra       Z, 0x1418 <zeroorsub>
    1408:	e1 cf 42    	add.b     w5, #0x1, [w15]
    140a:	02 00 32    	bra       Z, 0x1410 <nanorinf>

0000140c <finitereturn>:
    140c:	01 70 a0    	bset.w    w1, #0x7
    140e:	24 00 05    	retlw.w   #0x2, w4

00001410 <nanorinf>:
    1410:	81 0f 70    	ior.w     w0, w1, [w15]
    1412:	01 00 32    	bra       Z, 0x1416 <infinite>
    1414:	04 08 05    	retlw.w   #0x80, w4

00001416 <infinite>:
    1416:	44 00 05    	retlw.w   #0x4, w4

00001418 <zeroorsub>:
    1418:	81 0f 70    	ior.w     w0, w1, [w15]
    141a:	02 00 3a    	bra       NZ, 0x1420 <subnormal>
    141c:	14 00 05    	retlw.w   #0x1, w4

0000141e <normalize>:
    141e:	85 02 e9    	dec.w     w5, w5

00001420 <subnormal>:
    1420:	00 00 40    	add.w     w0, w0, w0
    1422:	81 c0 48    	addc.b    w1, w1, w1
    1424:	fc ff 3b    	bra       NN, 0x141e <normalize>
    1426:	01 70 a0    	bset.w    w1, #0x7
    1428:	24 00 05    	retlw.w   #0x2, w4

0000142a <__funpack2>:
    142a:	00 04 be    	mov.d     w0, w8
    142c:	e9 ff 07    	rcall     0x1400 <__funpack>
    142e:	00 03 be    	mov.d     w0, w6
    1430:	04 05 be    	mov.d     w4, w10
    1432:	02 00 be    	mov.d     w2, w0
    1434:	e5 ff 07    	rcall     0x1400 <__funpack>
    1436:	84 4f 75    	ior.b     w10, w4, [w15]
    1438:	00 00 06    	return    

0000143a <__fPropagateNaN>:
    143a:	02 00 be    	mov.d     w2, w0
    143c:	64 50 e1    	cp.w      w10, #0x4
    143e:	05 00 36    	bra       LEU, 0x144a <return0>
    1440:	64 20 e1    	cp.w      w4, #0x4
    1442:	02 00 36    	bra       LEU, 0x1448 <return8>
    1444:	09 68 a3    	btst.z    w9, #0x6
    1446:	01 00 3a    	bra       NZ, 0x144a <return0>

00001448 <return8>:
    1448:	08 00 be    	mov.d     w8, w0

0000144a <return0>:
    144a:	01 60 a0    	bset.w    w1, #0x6

0000144c <__fbopExit>:
    144c:	4f 06 78    	mov.w     [--w15], w12
    144e:	4f 05 be    	mov.d     [--w15], w10
    1450:	4f 04 be    	mov.d     [--w15], w8
    1452:	00 00 06    	return    

00001454 <__fbopReturnNaN>:
    1454:	f0 ff 2f    	mov.w     #0xffff, w0
    1456:	f1 ff 27    	mov.w     #0x7fff, w1
    1458:	f9 ff 37    	bra       0x144c <__fbopExit>

0000145a <___mulsf3>:
    145a:	88 9f be    	mov.d     w8, [w15++]
    145c:	8a 9f be    	mov.d     w10, [w15++]
    145e:	8c 1f 78    	mov.w     w12, [w15++]
    1460:	e4 ff 07    	rcall     0x142a <__funpack2>
    1462:	eb ff 33    	bra       N, 0x143a <__fPropagateNaN>
    1464:	03 86 6c    	xor.w     w9, w3, w12
    1466:	64 50 e1    	cp.w      w10, #0x4
    1468:	24 00 32    	bra       Z, 0x14b2 <aisinfinite>
    146a:	64 20 e1    	cp.w      w4, #0x4
    146c:	27 00 32    	bra       Z, 0x14bc <bisinfinite>
    146e:	61 50 e1    	cp.w      w10, #0x1
    1470:	22 00 32    	bra       Z, 0x14b6 <return8>
    1472:	61 20 e1    	cp.w      w4, #0x1
    1474:	21 00 32    	bra       Z, 0x14b8 <return2>
    1476:	8b 85 42    	add.w     w5, w11, w11
    1478:	eb 07 b1    	sub.w     #0x7e, w11
    147a:	01 34 b8    	mul.uu    w6, w1, w8
    147c:	00 3a b8    	mul.uu    w7, w0, w4
    147e:	08 04 42    	add.w     w4, w8, w8
    1480:	89 84 4a    	addc.w    w5, w9, w9
    1482:	01 3a b8    	mul.uu    w7, w1, w4
    1484:	00 30 b8    	mul.uu    w6, w0, w0
    1486:	88 80 40    	add.w     w1, w8, w1
    1488:	09 01 4a    	addc.w    w4, w9, w2
    148a:	04 00 33    	bra       N, 0x1494 <formsticky>
    148c:	00 00 40    	add.w     w0, w0, w0
    148e:	81 80 48    	addc.w    w1, w1, w1
    1490:	02 01 49    	addc.w    w2, w2, w2
    1492:	8b 05 e9    	dec.w     w11, w11

00001494 <formsticky>:
    1494:	c9 09 dd    	sl.w      w1, #0x9, w3
    1496:	83 01 70    	ior.w     w0, w3, w3
    1498:	01 00 32    	bra       Z, 0x149c <formRandSig>
    149a:	13 00 20    	mov.w     #0x1, w3

0000149c <formRandSig>:
    149c:	c8 14 de    	lsr.w     w2, #0x8, w9
    149e:	48 14 dd    	sl.w      w2, #0x8, w8
    14a0:	47 09 de    	lsr.w     w1, #0x7, w2
    14a2:	12 00 b2    	and.w     #0x1, w2
    14a4:	c8 08 de    	lsr.w     w1, #0x8, w1
    14a6:	08 84 70    	ior.w     w1, w8, w8
    14a8:	85 ff 07    	rcall     0x13b4 <__fpack>

000014aa <return0>:
    14aa:	01 f0 a1    	bclr.w    w1, #0xf
    14ac:	0c f0 a7    	btsc.w    w12, #0xf
    14ae:	01 f0 a0    	bset.w    w1, #0xf
    14b0:	cd ff 37    	bra       0x144c <__fbopExit>

000014b2 <aisinfinite>:
    14b2:	61 20 e1    	cp.w      w4, #0x1
    14b4:	cf ff 32    	bra       Z, 0x1454 <__fbopReturnNaN>

000014b6 <return8>:
    14b6:	08 01 be    	mov.d     w8, w2

000014b8 <return2>:
    14b8:	02 00 be    	mov.d     w2, w0
    14ba:	f7 ff 37    	bra       0x14aa <return0>

000014bc <bisinfinite>:
    14bc:	61 50 e1    	cp.w      w10, #0x1
    14be:	fc ff 3a    	bra       NZ, 0x14b8 <return2>
    14c0:	c9 ff 37    	bra       0x1454 <__fbopReturnNaN>

000014c2 <___udivsi3>:
    14c2:	60 22 b8    	mul.uu    w4, #0x0, w4
    14c4:	06 02 20    	mov.w     #0x20, w6

000014c6 <nextbit>:
    14c6:	00 00 d0    	sl.w      w0, w0
    14c8:	81 80 d2    	rlc.w     w1, w1
    14ca:	04 82 d2    	rlc.w     w4, w4
    14cc:	85 82 d2    	rlc.w     w5, w5
    14ce:	00 00 a0    	bset.w    w0, #0x0
    14d0:	02 02 52    	sub.w     w4, w2, w4
    14d2:	83 82 5a    	subb.w    w5, w3, w5
    14d4:	03 00 31    	bra       C, 0x14dc <iterate>
    14d6:	02 02 42    	add.w     w4, w2, w4
    14d8:	83 82 4a    	addc.w    w5, w3, w5
    14da:	00 00 a1    	bclr.w    w0, #0x0

000014dc <iterate>:
    14dc:	06 03 e9    	dec.w     w6, w6
    14de:	f3 ff 3a    	bra       NZ, 0x14c6 <nextbit>
    14e0:	00 00 06    	return    

000014e2 <__fcompare>:
    14e2:	88 9f be    	mov.d     w8, [w15++]
    14e4:	8a 9f be    	mov.d     w10, [w15++]
    14e6:	84 1f 78    	mov.w     w4, [w15++]
    14e8:	a0 ff 07    	rcall     0x142a <__funpack2>
    14ea:	4f 00 78    	mov.w     [--w15], w0
    14ec:	11 00 33    	bra       N, 0x1510 <exit>
    14ee:	f0 ff 2f    	mov.w     #0xffff, w0
    14f0:	83 8f 6c    	xor.w     w9, w3, [w15]
    14f2:	06 00 3b    	bra       NN, 0x1500 <comparemag>
    14f4:	04 05 65    	and.w     w10, w4, w10
    14f6:	0a 00 a7    	btsc.w    w10, #0x0
    14f8:	08 00 37    	bra       0x150a <returnEqual>
    14fa:	09 f0 a6    	btss.w    w9, #0xf
    14fc:	10 00 20    	mov.w     #0x1, w0
    14fe:	08 00 37    	bra       0x1510 <exit>

00001500 <comparemag>:
    1500:	82 0f 54    	sub.w     w8, w2, [w15]
    1502:	83 8f 5c    	subb.w    w9, w3, [w15]
    1504:	03 00 39    	bra       NC, 0x150c <adjust>
    1506:	10 00 20    	mov.w     #0x1, w0
    1508:	01 00 3e    	bra       GTU, 0x150c <adjust>

0000150a <returnEqual>:
    150a:	00 00 20    	mov.w     #0x0, w0

0000150c <adjust>:
    150c:	09 f0 a7    	btsc.w    w9, #0xf
    150e:	00 00 ea    	neg.w     w0, w0

00001510 <exit>:
    1510:	4f 05 be    	mov.d     [--w15], w10
    1512:	4f 04 be    	mov.d     [--w15], w8
    1514:	00 00 e0    	cp0.w     w0
    1516:	00 00 06    	return    

00001518 <___floatundisf>:
    1518:	88 9f be    	mov.d     w8, [w15++]
    151a:	8a 9f be    	mov.d     w10, [w15++]
    151c:	00 82 70    	ior.w     w1, w0, w4
    151e:	04 02 71    	ior.w     w2, w4, w4
    1520:	04 82 71    	ior.w     w3, w4, w4
    1522:	26 00 32    	bra       Z, 0x1570 <return0>
    1524:	00 04 be    	mov.d     w0, w8
    1526:	02 00 be    	mov.d     w2, w0
    1528:	60 11 b8    	mul.uu    w2, #0x0, w2
    152a:	6b 09 20    	mov.w     #0x96, w11
    152c:	95 02 20    	mov.w     #0x29, w5
    152e:	01 82 cf    	ff1l      w1, w4
    1530:	0a 00 39    	bra       NC, 0x1546 <fixshift>
    1532:	05 41 b1    	sub.b     #0x10, w5
    1534:	00 82 cf    	ff1l      w0, w4
    1536:	07 00 39    	bra       NC, 0x1546 <fixshift>
    1538:	05 41 b1    	sub.b     #0x10, w5
    153a:	09 82 cf    	ff1l      w9, w4
    153c:	04 00 39    	bra       NC, 0x1546 <fixshift>
    153e:	05 41 b1    	sub.b     #0x10, w5
    1540:	08 82 cf    	ff1l      w8, w4
    1542:	01 00 39    	bra       NC, 0x1546 <fixshift>
    1544:	05 41 b1    	sub.b     #0x10, w5

00001546 <fixshift>:
    1546:	05 42 52    	sub.b     w4, w5, w4
    1548:	12 00 32    	bra       Z, 0x156e <round>
    154a:	0a 00 3b    	bra       NN, 0x1560 <shiftleft>

0000154c <shiftright>:
    154c:	82 81 71    	ior.w     w3, w2, w3
    154e:	61 01 64    	and.w     w8, #0x1, w2
    1550:	81 00 d1    	lsr.w     w1, w1
    1552:	00 80 d3    	rrc.w     w0, w0
    1554:	89 84 d3    	rrc.w     w9, w9
    1556:	08 84 d3    	rrc.w     w8, w8
    1558:	8b 05 e8    	inc.w     w11, w11
    155a:	04 42 e8    	inc.b     w4, w4
    155c:	f7 ff 3a    	bra       NZ, 0x154c <shiftright>
    155e:	07 00 37    	bra       0x156e <round>

00001560 <shiftleft>:
    1560:	08 04 44    	add.w     w8, w8, w8
    1562:	89 84 4c    	addc.w    w9, w9, w9
    1564:	00 00 48    	addc.w    w0, w0, w0
    1566:	81 80 48    	addc.w    w1, w1, w1
    1568:	8b 05 e9    	dec.w     w11, w11
    156a:	04 42 e9    	dec.b     w4, w4
    156c:	f9 ff 3a    	bra       NZ, 0x1560 <shiftleft>

0000156e <round>:
    156e:	22 ff 07    	rcall     0x13b4 <__fpack>

00001570 <return0>:
    1570:	4f 05 be    	mov.d     [--w15], w10
    1572:	4f 04 be    	mov.d     [--w15], w8
    1574:	00 00 06    	return    
Disassembly of section __CONFIG3:

000157fa <__CONFIG3>:
   157fa:	03 1c 00    	nop       
Disassembly of section __CONFIG2:

000157fc <__CONFIG2>:
   157fc:	0f 89 00    	nop       
Disassembly of section __CONFIG1:

000157fe <__CONFIG1>:
   157fe:	7f 3e 00    	nop       
Disassembly of section .application_ivt:

00001000 <__DEFAULT_VECTOR-0x10c>:
    1000:	10 11 04    	goto      0x1110 <__reset>
    1002:	00 00 00 
    1004:	12 2c 04    	goto      0x2c12 <L0>
    1006:	00 00 00 
    1008:	12 2c 04    	goto      0x2c12 <L0>
    100a:	00 00 00 
    100c:	12 2c 04    	goto      0x2c12 <L0>
    100e:	00 00 00 
    1010:	12 2c 04    	goto      0x2c12 <L0>
    1012:	00 00 00 
    1014:	12 2c 04    	goto      0x2c12 <L0>
    1016:	00 00 00 
    1018:	12 2c 04    	goto      0x2c12 <L0>
    101a:	00 00 00 
    101c:	12 2c 04    	goto      0x2c12 <L0>
    101e:	00 00 00 
    1020:	12 2c 04    	goto      0x2c12 <L0>
    1022:	00 00 00 
    1024:	4e 16 04    	goto      0x164e <__T1Interrupt>
    1026:	00 00 00 
    1028:	12 2c 04    	goto      0x2c12 <L0>
    102a:	00 00 00 
    102c:	12 2c 04    	goto      0x2c12 <L0>
    102e:	00 00 00 
    1030:	7c 16 04    	goto      0x167c <__T2Interrupt>
    1032:	00 00 00 
    1034:	aa 16 04    	goto      0x16aa <__T3Interrupt>
    1036:	00 00 00 
    1038:	12 2c 04    	goto      0x2c12 <L0>
    103a:	00 00 00 
    103c:	12 2c 04    	goto      0x2c12 <L0>
    103e:	00 00 00 
    1040:	12 2c 04    	goto      0x2c12 <L0>
    1042:	00 00 00 
    1044:	12 2c 04    	goto      0x2c12 <L0>
    1046:	00 00 00 
    1048:	12 2c 04    	goto      0x2c12 <L0>
    104a:	00 00 00 
    104c:	12 2c 04    	goto      0x2c12 <L0>
    104e:	00 00 00 
    1050:	12 2c 04    	goto      0x2c12 <L0>
    1052:	00 00 00 
    1054:	12 2c 04    	goto      0x2c12 <L0>
    1056:	00 00 00 
    1058:	12 2c 04    	goto      0x2c12 <L0>
    105a:	00 00 00 
    105c:	12 2c 04    	goto      0x2c12 <L0>
    105e:	00 00 00 
    1060:	12 2c 04    	goto      0x2c12 <L0>
    1062:	00 00 00 
    1064:	12 2c 04    	goto      0x2c12 <L0>
    1066:	00 00 00 
    1068:	12 2c 04    	goto      0x2c12 <L0>
    106a:	00 00 00 
    106c:	12 2c 04    	goto      0x2c12 <L0>
    106e:	00 00 00 
    1070:	d8 16 04    	goto      0x16d8 <__T4Interrupt>
    1072:	00 00 00 
    1074:	06 17 04    	goto      0x1706 <__T5Interrupt>
    1076:	00 00 00 
    1078:	12 2c 04    	goto      0x2c12 <L0>
    107a:	00 00 00 
    107c:	12 2c 04    	goto      0x2c12 <L0>
    107e:	00 00 00 
    1080:	12 2c 04    	goto      0x2c12 <L0>
    1082:	00 00 00 
    1084:	12 2c 04    	goto      0x2c12 <L0>
    1086:	00 00 00 
    1088:	12 2c 04    	goto      0x2c12 <L0>
    108a:	00 00 00 
    108c:	12 2c 04    	goto      0x2c12 <L0>
    108e:	00 00 00 
    1090:	12 2c 04    	goto      0x2c12 <L0>
    1092:	00 00 00 
    1094:	12 2c 04    	goto      0x2c12 <L0>
    1096:	00 00 00 
    1098:	12 2c 04    	goto      0x2c12 <L0>
    109a:	00 00 00 
    109c:	12 2c 04    	goto      0x2c12 <L0>
    109e:	00 00 00 
    10a0:	12 2c 04    	goto      0x2c12 <L0>
    10a2:	00 00 00 
    10a4:	12 2c 04    	goto      0x2c12 <L0>
    10a6:	00 00 00 
    10a8:	12 2c 04    	goto      0x2c12 <L0>
    10aa:	00 00 00 
    10ac:	12 2c 04    	goto      0x2c12 <L0>
    10ae:	00 00 00 
    10b0:	12 2c 04    	goto      0x2c12 <L0>
    10b2:	00 00 00 
    10b4:	12 2c 04    	goto      0x2c12 <L0>
    10b6:	00 00 00 
    10b8:	12 2c 04    	goto      0x2c12 <L0>
    10ba:	00 00 00 
    10bc:	12 2c 04    	goto      0x2c12 <L0>
    10be:	00 00 00 
    10c0:	12 2c 04    	goto      0x2c12 <L0>
    10c2:	00 00 00 
    10c4:	12 2c 04    	goto      0x2c12 <L0>
    10c6:	00 00 00 
    10c8:	12 2c 04    	goto      0x2c12 <L0>
    10ca:	00 00 00 
    10cc:	12 2c 04    	goto      0x2c12 <L0>
    10ce:	00 00 00 
    10d0:	12 2c 04    	goto      0x2c12 <L0>
    10d2:	00 00 00 
    10d4:	12 2c 04    	goto      0x2c12 <L0>
    10d6:	00 00 00 
    10d8:	12 2c 04    	goto      0x2c12 <L0>
    10da:	00 00 00 
    10dc:	12 2c 04    	goto      0x2c12 <L0>
    10de:	00 00 00 
    10e0:	12 2c 04    	goto      0x2c12 <L0>
    10e2:	00 00 00 
    10e4:	12 2c 04    	goto      0x2c12 <L0>
    10e6:	00 00 00 
    10e8:	12 2c 04    	goto      0x2c12 <L0>
    10ea:	00 00 00 
    10ec:	12 2c 04    	goto      0x2c12 <L0>
    10ee:	00 00 00 
    10f0:	12 2c 04    	goto      0x2c12 <L0>
    10f2:	00 00 00 
    10f4:	12 2c 04    	goto      0x2c12 <L0>
    10f6:	00 00 00 
    10f8:	12 2c 04    	goto      0x2c12 <L0>
    10fa:	00 00 00 
    10fc:	12 2c 04    	goto      0x2c12 <L0>
    10fe:	00 00 00 
    1100:	12 2c 04    	goto      0x2c12 <L0>
    1102:	00 00 00 
    1104:	12 2c 04    	goto      0x2c12 <L0>
    1106:	00 00 00 
    1108:	12 2c 04    	goto      0x2c12 <L0>
    110a:	00 00 00 

0000110c <__DEFAULT_VECTOR>:
    110c:	12 2c 04    	goto      0x2c12 <L0>
    110e:	00 00 00 
Disassembly of section .ivt:

00000004 <.ivt>:
   4:	04 10 00    	nop       
   6:	08 10 00    	nop       
   8:	0c 10 00    	nop       
   a:	10 10 00    	nop       
   c:	14 10 00    	nop       
   e:	0c 11 00    	nop       
  10:	0c 11 00    	nop       
  12:	0c 11 00    	nop       
  14:	18 10 00    	nop       
  16:	1c 10 00    	nop       
  18:	20 10 00    	nop       
  1a:	24 10 00    	nop       
  1c:	0c 11 00    	nop       
  1e:	28 10 00    	nop       
  20:	2c 10 00    	nop       
  22:	30 10 00    	nop       
  24:	34 10 00    	nop       
  26:	38 10 00    	nop       
  28:	3c 10 00    	nop       
  2a:	40 10 00    	nop       
  2c:	44 10 00    	nop       
  2e:	48 10 00    	nop       
  30:	0c 11 00    	nop       
  32:	0c 11 00    	nop       
  34:	4c 10 00    	nop       
  36:	50 10 00    	nop       
  38:	54 10 00    	nop       
  3a:	58 10 00    	nop       
  3c:	5c 10 00    	nop       
  3e:	0c 11 00    	nop       
  40:	60 10 00    	nop       
  42:	64 10 00    	nop       
  44:	0c 11 00    	nop       
  46:	68 10 00    	nop       
  48:	6c 10 00    	nop       
  4a:	70 10 00    	nop       
  4c:	74 10 00    	nop       
  4e:	78 10 00    	nop       
  50:	7c 10 00    	nop       
  52:	80 10 00    	nop       
  54:	84 10 00    	nop       
  56:	88 10 00    	nop       
  58:	0c 11 00    	nop       
  5a:	0c 11 00    	nop       
  5c:	0c 11 00    	nop       
  5e:	8c 10 00    	nop       
  60:	90 10 00    	nop       
  62:	94 10 00    	nop       
  64:	98 10 00    	nop       
  66:	9c 10 00    	nop       
  68:	a0 10 00    	nop       
  6a:	a4 10 00    	nop       
  6c:	a8 10 00    	nop       
  6e:	ac 10 00    	nop       
  70:	0c 11 00    	nop       
  72:	0c 11 00    	nop       
  74:	0c 11 00    	nop       
  76:	b0 10 00    	nop       
  78:	b4 10 00    	nop       
  7a:	0c 11 00    	nop       
  7c:	0c 11 00    	nop       
  7e:	b8 10 00    	nop       
  80:	bc 10 00    	nop       
  82:	0c 11 00    	nop       
  84:	0c 11 00    	nop       
  86:	0c 11 00    	nop       
  88:	0c 11 00    	nop       
  8a:	0c 11 00    	nop       
  8c:	0c 11 00    	nop       
  8e:	0c 11 00    	nop       
  90:	c0 10 00    	nop       
  92:	0c 11 00    	nop       
  94:	0c 11 00    	nop       
  96:	c4 10 00    	nop       
  98:	c8 10 00    	nop       
  9a:	cc 10 00    	nop       
  9c:	0c 11 00    	nop       
  9e:	0c 11 00    	nop       
  a0:	0c 11 00    	nop       
  a2:	0c 11 00    	nop       
  a4:	d0 10 00    	nop       
  a6:	0c 11 00    	nop       
  a8:	0c 11 00    	nop       
  aa:	0c 11 00    	nop       
  ac:	0c 11 00    	nop       
  ae:	d4 10 00    	nop       
  b0:	0c 11 00    	nop       
  b2:	0c 11 00    	nop       
  b4:	0c 11 00    	nop       
  b6:	d8 10 00    	nop       
  b8:	dc 10 00    	nop       
  ba:	e0 10 00    	nop       
  bc:	e4 10 00    	nop       
  be:	e8 10 00    	nop       
  c0:	ec 10 00    	nop       
  c2:	f0 10 00    	nop       
  c4:	f4 10 00    	nop       
  c6:	f8 10 00    	nop       
  c8:	fc 10 00    	nop       
  ca:	00 11 00    	nop       
  cc:	04 11 00    	nop       
  ce:	08 11 00    	nop       
  d0:	0c 11 00    	nop       
  d2:	0c 11 00    	nop       
  d4:	0c 11 00    	nop       
  d6:	0c 11 00    	nop       
  d8:	0c 11 00    	nop       
  da:	0c 11 00    	nop       
  dc:	0c 11 00    	nop       
  de:	0c 11 00    	nop       
  e0:	0c 11 00    	nop       
  e2:	0c 11 00    	nop       
  e4:	0c 11 00    	nop       
  e6:	0c 11 00    	nop       
  e8:	0c 11 00    	nop       
  ea:	0c 11 00    	nop       
  ec:	0c 11 00    	nop       
  ee:	0c 11 00    	nop       
  f0:	0c 11 00    	nop       
  f2:	0c 11 00    	nop       
  f4:	0c 11 00    	nop       
  f6:	0c 11 00    	nop       
  f8:	0c 11 00    	nop       
  fa:	0c 11 00    	nop       
  fc:	0c 11 00    	nop       
  fe:	0c 11 00    	nop       
Disassembly of section .const:

00009576 <_Device>:
    9576:	12 01       	.word 0x112
    9578:	00 02       	.word 0x200
    957a:	00 00       	.word 0
    957c:	00 40       	.word 0x4000
    957e:	66 66       	.word 0x6666
    9580:	03 00       	.word 0x3
    9582:	00 00       	.word 0
    9584:	01 02       	.word 0x201
    9586:	00 01       	.word 0x100

00009588 <_Configuration1>:
    9588:	09 02       	.word 0x209
    958a:	12 00       	.word 0x12
    958c:	01 01       	.word 0x101
    958e:	00 a0       	.word 0xa000
    9590:	32 09       	.word 0x932
    9592:	04 00       	.word 0x4
    9594:	00 00       	.word 0
    9596:	ff 00       	.word 0xff
    9598:	ff 00       	.word 0xff

0000959a <_String0>:
    959a:	04 03       	.word 0x304
    959c:	09 04       	.word 0x409

0000959e <_String1>:
    959e:	1a 03       	.word 0x31a
    95a0:	4f 00       	.word 0x4f
    95a2:	6c 00       	.word 0x6c
    95a4:	69 00       	.word 0x69
    95a6:	6e 00       	.word 0x6e
    95a8:	20 00       	.word 0x20
    95aa:	43 00       	.word 0x43
    95ac:	6f 00       	.word 0x6f
    95ae:	6c 00       	.word 0x6c
    95b0:	6c 00       	.word 0x6c
    95b2:	65 00       	.word 0x65
    95b4:	67 00       	.word 0x67
    95b6:	65 00       	.word 0x65

000095b8 <_String2>:
    95b8:	44 03       	.word 0x344
    95ba:	45 00       	.word 0x45
    95bc:	6c 00       	.word 0x6c
    95be:	65 00       	.word 0x65
    95c0:	63 00       	.word 0x63
    95c2:	61 00       	.word 0x61
    95c4:	6e 00       	.word 0x6e
    95c6:	69 00       	.word 0x69
    95c8:	73 00       	.word 0x73
    95ca:	6d 00       	.word 0x6d
    95cc:	73 00       	.word 0x73
    95ce:	20 00       	.word 0x20
    95d0:	4d 00       	.word 0x4d
    95d2:	69 00       	.word 0x69
    95d4:	6e 00       	.word 0x6e
    95d6:	69 00       	.word 0x69
    95d8:	70 00       	.word 0x70
    95da:	72 00       	.word 0x72
    95dc:	6f 00       	.word 0x6f
    95de:	6a 00       	.word 0x6a
    95e0:	65 00       	.word 0x65
    95e2:	63 00       	.word 0x63
    95e4:	74 00       	.word 0x74
    95e6:	20 00       	.word 0x20
    95e8:	32 00       	.word 0x32
    95ea:	20 00       	.word 0x20
    95ec:	46 00       	.word 0x46
    95ee:	69 00       	.word 0x69
    95f0:	72 00       	.word 0x72
    95f2:	6d 00       	.word 0x6d
    95f4:	77 00       	.word 0x77
    95f6:	61 00       	.word 0x61
    95f8:	72 00       	.word 0x72
    95fa:	65 00       	.word 0x65
Disassembly of section .text:

000015fc <_timer_serviceInterrupt>:

_TIMER timer1, timer2, timer3, timer4, timer5;
float timer_multipliers[4] = { TCY, 8.*TCY, 64.*TCY, 256.*TCY };

void timer_serviceInterrupt(_TIMER *self) {
    15fc:	02 00 fa    	lnk       #0x2
    15fe:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    1600:	1e 00 78    	mov.w     [w14], w0
    1602:	01 02 07    	rcall     0x1a06 <_timer_lower> <L0> <.LFB16> <.LFE15>
    if (self->every) {
    1604:	1e 00 78    	mov.w     [w14], w0
    1606:	10 08 90    	mov.w     [w0+18], w0
    1608:	00 00 e0    	cp0.w     w0
    160a:	05 00 32    	bra       Z, 0x1616 <.L2>
        self->every(self);
    160c:	1e 00 78    	mov.w     [w14], w0
    160e:	90 08 90    	mov.w     [w0+18], w1
    1610:	1e 00 78    	mov.w     [w14], w0
    1612:	01 00 01    	call      w1
    1614:	1a 00 37    	bra       0x164a <.L1>

00001616 <.L2>:
    } else if (self->after) {
    1616:	1e 00 78    	mov.w     [w14], w0
    1618:	20 08 90    	mov.w     [w0+20], w0
    161a:	00 00 e0    	cp0.w     w0
    161c:	14 00 32    	bra       Z, 0x1646 <.L4>
        if (self->aftercount) {
    161e:	1e 00 78    	mov.w     [w14], w0
    1620:	00 08 90    	mov.w     [w0+16], w0
    1622:	00 00 e0    	cp0.w     w0
    1624:	0a 00 32    	bra       Z, 0x163a <.L5>
            self->after(self);
    1626:	1e 00 78    	mov.w     [w14], w0
    1628:	a0 08 90    	mov.w     [w0+20], w1
    162a:	1e 00 78    	mov.w     [w14], w0
    162c:	01 00 01    	call      w1
            self->aftercount--;
    162e:	1e 00 78    	mov.w     [w14], w0
    1630:	00 08 90    	mov.w     [w0+16], w0
    1632:	80 00 e9    	dec.w     w0, w1
    1634:	1e 00 78    	mov.w     [w14], w0
    1636:	01 08 98    	mov.w     w1, [w0+16]
    1638:	08 00 37    	bra       0x164a <.L1>

0000163a <.L5>:
        } else {
            timer_disableInterrupt(self);
    163a:	1e 00 78    	mov.w     [w14], w0
    163c:	0c 02 07    	rcall     0x1a56 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
            self->after = NULL;
    163e:	1e 00 78    	mov.w     [w14], w0
    1640:	80 00 eb    	clr.w     w1
    1642:	21 08 98    	mov.w     w1, [w0+20]
    1644:	02 00 37    	bra       0x164a <.L1>

00001646 <.L4>:
        }
    } else {
        timer_disableInterrupt(self);
    1646:	1e 00 78    	mov.w     [w14], w0
    1648:	06 02 07    	rcall     0x1a56 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>

0000164a <.L1>:
    }
}
    164a:	00 80 fa    	ulnk      
    164c:	00 00 06    	return    

0000164e <__T1Interrupt>:

void __attribute__((interrupt, auto_psv)) _T1Interrupt(void) {
    164e:	36 00 f8    	push      0x36
    1650:	80 9f be    	mov.d     w0, [w15++]
    1652:	82 9f be    	mov.d     w2, [w15++]
    1654:	84 9f be    	mov.d     w4, [w15++]
    1656:	86 9f be    	mov.d     w6, [w15++]
    1658:	32 00 f8    	push      0x32
    165a:	34 00 f8    	push      0x34
    165c:	10 00 20    	mov.w     #0x1, w0
    165e:	a0 01 88    	mov.w     w0, 0x34
    1660:	00 20 20    	mov.w     #0x200, w0
    1662:	90 01 88    	mov.w     w0, 0x32
    1664:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer1);
    1666:	a0 a8 20    	mov.w     #0xa8a, w0
    1668:	c9 ff 07    	rcall     0x15fc <_timer_serviceInterrupt> <.L0> <.LFB0> <.Ltext0>
}
    166a:	00 80 fa    	ulnk      
    166c:	34 00 f9    	pop       0x34
    166e:	32 00 f9    	pop       0x32
    1670:	4f 03 be    	mov.d     [--w15], w6
    1672:	4f 02 be    	mov.d     [--w15], w4
    1674:	4f 01 be    	mov.d     [--w15], w2
    1676:	4f 00 be    	mov.d     [--w15], w0
    1678:	36 00 f9    	pop       0x36
    167a:	00 40 06    	retfie    

0000167c <__T2Interrupt>:

void __attribute__((interrupt, auto_psv)) _T2Interrupt(void) {
    167c:	36 00 f8    	push      0x36
    167e:	80 9f be    	mov.d     w0, [w15++]
    1680:	82 9f be    	mov.d     w2, [w15++]
    1682:	84 9f be    	mov.d     w4, [w15++]
    1684:	86 9f be    	mov.d     w6, [w15++]
    1686:	32 00 f8    	push      0x32
    1688:	34 00 f8    	push      0x34
    168a:	10 00 20    	mov.w     #0x1, w0
    168c:	a0 01 88    	mov.w     w0, 0x34
    168e:	00 20 20    	mov.w     #0x200, w0
    1690:	90 01 88    	mov.w     w0, 0x32
    1692:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer2);
    1694:	00 aa 20    	mov.w     #0xaa0, w0
    1696:	b2 ff 07    	rcall     0x15fc <_timer_serviceInterrupt> <.L0> <.LFB0> <.Ltext0>
}
    1698:	00 80 fa    	ulnk      
    169a:	34 00 f9    	pop       0x34
    169c:	32 00 f9    	pop       0x32
    169e:	4f 03 be    	mov.d     [--w15], w6
    16a0:	4f 02 be    	mov.d     [--w15], w4
    16a2:	4f 01 be    	mov.d     [--w15], w2
    16a4:	4f 00 be    	mov.d     [--w15], w0
    16a6:	36 00 f9    	pop       0x36
    16a8:	00 40 06    	retfie    

000016aa <__T3Interrupt>:

void __attribute__((interrupt, auto_psv)) _T3Interrupt(void) {
    16aa:	36 00 f8    	push      0x36
    16ac:	80 9f be    	mov.d     w0, [w15++]
    16ae:	82 9f be    	mov.d     w2, [w15++]
    16b0:	84 9f be    	mov.d     w4, [w15++]
    16b2:	86 9f be    	mov.d     w6, [w15++]
    16b4:	32 00 f8    	push      0x32
    16b6:	34 00 f8    	push      0x34
    16b8:	10 00 20    	mov.w     #0x1, w0
    16ba:	a0 01 88    	mov.w     w0, 0x34
    16bc:	00 20 20    	mov.w     #0x200, w0
    16be:	90 01 88    	mov.w     w0, 0x32
    16c0:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer3);
    16c2:	60 ab 20    	mov.w     #0xab6, w0
    16c4:	9b ff 07    	rcall     0x15fc <_timer_serviceInterrupt> <.L0> <.LFB0> <.Ltext0>
}
    16c6:	00 80 fa    	ulnk      
    16c8:	34 00 f9    	pop       0x34
    16ca:	32 00 f9    	pop       0x32
    16cc:	4f 03 be    	mov.d     [--w15], w6
    16ce:	4f 02 be    	mov.d     [--w15], w4
    16d0:	4f 01 be    	mov.d     [--w15], w2
    16d2:	4f 00 be    	mov.d     [--w15], w0
    16d4:	36 00 f9    	pop       0x36
    16d6:	00 40 06    	retfie    

000016d8 <__T4Interrupt>:

void __attribute__((interrupt, auto_psv)) _T4Interrupt(void) {
    16d8:	36 00 f8    	push      0x36
    16da:	80 9f be    	mov.d     w0, [w15++]
    16dc:	82 9f be    	mov.d     w2, [w15++]
    16de:	84 9f be    	mov.d     w4, [w15++]
    16e0:	86 9f be    	mov.d     w6, [w15++]
    16e2:	32 00 f8    	push      0x32
    16e4:	34 00 f8    	push      0x34
    16e6:	10 00 20    	mov.w     #0x1, w0
    16e8:	a0 01 88    	mov.w     w0, 0x34
    16ea:	00 20 20    	mov.w     #0x200, w0
    16ec:	90 01 88    	mov.w     w0, 0x32
    16ee:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer4);
    16f0:	c0 ac 20    	mov.w     #0xacc, w0
    16f2:	84 ff 07    	rcall     0x15fc <_timer_serviceInterrupt> <.L0> <.LFB0> <.Ltext0>
}
    16f4:	00 80 fa    	ulnk      
    16f6:	34 00 f9    	pop       0x34
    16f8:	32 00 f9    	pop       0x32
    16fa:	4f 03 be    	mov.d     [--w15], w6
    16fc:	4f 02 be    	mov.d     [--w15], w4
    16fe:	4f 01 be    	mov.d     [--w15], w2
    1700:	4f 00 be    	mov.d     [--w15], w0
    1702:	36 00 f9    	pop       0x36
    1704:	00 40 06    	retfie    

00001706 <__T5Interrupt>:

void __attribute__((interrupt, auto_psv)) _T5Interrupt(void) {
    1706:	36 00 f8    	push      0x36
    1708:	80 9f be    	mov.d     w0, [w15++]
    170a:	82 9f be    	mov.d     w2, [w15++]
    170c:	84 9f be    	mov.d     w4, [w15++]
    170e:	86 9f be    	mov.d     w6, [w15++]
    1710:	32 00 f8    	push      0x32
    1712:	34 00 f8    	push      0x34
    1714:	10 00 20    	mov.w     #0x1, w0
    1716:	a0 01 88    	mov.w     w0, 0x34
    1718:	00 20 20    	mov.w     #0x200, w0
    171a:	90 01 88    	mov.w     w0, 0x32
    171c:	00 00 fa    	lnk       #0x0
    timer_serviceInterrupt(&timer5);
    171e:	20 ae 20    	mov.w     #0xae2, w0
    1720:	6d ff 07    	rcall     0x15fc <_timer_serviceInterrupt> <.L0> <.LFB0> <.Ltext0>
}
    1722:	00 80 fa    	ulnk      
    1724:	34 00 f9    	pop       0x34
    1726:	32 00 f9    	pop       0x32
    1728:	4f 03 be    	mov.d     [--w15], w6
    172a:	4f 02 be    	mov.d     [--w15], w4
    172c:	4f 01 be    	mov.d     [--w15], w2
    172e:	4f 00 be    	mov.d     [--w15], w0
    1730:	36 00 f9    	pop       0x36
    1732:	00 40 06    	retfie    

00001734 <_init_timer>:

void init_timer(void) {
    1734:	00 00 fa    	lnk       #0x0
    timer_init(&timer1, (uint16_t *)&T1CON, (uint16_t *)&PR1, (uint16_t *)&TMR1, 
    1736:	b0 00 20    	mov.w     #0xb, w0
    1738:	80 1f 78    	mov.w     w0, [w15++]
    173a:	47 00 20    	mov.w     #0x4, w7
    173c:	36 c0 b3    	mov.b     #0x3, w6
    173e:	45 09 20    	mov.w     #0x94, w5
    1740:	44 08 20    	mov.w     #0x84, w4
    1742:	03 10 20    	mov.w     #0x100, w3
    1744:	22 10 20    	mov.w     #0x102, w2
    1746:	41 10 20    	mov.w     #0x104, w1
    1748:	a0 a8 20    	mov.w     #0xa8a, w0
    174a:	33 00 07    	rcall     0x17b2 <_timer_init> <L0> <.LFB7> <.LFE6>
    174c:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 3, 4, 11);
    timer_init(&timer2, (uint16_t *)&T2CON, (uint16_t *)&PR2, (uint16_t *)&TMR2, 
    174e:	c0 00 20    	mov.w     #0xc, w0
    1750:	80 1f 78    	mov.w     w0, [w15++]
    1752:	80 03 eb    	clr.w     w7
    1754:	76 c0 b3    	mov.b     #0x7, w6
    1756:	45 09 20    	mov.w     #0x94, w5
    1758:	44 08 20    	mov.w     #0x84, w4
    175a:	63 10 20    	mov.w     #0x106, w3
    175c:	c2 10 20    	mov.w     #0x10c, w2
    175e:	01 11 20    	mov.w     #0x110, w1
    1760:	00 aa 20    	mov.w     #0xaa0, w0
    1762:	27 00 07    	rcall     0x17b2 <_timer_init> <L0> <.LFB7> <.LFE6>
    1764:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 7, 0, 12);
    timer_init(&timer3, (uint16_t *)&T3CON, (uint16_t *)&PR3, (uint16_t *)&TMR3, 
    1766:	d0 00 20    	mov.w     #0xd, w0
    1768:	80 1f 78    	mov.w     w0, [w15++]
    176a:	17 00 20    	mov.w     #0x1, w7
    176c:	86 c0 b3    	mov.b     #0x8, w6
    176e:	45 09 20    	mov.w     #0x94, w5
    1770:	44 08 20    	mov.w     #0x84, w4
    1772:	a3 10 20    	mov.w     #0x10a, w3
    1774:	e2 10 20    	mov.w     #0x10e, w2
    1776:	21 11 20    	mov.w     #0x112, w1
    1778:	60 ab 20    	mov.w     #0xab6, w0
    177a:	1b 00 07    	rcall     0x17b2 <_timer_init> <L0> <.LFB7> <.LFE6>
    177c:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS0, (uint16_t *)&IEC0, 8, 1, 13);
    timer_init(&timer4, (uint16_t *)&T4CON, (uint16_t *)&PR4, (uint16_t *)&TMR4, 
    177e:	e0 00 20    	mov.w     #0xe, w0
    1780:	80 1f 78    	mov.w     w0, [w15++]
    1782:	27 00 20    	mov.w     #0x2, w7
    1784:	b6 c0 b3    	mov.b     #0xb, w6
    1786:	65 09 20    	mov.w     #0x96, w5
    1788:	64 08 20    	mov.w     #0x86, w4
    178a:	43 11 20    	mov.w     #0x114, w3
    178c:	a2 11 20    	mov.w     #0x11a, w2
    178e:	e1 11 20    	mov.w     #0x11e, w1
    1790:	c0 ac 20    	mov.w     #0xacc, w0
    1792:	0f 00 07    	rcall     0x17b2 <_timer_init> <L0> <.LFB7> <.LFE6>
    1794:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 11, 2, 14);
    timer_init(&timer5, (uint16_t *)&T5CON, (uint16_t *)&PR5, (uint16_t *)&TMR5, 
    1796:	f0 00 20    	mov.w     #0xf, w0
    1798:	80 1f 78    	mov.w     w0, [w15++]
    179a:	37 00 20    	mov.w     #0x3, w7
    179c:	c6 c0 b3    	mov.b     #0xc, w6
    179e:	65 09 20    	mov.w     #0x96, w5
    17a0:	64 08 20    	mov.w     #0x86, w4
    17a2:	83 11 20    	mov.w     #0x118, w3
    17a4:	c2 11 20    	mov.w     #0x11c, w2
    17a6:	01 12 20    	mov.w     #0x120, w1
    17a8:	20 ae 20    	mov.w     #0xae2, w0
    17aa:	03 00 07    	rcall     0x17b2 <_timer_init> <L0> <.LFB7> <.LFE6>
    17ac:	8f 87 e9    	dec2.w    w15, w15
               (uint16_t *)&IFS1, (uint16_t *)&IEC1, 12, 3, 15);
}
    17ae:	00 80 fa    	ulnk      
    17b0:	00 00 06    	return    

000017b2 <_timer_init>:

void timer_init(_TIMER *self, uint16_t *TxCON, uint16_t *PRx, 
                uint16_t *TMRx, uint16_t *IFSy, uint16_t *IECy, 
                uint8_t flagbit, uint16_t octselnum, uint16_t ocsyncselnum) {
    17b2:	10 00 fa    	lnk       #0x10
    17b4:	00 0f 78    	mov.w     w0, [w14]
    17b6:	11 07 98    	mov.w     w1, [w14+2]
    17b8:	22 07 98    	mov.w     w2, [w14+4]
    17ba:	33 07 98    	mov.w     w3, [w14+6]
    17bc:	44 07 98    	mov.w     w4, [w14+8]
    17be:	55 07 98    	mov.w     w5, [w14+10]
    17c0:	46 4f 98    	mov.b     w6, [w14+12]
    17c2:	77 07 98    	mov.w     w7, [w14+14]
    self->TxCON = TxCON;
    17c4:	1e 00 78    	mov.w     [w14], w0
    17c6:	9e 00 90    	mov.w     [w14+2], w1
    17c8:	01 08 78    	mov.w     w1, [w0]
    self->PRx = PRx;
    17ca:	1e 00 78    	mov.w     [w14], w0
    17cc:	ae 00 90    	mov.w     [w14+4], w1
    17ce:	11 00 98    	mov.w     w1, [w0+2]
    self->TMRx = TMRx;
    17d0:	1e 00 78    	mov.w     [w14], w0
    17d2:	be 00 90    	mov.w     [w14+6], w1
    17d4:	21 00 98    	mov.w     w1, [w0+4]
    self->IFSy = IFSy;
    17d6:	1e 00 78    	mov.w     [w14], w0
    17d8:	ce 00 90    	mov.w     [w14+8], w1
    17da:	31 00 98    	mov.w     w1, [w0+6]
    self->IECy = IECy;
    17dc:	1e 00 78    	mov.w     [w14], w0
    17de:	de 00 90    	mov.w     [w14+10], w1
    17e0:	41 00 98    	mov.w     w1, [w0+8]
    self->flagbit = flagbit;
    17e2:	1e 00 78    	mov.w     [w14], w0
    17e4:	ce 48 90    	mov.b     [w14+12], w1
    17e6:	21 48 98    	mov.b     w1, [w0+10]
    self->octselnum = octselnum;
    17e8:	1e 00 78    	mov.w     [w14], w0
    17ea:	fe 00 90    	mov.w     [w14+14], w1
    17ec:	61 00 98    	mov.w     w1, [w0+12]
    self->ocsyncselnum = ocsyncselnum;
    17ee:	1e 00 78    	mov.w     [w14], w0
    17f0:	ce b8 97    	mov.w     [w14-8], w1
    17f2:	71 00 98    	mov.w     w1, [w0+14]
    self->aftercount = 0;
    17f4:	1e 00 78    	mov.w     [w14], w0
    17f6:	80 00 eb    	clr.w     w1
    17f8:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    17fa:	1e 00 78    	mov.w     [w14], w0
    17fc:	80 00 eb    	clr.w     w1
    17fe:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    1800:	1e 00 78    	mov.w     [w14], w0
    1802:	80 00 eb    	clr.w     w1
    1804:	21 08 98    	mov.w     w1, [w0+20]
}
    1806:	00 80 fa    	ulnk      
    1808:	00 00 06    	return    

0000180a <_timer_setPeriod>:

void timer_setPeriod(_TIMER *self, float period) {
    180a:	06 00 fa    	lnk       #0x6
    180c:	88 1f 78    	mov.w     w8, [w15++]
    180e:	00 0f 78    	mov.w     w0, [w14]
    1810:	12 07 98    	mov.w     w2, [w14+2]
    1812:	23 07 98    	mov.w     w3, [w14+4]
    if (period>(256.*65536.*TCY)) {
    1814:	18 c0 b3    	mov.b     #0x1, w8
    1816:	d2 7b 23    	mov.w     #0x37bd, w2
    1818:	63 f8 23    	mov.w     #0x3f86, w3
    181a:	1e 00 90    	mov.w     [w14+2], w0
    181c:	ae 00 90    	mov.w     [w14+4], w1
    181e:	ab fd 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    1820:	00 00 e0    	cp0.w     w0
    1822:	01 00 3c    	bra       GT, 0x1826 <.L14>
    1824:	00 44 eb    	clr.b     w8

00001826 <.L14>:
    1826:	08 04 e0    	cp0.b     w8
    1828:	69 00 3a    	bra       NZ, 0x18fc <.L23>
        return;
    } else if (period>(64.*65536.*TCY)) {
    182a:	18 c0 b3    	mov.b     #0x1, w8
    182c:	d2 7b 23    	mov.w     #0x37bd, w2
    182e:	63 e8 23    	mov.w     #0x3e86, w3
    1830:	1e 00 90    	mov.w     [w14+2], w0
    1832:	ae 00 90    	mov.w     [w14+4], w1
    1834:	a0 fd 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    1836:	00 00 e0    	cp0.w     w0
    1838:	01 00 3c    	bra       GT, 0x183c <.L17>
    183a:	00 44 eb    	clr.b     w8

0000183c <.L17>:
    183c:	08 04 e0    	cp0.b     w8
    183e:	12 00 32    	bra       Z, 0x1864 <.L18>
        timer_stop(self);
    1840:	1e 00 78    	mov.w     [w14], w0
    1842:	c4 00 07    	rcall     0x19cc <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0030);
    1844:	1e 00 78    	mov.w     [w14], w0
    1846:	10 00 78    	mov.w     [w0], w0
    1848:	01 03 20    	mov.w     #0x30, w1
    184a:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/256.))-1);
    184c:	1e 00 78    	mov.w     [w14], w0
    184e:	10 04 90    	mov.w     [w0+2], w8
    1850:	02 40 22    	mov.w     #0x2400, w2
    1852:	43 77 24    	mov.w     #0x4774, w3
    1854:	1e 00 90    	mov.w     [w14+2], w0
    1856:	ae 00 90    	mov.w     [w14+4], w1
    1858:	00 fe 07    	rcall     0x145a <___mulsf3>
    185a:	8f fd 07    	rcall     0x137a <___fixunssfsi>
    185c:	00 00 78    	mov.w     w0, w0
    185e:	00 00 e9    	dec.w     w0, w0
    1860:	00 0c 78    	mov.w     w0, [w8]
    1862:	4d 00 37    	bra       0x18fe <.L13>

00001864 <.L18>:
    } else if (period>(8.*65536.*TCY)) {
    1864:	18 c0 b3    	mov.b     #0x1, w8
    1866:	d2 7b 23    	mov.w     #0x37bd, w2
    1868:	63 d0 23    	mov.w     #0x3d06, w3
    186a:	1e 00 90    	mov.w     [w14+2], w0
    186c:	ae 00 90    	mov.w     [w14+4], w1
    186e:	83 fd 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    1870:	00 00 e0    	cp0.w     w0
    1872:	01 00 3c    	bra       GT, 0x1876 <.L19>
    1874:	00 44 eb    	clr.b     w8

00001876 <.L19>:
    1876:	08 04 e0    	cp0.b     w8
    1878:	12 00 32    	bra       Z, 0x189e <.L20>
        timer_stop(self);
    187a:	1e 00 78    	mov.w     [w14], w0
    187c:	a7 00 07    	rcall     0x19cc <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0020);
    187e:	1e 00 78    	mov.w     [w14], w0
    1880:	10 00 78    	mov.w     [w0], w0
    1882:	01 02 20    	mov.w     #0x20, w1
    1884:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/64.))-1);
    1886:	1e 00 78    	mov.w     [w14], w0
    1888:	10 04 90    	mov.w     [w0+2], w8
    188a:	02 40 22    	mov.w     #0x2400, w2
    188c:	43 87 24    	mov.w     #0x4874, w3
    188e:	1e 00 90    	mov.w     [w14+2], w0
    1890:	ae 00 90    	mov.w     [w14+4], w1
    1892:	e3 fd 07    	rcall     0x145a <___mulsf3>
    1894:	72 fd 07    	rcall     0x137a <___fixunssfsi>
    1896:	00 00 78    	mov.w     w0, w0
    1898:	00 00 e9    	dec.w     w0, w0
    189a:	00 0c 78    	mov.w     w0, [w8]
    189c:	30 00 37    	bra       0x18fe <.L13>

0000189e <.L20>:
    } else if (period>(65536.*TCY)) {
    189e:	18 c0 b3    	mov.b     #0x1, w8
    18a0:	d2 7b 23    	mov.w     #0x37bd, w2
    18a2:	63 b8 23    	mov.w     #0x3b86, w3
    18a4:	1e 00 90    	mov.w     [w14+2], w0
    18a6:	ae 00 90    	mov.w     [w14+4], w1
    18a8:	66 fd 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    18aa:	00 00 e0    	cp0.w     w0
    18ac:	01 00 3c    	bra       GT, 0x18b0 <.L21>
    18ae:	00 44 eb    	clr.b     w8

000018b0 <.L21>:
    18b0:	08 04 e0    	cp0.b     w8
    18b2:	12 00 32    	bra       Z, 0x18d8 <.L22>
        timer_stop(self);
    18b4:	1e 00 78    	mov.w     [w14], w0
    18b6:	8a 00 07    	rcall     0x19cc <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0010);
    18b8:	1e 00 78    	mov.w     [w14], w0
    18ba:	10 00 78    	mov.w     [w0], w0
    18bc:	01 01 20    	mov.w     #0x10, w1
    18be:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*(FCY/8.))-1);
    18c0:	1e 00 78    	mov.w     [w14], w0
    18c2:	10 04 90    	mov.w     [w0+2], w8
    18c4:	02 40 22    	mov.w     #0x2400, w2
    18c6:	43 9f 24    	mov.w     #0x49f4, w3
    18c8:	1e 00 90    	mov.w     [w14+2], w0
    18ca:	ae 00 90    	mov.w     [w14+4], w1
    18cc:	c6 fd 07    	rcall     0x145a <___mulsf3>
    18ce:	55 fd 07    	rcall     0x137a <___fixunssfsi>
    18d0:	00 00 78    	mov.w     w0, w0
    18d2:	00 00 e9    	dec.w     w0, w0
    18d4:	00 0c 78    	mov.w     w0, [w8]
    18d6:	13 00 37    	bra       0x18fe <.L13>

000018d8 <.L22>:
    } else {
        timer_stop(self);
    18d8:	1e 00 78    	mov.w     [w14], w0
    18da:	78 00 07    	rcall     0x19cc <_timer_stop> <L0> <.LFB14> <.LFE13>
        poke(self->TxCON, 0x0000);
    18dc:	1e 00 78    	mov.w     [w14], w0
    18de:	10 00 78    	mov.w     [w0], w0
    18e0:	80 00 eb    	clr.w     w1
    18e2:	01 08 78    	mov.w     w1, [w0]
        poke(self->PRx, (uint16_t)(period*FCY)-1);
    18e4:	1e 00 78    	mov.w     [w14], w0
    18e6:	10 04 90    	mov.w     [w0+2], w8
    18e8:	02 40 22    	mov.w     #0x2400, w2
    18ea:	43 b7 24    	mov.w     #0x4b74, w3
    18ec:	1e 00 90    	mov.w     [w14+2], w0
    18ee:	ae 00 90    	mov.w     [w14+4], w1
    18f0:	b4 fd 07    	rcall     0x145a <___mulsf3>
    18f2:	43 fd 07    	rcall     0x137a <___fixunssfsi>
    18f4:	00 00 78    	mov.w     w0, w0
    18f6:	00 00 e9    	dec.w     w0, w0
    18f8:	00 0c 78    	mov.w     w0, [w8]
    18fa:	01 00 37    	bra       0x18fe <.L13>

000018fc <.L23>:
    18fc:	00 00 00    	nop       

000018fe <.L13>:
    }
}
    18fe:	4f 04 78    	mov.w     [--w15], w8
    1900:	00 80 fa    	ulnk      
    1902:	00 00 06    	return    

00001904 <_timer_period>:

float timer_period(_TIMER *self) {
    1904:	04 00 fa    	lnk       #0x4
    1906:	88 9f be    	mov.d     w8, [w15++]
    1908:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    190a:	1e 00 90    	mov.w     [w14+2], w0
    190c:	10 00 78    	mov.w     [w0], w0
    190e:	90 00 78    	mov.w     [w0], w1
    1910:	00 03 20    	mov.w     #0x30, w0
    1912:	00 80 60    	and.w     w1, w0, w0
    1914:	44 00 de    	lsr.w     w0, #0x4, w0
    1916:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    1918:	1e 00 78    	mov.w     [w14], w0
    191a:	c2 00 dd    	sl.w      w0, #0x2, w1
    191c:	a0 b3 20    	mov.w     #0xb3a, w0
    191e:	00 80 40    	add.w     w1, w0, w0
    1920:	10 04 be    	mov.d     [w0], w8
    1922:	1e 00 90    	mov.w     [w14+2], w0
    1924:	10 00 90    	mov.w     [w0+2], w0
    1926:	10 00 78    	mov.w     [w0], w0
    1928:	80 00 eb    	clr.w     w1
    192a:	42 fd 07    	rcall     0x13b0 <___floatunsisf>
    192c:	02 00 20    	mov.w     #0x0, w2
    192e:	03 f8 23    	mov.w     #0x3f80, w3
    1930:	81 fc 07    	rcall     0x1234 <___addsf3>
    1932:	00 01 be    	mov.d     w0, w2
    1934:	08 00 be    	mov.d     w8, w0
    1936:	91 fd 07    	rcall     0x145a <___mulsf3>
}
    1938:	4f 04 be    	mov.d     [--w15], w8
    193a:	00 80 fa    	ulnk      
    193c:	00 00 06    	return    

0000193e <_timer_setFreq>:

void timer_setFreq(_TIMER *self, float freq) {
    193e:	06 00 fa    	lnk       #0x6
    1940:	00 0f 78    	mov.w     w0, [w14]
    1942:	12 07 98    	mov.w     w2, [w14+2]
    1944:	23 07 98    	mov.w     w3, [w14+4]
    timer_setPeriod(self, 1./freq);
    1946:	1e 01 90    	mov.w     [w14+2], w2
    1948:	ae 01 90    	mov.w     [w14+4], w3
    194a:	00 00 20    	mov.w     #0x0, w0
    194c:	01 f8 23    	mov.w     #0x3f80, w1
    194e:	cf fc 07    	rcall     0x12ee <___divsf3>
    1950:	00 01 be    	mov.d     w0, w2
    1952:	1e 00 78    	mov.w     [w14], w0
    1954:	5a ff 07    	rcall     0x180a <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
}
    1956:	00 80 fa    	ulnk      
    1958:	00 00 06    	return    

0000195a <_timer_freq>:

float timer_freq(_TIMER *self) {
    195a:	02 00 fa    	lnk       #0x2
    195c:	00 0f 78    	mov.w     w0, [w14]
    return 1./timer_period(self);
    195e:	1e 00 78    	mov.w     [w14], w0
    1960:	d1 ff 07    	rcall     0x1904 <_timer_period> <L0> <.LFB9> <.LFE8>
    1962:	00 01 be    	mov.d     w0, w2
    1964:	00 00 20    	mov.w     #0x0, w0
    1966:	01 f8 23    	mov.w     #0x3f80, w1
    1968:	c2 fc 07    	rcall     0x12ee <___divsf3>
}
    196a:	00 80 fa    	ulnk      
    196c:	00 00 06    	return    

0000196e <_timer_time>:

float timer_time(_TIMER *self) {
    196e:	04 00 fa    	lnk       #0x4
    1970:	88 9f be    	mov.d     w8, [w15++]
    1972:	10 07 98    	mov.w     w0, [w14+2]
    uint16_t prescalar = (peek(self->TxCON)&0x0030)>>4;
    1974:	1e 00 90    	mov.w     [w14+2], w0
    1976:	10 00 78    	mov.w     [w0], w0
    1978:	90 00 78    	mov.w     [w0], w1
    197a:	00 03 20    	mov.w     #0x30, w0
    197c:	00 80 60    	and.w     w1, w0, w0
    197e:	44 00 de    	lsr.w     w0, #0x4, w0
    1980:	00 0f 78    	mov.w     w0, [w14]

    return timer_multipliers[prescalar]*((float)peek(self->PRx)+1.);
    1982:	1e 00 78    	mov.w     [w14], w0
    1984:	c2 00 dd    	sl.w      w0, #0x2, w1
    1986:	a0 b3 20    	mov.w     #0xb3a, w0
    1988:	00 80 40    	add.w     w1, w0, w0
    198a:	10 04 be    	mov.d     [w0], w8
    198c:	1e 00 90    	mov.w     [w14+2], w0
    198e:	10 00 90    	mov.w     [w0+2], w0
    1990:	10 00 78    	mov.w     [w0], w0
    1992:	80 00 eb    	clr.w     w1
    1994:	0d fd 07    	rcall     0x13b0 <___floatunsisf>
    1996:	02 00 20    	mov.w     #0x0, w2
    1998:	03 f8 23    	mov.w     #0x3f80, w3
    199a:	4c fc 07    	rcall     0x1234 <___addsf3>
    199c:	00 01 be    	mov.d     w0, w2
    199e:	08 00 be    	mov.d     w8, w0
    19a0:	5c fd 07    	rcall     0x145a <___mulsf3>
}
    19a2:	4f 04 be    	mov.d     [--w15], w8
    19a4:	00 80 fa    	ulnk      
    19a6:	00 00 06    	return    

000019a8 <_timer_start>:

void timer_start(_TIMER *self) {
    19a8:	02 00 fa    	lnk       #0x2
    19aa:	00 0f 78    	mov.w     w0, [w14]
    timer_lower(self);
    19ac:	1e 00 78    	mov.w     [w14], w0
    19ae:	2b 00 07    	rcall     0x1a06 <_timer_lower> <L0> <.LFB16> <.LFE15>
    poke(self->TMRx, 0);
    19b0:	1e 00 78    	mov.w     [w14], w0
    19b2:	20 00 90    	mov.w     [w0+4], w0
    19b4:	80 00 eb    	clr.w     w1
    19b6:	01 08 78    	mov.w     w1, [w0]
    bitset(self->TxCON, 15);
    19b8:	1e 00 78    	mov.w     [w14], w0
    19ba:	10 00 78    	mov.w     [w0], w0
    19bc:	9e 00 78    	mov.w     [w14], w1
    19be:	91 00 78    	mov.w     [w1], w1
    19c0:	11 01 78    	mov.w     [w1], w2
    19c2:	01 00 28    	mov.w     #0x8000, w1
    19c4:	82 80 70    	ior.w     w1, w2, w1
    19c6:	01 08 78    	mov.w     w1, [w0]
}
    19c8:	00 80 fa    	ulnk      
    19ca:	00 00 06    	return    

000019cc <_timer_stop>:

void timer_stop(_TIMER *self) {
    19cc:	02 00 fa    	lnk       #0x2
    19ce:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->TxCON, 15);
    19d0:	1e 00 78    	mov.w     [w14], w0
    19d2:	10 00 78    	mov.w     [w0], w0
    19d4:	9e 00 78    	mov.w     [w14], w1
    19d6:	91 00 78    	mov.w     [w1], w1
    19d8:	11 01 78    	mov.w     [w1], w2
    19da:	f1 ff 27    	mov.w     #0x7fff, w1
    19dc:	81 00 61    	and.w     w2, w1, w1
    19de:	01 08 78    	mov.w     w1, [w0]
}
    19e0:	00 80 fa    	ulnk      
    19e2:	00 00 06    	return    

000019e4 <_timer_flag>:

uint16_t timer_flag(_TIMER *self) {
    19e4:	02 00 fa    	lnk       #0x2
    19e6:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->IFSy, self->flagbit);
    19e8:	1e 00 78    	mov.w     [w14], w0
    19ea:	30 00 90    	mov.w     [w0+6], w0
    19ec:	90 00 78    	mov.w     [w0], w1
    19ee:	1e 00 78    	mov.w     [w14], w0
    19f0:	20 48 90    	mov.b     [w0+10], w0
    19f2:	00 80 fb    	ze        w0, w0
    19f4:	12 00 20    	mov.w     #0x1, w2
    19f6:	00 10 dd    	sl.w      w2, w0, w0
    19f8:	00 80 60    	and.w     w1, w0, w0
    19fa:	00 f0 a7    	btsc.w    w0, #0xf
    19fc:	00 00 ea    	neg.w     w0, w0
    19fe:	00 00 ea    	neg.w     w0, w0
    1a00:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    1a02:	00 80 fa    	ulnk      
    1a04:	00 00 06    	return    

00001a06 <_timer_lower>:

void timer_lower(_TIMER *self) {
    1a06:	02 00 fa    	lnk       #0x2
    1a08:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IFSy, self->flagbit);
    1a0a:	1e 00 78    	mov.w     [w14], w0
    1a0c:	30 00 90    	mov.w     [w0+6], w0
    1a0e:	9e 00 78    	mov.w     [w14], w1
    1a10:	b1 00 90    	mov.w     [w1+6], w1
    1a12:	11 01 78    	mov.w     [w1], w2
    1a14:	9e 00 78    	mov.w     [w14], w1
    1a16:	a1 48 90    	mov.b     [w1+10], w1
    1a18:	81 80 fb    	ze        w1, w1
    1a1a:	13 00 20    	mov.w     #0x1, w3
    1a1c:	81 18 dd    	sl.w      w3, w1, w1
    1a1e:	81 80 ea    	com.w     w1, w1
    1a20:	81 00 61    	and.w     w2, w1, w1
    1a22:	01 08 78    	mov.w     w1, [w0]
}
    1a24:	00 80 fa    	ulnk      
    1a26:	00 00 06    	return    

00001a28 <_timer_read>:

uint16_t timer_read(_TIMER *self) {
    1a28:	02 00 fa    	lnk       #0x2
    1a2a:	00 0f 78    	mov.w     w0, [w14]
    return peek(self->TMRx);
    1a2c:	1e 00 78    	mov.w     [w14], w0
    1a2e:	20 00 90    	mov.w     [w0+4], w0
    1a30:	10 00 78    	mov.w     [w0], w0
}
    1a32:	00 80 fa    	ulnk      
    1a34:	00 00 06    	return    

00001a36 <_timer_enableInterrupt>:

void timer_enableInterrupt(_TIMER *self) {
    1a36:	02 00 fa    	lnk       #0x2
    1a38:	00 0f 78    	mov.w     w0, [w14]
    bitset(self->IECy, self->flagbit);
    1a3a:	1e 00 78    	mov.w     [w14], w0
    1a3c:	40 00 90    	mov.w     [w0+8], w0
    1a3e:	9e 00 78    	mov.w     [w14], w1
    1a40:	c1 00 90    	mov.w     [w1+8], w1
    1a42:	11 01 78    	mov.w     [w1], w2
    1a44:	9e 00 78    	mov.w     [w14], w1
    1a46:	a1 48 90    	mov.b     [w1+10], w1
    1a48:	81 80 fb    	ze        w1, w1
    1a4a:	13 00 20    	mov.w     #0x1, w3
    1a4c:	81 18 dd    	sl.w      w3, w1, w1
    1a4e:	82 80 70    	ior.w     w1, w2, w1
    1a50:	01 08 78    	mov.w     w1, [w0]
}
    1a52:	00 80 fa    	ulnk      
    1a54:	00 00 06    	return    

00001a56 <_timer_disableInterrupt>:

void timer_disableInterrupt(_TIMER *self) {
    1a56:	02 00 fa    	lnk       #0x2
    1a58:	00 0f 78    	mov.w     w0, [w14]
    bitclear(self->IECy, self->flagbit);
    1a5a:	1e 00 78    	mov.w     [w14], w0
    1a5c:	40 00 90    	mov.w     [w0+8], w0
    1a5e:	9e 00 78    	mov.w     [w14], w1
    1a60:	c1 00 90    	mov.w     [w1+8], w1
    1a62:	11 01 78    	mov.w     [w1], w2
    1a64:	9e 00 78    	mov.w     [w14], w1
    1a66:	a1 48 90    	mov.b     [w1+10], w1
    1a68:	81 80 fb    	ze        w1, w1
    1a6a:	13 00 20    	mov.w     #0x1, w3
    1a6c:	81 18 dd    	sl.w      w3, w1, w1
    1a6e:	81 80 ea    	com.w     w1, w1
    1a70:	81 00 61    	and.w     w2, w1, w1
    1a72:	01 08 78    	mov.w     w1, [w0]
}
    1a74:	00 80 fa    	ulnk      
    1a76:	00 00 06    	return    

00001a78 <_timer_every>:

void timer_every(_TIMER *self, float interval, void (*callback)(_TIMER *self)) {
    1a78:	08 00 fa    	lnk       #0x8
    1a7a:	00 0f 78    	mov.w     w0, [w14]
    1a7c:	12 07 98    	mov.w     w2, [w14+2]
    1a7e:	23 07 98    	mov.w     w3, [w14+4]
    1a80:	31 07 98    	mov.w     w1, [w14+6]
    timer_disableInterrupt(self);
    1a82:	1e 00 78    	mov.w     [w14], w0
    1a84:	e8 ff 07    	rcall     0x1a56 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, interval);
    1a86:	1e 01 90    	mov.w     [w14+2], w2
    1a88:	ae 01 90    	mov.w     [w14+4], w3
    1a8a:	1e 00 78    	mov.w     [w14], w0
    1a8c:	be fe 07    	rcall     0x180a <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = 0;
    1a8e:	1e 00 78    	mov.w     [w14], w0
    1a90:	80 00 eb    	clr.w     w1
    1a92:	01 08 98    	mov.w     w1, [w0+16]
    self->every = callback;
    1a94:	1e 00 78    	mov.w     [w14], w0
    1a96:	be 00 90    	mov.w     [w14+6], w1
    1a98:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    1a9a:	1e 00 78    	mov.w     [w14], w0
    1a9c:	80 00 eb    	clr.w     w1
    1a9e:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    1aa0:	1e 00 78    	mov.w     [w14], w0
    1aa2:	c9 ff 07    	rcall     0x1a36 <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    1aa4:	1e 00 78    	mov.w     [w14], w0
    1aa6:	80 ff 07    	rcall     0x19a8 <_timer_start> <L0> <.LFB13> <.LFE12>
}
    1aa8:	00 80 fa    	ulnk      
    1aaa:	00 00 06    	return    

00001aac <_timer_after>:

void timer_after(_TIMER *self, float delay, uint16_t num_times, 
                 void (*callback)(_TIMER *self)) {
    1aac:	0a 00 fa    	lnk       #0xa
    1aae:	00 0f 78    	mov.w     w0, [w14]
    1ab0:	12 07 98    	mov.w     w2, [w14+2]
    1ab2:	23 07 98    	mov.w     w3, [w14+4]
    1ab4:	31 07 98    	mov.w     w1, [w14+6]
    1ab6:	44 07 98    	mov.w     w4, [w14+8]
    timer_disableInterrupt(self);
    1ab8:	1e 00 78    	mov.w     [w14], w0
    1aba:	cd ff 07    	rcall     0x1a56 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_setPeriod(self, delay);
    1abc:	1e 01 90    	mov.w     [w14+2], w2
    1abe:	ae 01 90    	mov.w     [w14+4], w3
    1ac0:	1e 00 78    	mov.w     [w14], w0
    1ac2:	a3 fe 07    	rcall     0x180a <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
    self->aftercount = num_times;
    1ac4:	1e 00 78    	mov.w     [w14], w0
    1ac6:	be 00 90    	mov.w     [w14+6], w1
    1ac8:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    1aca:	1e 00 78    	mov.w     [w14], w0
    1acc:	80 00 eb    	clr.w     w1
    1ace:	11 08 98    	mov.w     w1, [w0+18]
    self->after = callback;
    1ad0:	1e 00 78    	mov.w     [w14], w0
    1ad2:	ce 00 90    	mov.w     [w14+8], w1
    1ad4:	21 08 98    	mov.w     w1, [w0+20]
    timer_enableInterrupt(self);
    1ad6:	1e 00 78    	mov.w     [w14], w0
    1ad8:	ae ff 07    	rcall     0x1a36 <_timer_enableInterrupt> <L0> <.LFB18> <.LFE17>
    timer_start(self);
    1ada:	1e 00 78    	mov.w     [w14], w0
    1adc:	65 ff 07    	rcall     0x19a8 <_timer_start> <L0> <.LFB13> <.LFE12>
}
    1ade:	00 80 fa    	ulnk      
    1ae0:	00 00 06    	return    

00001ae2 <_timer_cancel>:

void timer_cancel(_TIMER *self) {
    1ae2:	02 00 fa    	lnk       #0x2
    1ae4:	00 0f 78    	mov.w     w0, [w14]
    timer_disableInterrupt(self);
    1ae6:	1e 00 78    	mov.w     [w14], w0
    1ae8:	b6 ff 07    	rcall     0x1a56 <_timer_disableInterrupt> <L0> <.LFB19> <.LFE18>
    timer_lower(self);
    1aea:	1e 00 78    	mov.w     [w14], w0
    1aec:	8c ff 07    	rcall     0x1a06 <_timer_lower> <L0> <.LFB16> <.LFE15>
    timer_stop(self);
    1aee:	1e 00 78    	mov.w     [w14], w0
    1af0:	6d ff 07    	rcall     0x19cc <_timer_stop> <L0> <.LFB14> <.LFE13>
    self->aftercount = 0;
    1af2:	1e 00 78    	mov.w     [w14], w0
    1af4:	80 00 eb    	clr.w     w1
    1af6:	01 08 98    	mov.w     w1, [w0+16]
    self->every = NULL;
    1af8:	1e 00 78    	mov.w     [w14], w0
    1afa:	80 00 eb    	clr.w     w1
    1afc:	11 08 98    	mov.w     w1, [w0+18]
    self->after = NULL;
    1afe:	1e 00 78    	mov.w     [w14], w0
    1b00:	80 00 eb    	clr.w     w1
    1b02:	21 08 98    	mov.w     w1, [w0+20]
}
    1b04:	00 80 fa    	ulnk      
    1b06:	00 00 06    	return    

00001b08 <_init_spi>:
    1b08:	00 00 fa    	lnk       #0x0
    1b0a:	80 00 20    	mov.w     #0x8, w0
    1b0c:	80 1f 78    	mov.w     w0, [w15++]
    1b0e:	77 00 20    	mov.w     #0x7, w7
    1b10:	00 43 eb    	clr.b     w6
    1b12:	85 6a 20    	mov.w     #0x6a8, w5
    1b14:	84 24 20    	mov.w     #0x248, w4
    1b16:	43 24 20    	mov.w     #0x244, w3
    1b18:	22 24 20    	mov.w     #0x242, w2
    1b1a:	01 24 20    	mov.w     #0x240, w1
    1b1c:	80 af 20    	mov.w     #0xaf8, w0
    1b1e:	1b 00 07    	rcall     0x1b56 <_spi_init> <L0> <.LFB1> <.LFE0>
    1b20:	8f 87 e9    	dec2.w    w15, w15
    1b22:	b0 00 20    	mov.w     #0xb, w0
    1b24:	80 1f 78    	mov.w     w0, [w15++]
    1b26:	a7 00 20    	mov.w     #0xa, w7
    1b28:	00 43 eb    	clr.b     w6
    1b2a:	c5 6a 20    	mov.w     #0x6ac, w5
    1b2c:	84 26 20    	mov.w     #0x268, w4
    1b2e:	43 26 20    	mov.w     #0x264, w3
    1b30:	22 26 20    	mov.w     #0x262, w2
    1b32:	01 26 20    	mov.w     #0x260, w1
    1b34:	e0 b0 20    	mov.w     #0xb0e, w0
    1b36:	0f 00 07    	rcall     0x1b56 <_spi_init> <L0> <.LFB1> <.LFE0>
    1b38:	8f 87 e9    	dec2.w    w15, w15
    1b3a:	10 02 20    	mov.w     #0x21, w0
    1b3c:	80 1f 78    	mov.w     w0, [w15++]
    1b3e:	07 02 20    	mov.w     #0x20, w7
    1b40:	00 43 eb    	clr.b     w6
    1b42:	85 6b 20    	mov.w     #0x6b8, w5
    1b44:	84 28 20    	mov.w     #0x288, w4
    1b46:	43 28 20    	mov.w     #0x284, w3
    1b48:	22 28 20    	mov.w     #0x282, w2
    1b4a:	01 28 20    	mov.w     #0x280, w1
    1b4c:	40 b2 20    	mov.w     #0xb24, w0
    1b4e:	03 00 07    	rcall     0x1b56 <_spi_init> <L0> <.LFB1> <.LFE0>
    1b50:	8f 87 e9    	dec2.w    w15, w15
    1b52:	00 80 fa    	ulnk      
    1b54:	00 00 06    	return    

00001b56 <_spi_init>:
    1b56:	10 00 fa    	lnk       #0x10
    1b58:	00 0f 78    	mov.w     w0, [w14]
    1b5a:	11 07 98    	mov.w     w1, [w14+2]
    1b5c:	22 07 98    	mov.w     w2, [w14+4]
    1b5e:	33 07 98    	mov.w     w3, [w14+6]
    1b60:	44 07 98    	mov.w     w4, [w14+8]
    1b62:	55 07 98    	mov.w     w5, [w14+10]
    1b64:	46 4f 98    	mov.b     w6, [w14+12]
    1b66:	77 07 98    	mov.w     w7, [w14+14]
    1b68:	1e 00 78    	mov.w     [w14], w0
    1b6a:	9e 00 90    	mov.w     [w14+2], w1
    1b6c:	01 08 78    	mov.w     w1, [w0]
    1b6e:	1e 00 78    	mov.w     [w14], w0
    1b70:	ae 00 90    	mov.w     [w14+4], w1
    1b72:	11 00 98    	mov.w     w1, [w0+2]
    1b74:	1e 00 78    	mov.w     [w14], w0
    1b76:	be 00 90    	mov.w     [w14+6], w1
    1b78:	21 00 98    	mov.w     w1, [w0+4]
    1b7a:	1e 00 78    	mov.w     [w14], w0
    1b7c:	ce 00 90    	mov.w     [w14+8], w1
    1b7e:	31 00 98    	mov.w     w1, [w0+6]
    1b80:	1e 00 78    	mov.w     [w14], w0
    1b82:	de 00 90    	mov.w     [w14+10], w1
    1b84:	41 00 98    	mov.w     w1, [w0+8]
    1b86:	1e 00 78    	mov.w     [w14], w0
    1b88:	ce 48 90    	mov.b     [w14+12], w1
    1b8a:	21 48 98    	mov.b     w1, [w0+10]
    1b8c:	1e 00 78    	mov.w     [w14], w0
    1b8e:	fe 00 90    	mov.w     [w14+14], w1
    1b90:	61 00 98    	mov.w     w1, [w0+12]
    1b92:	1e 00 78    	mov.w     [w14], w0
    1b94:	ce b8 97    	mov.w     [w14-8], w1
    1b96:	71 00 98    	mov.w     w1, [w0+14]
    1b98:	1e 00 78    	mov.w     [w14], w0
    1b9a:	80 00 eb    	clr.w     w1
    1b9c:	01 08 98    	mov.w     w1, [w0+16]
    1b9e:	1e 00 78    	mov.w     [w14], w0
    1ba0:	80 00 eb    	clr.w     w1
    1ba2:	11 08 98    	mov.w     w1, [w0+18]
    1ba4:	1e 00 78    	mov.w     [w14], w0
    1ba6:	80 00 eb    	clr.w     w1
    1ba8:	21 08 98    	mov.w     w1, [w0+20]
    1baa:	00 80 fa    	ulnk      
    1bac:	00 00 06    	return    

00001bae <_spi_open>:
    1bae:	1a 00 fa    	lnk       #0x1a
    1bb0:	88 1f 78    	mov.w     w8, [w15++]
    1bb2:	60 07 98    	mov.w     w0, [w14+12]
    1bb4:	71 07 98    	mov.w     w1, [w14+14]
    1bb6:	02 0f 98    	mov.w     w2, [w14+16]
    1bb8:	13 0f 98    	mov.w     w3, [w14+18]
    1bba:	24 0f 98    	mov.w     w4, [w14+20]
    1bbc:	35 0f 98    	mov.w     w5, [w14+22]
    1bbe:	06 5f 98    	mov.b     w6, [w14+24]
    1bc0:	00 10 20    	mov.w     #0x100, w0
    1bc2:	20 07 98    	mov.w     w0, [w14+4]
    1bc4:	00 00 eb    	clr.w     w0
    1bc6:	30 07 98    	mov.w     w0, [w14+6]
    1bc8:	00 14 20    	mov.w     #0x140, w0
    1bca:	40 07 98    	mov.w     w0, [w14+8]
    1bcc:	00 04 20    	mov.w     #0x40, w0
    1bce:	50 07 98    	mov.w     w0, [w14+10]
    1bd0:	7e 00 90    	mov.w     [w14+14], w0
    1bd2:	60 00 90    	mov.w     [w0+12], w0
    1bd4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1bd6:	36 01 32    	bra       Z, 0x1e44 <.L21>
    1bd8:	0e 08 90    	mov.w     [w14+16], w0
    1bda:	60 00 90    	mov.w     [w0+12], w0
    1bdc:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1bde:	34 01 32    	bra       Z, 0x1e48 <.L22>
    1be0:	1e 08 90    	mov.w     [w14+18], w0
    1be2:	60 00 90    	mov.w     [w0+12], w0
    1be4:	e1 0f 40    	add.w     w0, #0x1, [w15]
    1be6:	32 01 32    	bra       Z, 0x1e4c <.L23>
    1be8:	7e 00 90    	mov.w     [w14+14], w0
    1bea:	00 08 90    	mov.w     [w0+16], w0
    1bec:	00 00 e0    	cp0.w     w0
    1bee:	97 00 3a    	bra       NZ, 0x1d1e <.L7>
    1bf0:	0e 08 90    	mov.w     [w14+16], w0
    1bf2:	00 08 90    	mov.w     [w0+16], w0
    1bf4:	00 00 e0    	cp0.w     w0
    1bf6:	93 00 3a    	bra       NZ, 0x1d1e <.L7>
    1bf8:	1e 08 90    	mov.w     [w14+18], w0
    1bfa:	00 08 90    	mov.w     [w0+16], w0
    1bfc:	00 00 e0    	cp0.w     w0
    1bfe:	8f 00 3a    	bra       NZ, 0x1d1e <.L7>
    1c00:	7e 00 90    	mov.w     [w14+14], w0
    1c02:	66 03 07    	rcall     0x22d0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    1c04:	0e 08 90    	mov.w     [w14+16], w0
    1c06:	8b 03 07    	rcall     0x231e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    1c08:	0e 08 90    	mov.w     [w14+16], w0
    1c0a:	e6 03 07    	rcall     0x23d8 <_pin_set> <L0> <.LFB8> <.LFE7>
    1c0c:	1e 08 90    	mov.w     [w14+18], w0
    1c0e:	87 03 07    	rcall     0x231e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    1c10:	1e 08 90    	mov.w     [w14+18], w0
    1c12:	f7 03 07    	rcall     0x2402 <_pin_clear> <L0> <.LFB9> <.LFE8>
    1c14:	6e 00 90    	mov.w     [w14+12], w0
    1c16:	fe 00 90    	mov.w     [w14+14], w1
    1c18:	01 08 98    	mov.w     w1, [w0+16]
    1c1a:	7e 00 90    	mov.w     [w14+14], w0
    1c1c:	ee 00 90    	mov.w     [w14+12], w1
    1c1e:	01 08 98    	mov.w     w1, [w0+16]
    1c20:	7e 00 90    	mov.w     [w14+14], w0
    1c22:	80 00 eb    	clr.w     w1
    1c24:	11 08 98    	mov.w     w1, [w0+18]
    1c26:	7e 00 90    	mov.w     [w14+14], w0
    1c28:	80 00 eb    	clr.w     w1
    1c2a:	21 08 98    	mov.w     w1, [w0+20]
    1c2c:	6e 00 90    	mov.w     [w14+12], w0
    1c2e:	8e 08 90    	mov.w     [w14+16], w1
    1c30:	11 08 98    	mov.w     w1, [w0+18]
    1c32:	0e 08 90    	mov.w     [w14+16], w0
    1c34:	ee 00 90    	mov.w     [w14+12], w1
    1c36:	01 08 98    	mov.w     w1, [w0+16]
    1c38:	0e 08 90    	mov.w     [w14+16], w0
    1c3a:	80 00 eb    	clr.w     w1
    1c3c:	11 08 98    	mov.w     w1, [w0+18]
    1c3e:	0e 08 90    	mov.w     [w14+16], w0
    1c40:	80 00 eb    	clr.w     w1
    1c42:	21 08 98    	mov.w     w1, [w0+20]
    1c44:	6e 00 90    	mov.w     [w14+12], w0
    1c46:	9e 08 90    	mov.w     [w14+18], w1
    1c48:	21 08 98    	mov.w     w1, [w0+20]
    1c4a:	1e 08 90    	mov.w     [w14+18], w0
    1c4c:	ee 00 90    	mov.w     [w14+12], w1
    1c4e:	01 08 98    	mov.w     w1, [w0+16]
    1c50:	1e 08 90    	mov.w     [w14+18], w0
    1c52:	80 00 eb    	clr.w     w1
    1c54:	11 08 98    	mov.w     w1, [w0+18]
    1c56:	1e 08 90    	mov.w     [w14+18], w0
    1c58:	80 00 eb    	clr.w     w1
    1c5a:	21 08 98    	mov.w     w1, [w0+20]
    1c5c:	11 3a 80    	mov.w     0x742, w1
    1c5e:	f0 0b 20    	mov.w     #0xbf, w0
    1c60:	00 81 60    	and.w     w1, w0, w2
    1c62:	60 04 20    	mov.w     #0x46, w0
    1c64:	71 05 20    	mov.w     #0x57, w1
    1c66:	23 74 20    	mov.w     #0x742, w3
    1c68:	80 49 78    	mov.b     w0, [w3]
    1c6a:	81 49 78    	mov.b     w1, [w3]
    1c6c:	82 49 78    	mov.b     w2, [w3]
    1c6e:	6e 00 90    	mov.w     [w14+12], w0
    1c70:	40 00 90    	mov.w     [w0+8], w0
    1c72:	ee 00 90    	mov.w     [w14+12], w1
    1c74:	c1 00 90    	mov.w     [w1+8], w1
    1c76:	11 01 78    	mov.w     [w1], w2
    1c78:	ee 00 90    	mov.w     [w14+12], w1
    1c7a:	a1 48 90    	mov.b     [w1+10], w1
    1c7c:	81 80 fb    	ze        w1, w1
    1c7e:	f3 03 20    	mov.w     #0x3f, w3
    1c80:	81 18 dd    	sl.w      w3, w1, w1
    1c82:	81 80 ea    	com.w     w1, w1
    1c84:	81 00 61    	and.w     w2, w1, w1
    1c86:	01 08 78    	mov.w     w1, [w0]
    1c88:	6e 00 90    	mov.w     [w14+12], w0
    1c8a:	40 00 90    	mov.w     [w0+8], w0
    1c8c:	ee 00 90    	mov.w     [w14+12], w1
    1c8e:	c1 00 90    	mov.w     [w1+8], w1
    1c90:	11 01 78    	mov.w     [w1], w2
    1c92:	fe 00 90    	mov.w     [w14+14], w1
    1c94:	e1 01 90    	mov.w     [w1+12], w3
    1c96:	ee 00 90    	mov.w     [w14+12], w1
    1c98:	a1 48 90    	mov.b     [w1+10], w1
    1c9a:	81 80 fb    	ze        w1, w1
    1c9c:	81 18 dd    	sl.w      w3, w1, w1
    1c9e:	82 80 70    	ior.w     w1, w2, w1
    1ca0:	01 08 78    	mov.w     w1, [w0]
    1ca2:	0e 08 90    	mov.w     [w14+16], w0
    1ca4:	70 00 90    	mov.w     [w0+14], w0
    1ca6:	8e 08 90    	mov.w     [w14+16], w1
    1ca8:	f1 00 90    	mov.w     [w1+14], w1
    1caa:	11 01 78    	mov.w     [w1], w2
    1cac:	8e 08 90    	mov.w     [w14+16], w1
    1cae:	a1 48 90    	mov.b     [w1+10], w1
    1cb0:	81 80 fb    	ze        w1, w1
    1cb2:	f3 03 20    	mov.w     #0x3f, w3
    1cb4:	81 18 dd    	sl.w      w3, w1, w1
    1cb6:	81 80 ea    	com.w     w1, w1
    1cb8:	81 00 61    	and.w     w2, w1, w1
    1cba:	01 08 78    	mov.w     w1, [w0]
    1cbc:	0e 08 90    	mov.w     [w14+16], w0
    1cbe:	70 00 90    	mov.w     [w0+14], w0
    1cc0:	8e 08 90    	mov.w     [w14+16], w1
    1cc2:	f1 00 90    	mov.w     [w1+14], w1
    1cc4:	11 01 78    	mov.w     [w1], w2
    1cc6:	ee 00 90    	mov.w     [w14+12], w1
    1cc8:	e1 01 90    	mov.w     [w1+12], w3
    1cca:	8e 08 90    	mov.w     [w14+16], w1
    1ccc:	a1 48 90    	mov.b     [w1+10], w1
    1cce:	81 80 fb    	ze        w1, w1
    1cd0:	81 18 dd    	sl.w      w3, w1, w1
    1cd2:	82 80 70    	ior.w     w1, w2, w1
    1cd4:	01 08 78    	mov.w     w1, [w0]
    1cd6:	1e 08 90    	mov.w     [w14+18], w0
    1cd8:	70 00 90    	mov.w     [w0+14], w0
    1cda:	9e 08 90    	mov.w     [w14+18], w1
    1cdc:	f1 00 90    	mov.w     [w1+14], w1
    1cde:	11 01 78    	mov.w     [w1], w2
    1ce0:	9e 08 90    	mov.w     [w14+18], w1
    1ce2:	a1 48 90    	mov.b     [w1+10], w1
    1ce4:	81 80 fb    	ze        w1, w1
    1ce6:	f3 03 20    	mov.w     #0x3f, w3
    1ce8:	81 18 dd    	sl.w      w3, w1, w1
    1cea:	81 80 ea    	com.w     w1, w1
    1cec:	81 00 61    	and.w     w2, w1, w1
    1cee:	01 08 78    	mov.w     w1, [w0]
    1cf0:	1e 08 90    	mov.w     [w14+18], w0
    1cf2:	70 00 90    	mov.w     [w0+14], w0
    1cf4:	9e 08 90    	mov.w     [w14+18], w1
    1cf6:	f1 00 90    	mov.w     [w1+14], w1
    1cf8:	11 01 78    	mov.w     [w1], w2
    1cfa:	ee 00 90    	mov.w     [w14+12], w1
    1cfc:	f1 01 90    	mov.w     [w1+14], w3
    1cfe:	9e 08 90    	mov.w     [w14+18], w1
    1d00:	a1 48 90    	mov.b     [w1+10], w1
    1d02:	81 80 fb    	ze        w1, w1
    1d04:	81 18 dd    	sl.w      w3, w1, w1
    1d06:	82 80 70    	ior.w     w1, w2, w1
    1d08:	01 08 78    	mov.w     w1, [w0]
    1d0a:	10 3a 80    	mov.w     0x742, w0
    1d0c:	00 01 78    	mov.w     w0, w2
    1d0e:	02 60 a0    	bset.w    w2, #0x6
    1d10:	60 04 20    	mov.w     #0x46, w0
    1d12:	71 05 20    	mov.w     #0x57, w1
    1d14:	23 74 20    	mov.w     #0x742, w3
    1d16:	80 49 78    	mov.b     w0, [w3]
    1d18:	81 49 78    	mov.b     w1, [w3]
    1d1a:	82 49 78    	mov.b     w2, [w3]
    1d1c:	0f 00 37    	bra       0x1d3c <.L8>

00001d1e <.L7>:
    1d1e:	6e 00 90    	mov.w     [w14+12], w0
    1d20:	80 08 90    	mov.w     [w0+16], w1
    1d22:	7e 00 90    	mov.w     [w14+14], w0
    1d24:	80 8f 50    	sub.w     w1, w0, [w15]
    1d26:	94 00 3a    	bra       NZ, 0x1e50 <.L24>
    1d28:	6e 00 90    	mov.w     [w14+12], w0
    1d2a:	90 08 90    	mov.w     [w0+18], w1
    1d2c:	0e 08 90    	mov.w     [w14+16], w0
    1d2e:	80 8f 50    	sub.w     w1, w0, [w15]
    1d30:	91 00 3a    	bra       NZ, 0x1e54 <.L25>
    1d32:	6e 00 90    	mov.w     [w14+12], w0
    1d34:	a0 08 90    	mov.w     [w0+20], w1
    1d36:	1e 08 90    	mov.w     [w14+18], w0
    1d38:	80 8f 50    	sub.w     w1, w0, [w15]
    1d3a:	8e 00 3a    	bra       NZ, 0x1e58 <.L26>

00001d3c <.L8>:
    1d3c:	18 c0 b3    	mov.b     #0x1, w8
    1d3e:	02 40 22    	mov.w     #0x2400, w2
    1d40:	43 af 24    	mov.w     #0x4af4, w3
    1d42:	2e 08 90    	mov.w     [w14+20], w0
    1d44:	be 08 90    	mov.w     [w14+22], w1
    1d46:	17 fb 07    	rcall     0x1376 <___gesf2> <___gtsf2>
    1d48:	00 00 e0    	cp0.w     w0
    1d4a:	01 00 3c    	bra       GT, 0x1d4e <.L10>
    1d4c:	00 44 eb    	clr.b     w8

00001d4e <.L10>:
    1d4e:	08 04 e0    	cp0.b     w8
    1d50:	04 00 32    	bra       Z, 0x1d5a <.L11>
    1d52:	00 40 22    	mov.w     #0x2400, w0
    1d54:	41 af 24    	mov.w     #0x4af4, w1
    1d56:	20 0f 98    	mov.w     w0, [w14+20]
    1d58:	31 0f 98    	mov.w     w1, [w14+22]

00001d5a <.L11>:
    1d5a:	18 c0 b3    	mov.b     #0x1, w8
    1d5c:	02 40 22    	mov.w     #0x2400, w2
    1d5e:	43 6f 24    	mov.w     #0x46f4, w3
    1d60:	2e 08 90    	mov.w     [w14+20], w0
    1d62:	be 08 90    	mov.w     [w14+22], w1
    1d64:	06 fb 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    1d66:	00 00 e0    	cp0.w     w0
    1d68:	01 00 35    	bra       LT, 0x1d6c <.L12>
    1d6a:	00 44 eb    	clr.b     w8

00001d6c <.L12>:
    1d6c:	08 04 e0    	cp0.b     w8
    1d6e:	04 00 32    	bra       Z, 0x1d78 <.L13>
    1d70:	00 40 22    	mov.w     #0x2400, w0
    1d72:	41 6f 24    	mov.w     #0x46f4, w1
    1d74:	20 0f 98    	mov.w     w0, [w14+20]
    1d76:	31 0f 98    	mov.w     w1, [w14+22]

00001d78 <.L13>:
    1d78:	18 c0 b3    	mov.b     #0x1, w8
    1d7a:	02 40 22    	mov.w     #0x2400, w2
    1d7c:	43 7f 24    	mov.w     #0x47f4, w3
    1d7e:	2e 08 90    	mov.w     [w14+20], w0
    1d80:	be 08 90    	mov.w     [w14+22], w1
    1d82:	f7 fa 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    1d84:	00 00 e0    	cp0.w     w0
    1d86:	01 00 34    	bra       LE, 0x1d8a <.L14>
    1d88:	00 44 eb    	clr.b     w8

00001d8a <.L14>:
    1d8a:	08 04 e0    	cp0.b     w8
    1d8c:	0a 00 32    	bra       Z, 0x1da2 <.L15>
    1d8e:	02 00 20    	mov.w     #0x0, w2
    1d90:	03 28 24    	mov.w     #0x4280, w3
    1d92:	2e 08 90    	mov.w     [w14+20], w0
    1d94:	be 08 90    	mov.w     [w14+22], w1
    1d96:	61 fb 07    	rcall     0x145a <___mulsf3>
    1d98:	20 0f 98    	mov.w     w0, [w14+20]
    1d9a:	31 0f 98    	mov.w     w1, [w14+22]
    1d9c:	00 00 eb    	clr.w     w0
    1d9e:	00 0f 78    	mov.w     w0, [w14]
    1da0:	2c 00 37    	bra       0x1dfa <.L16>

00001da2 <.L15>:
    1da2:	18 c0 b3    	mov.b     #0x1, w8
    1da4:	02 40 22    	mov.w     #0x2400, w2
    1da6:	43 8f 24    	mov.w     #0x48f4, w3
    1da8:	2e 08 90    	mov.w     [w14+20], w0
    1daa:	be 08 90    	mov.w     [w14+22], w1
    1dac:	e2 fa 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    1dae:	00 00 e0    	cp0.w     w0
    1db0:	01 00 34    	bra       LE, 0x1db4 <.L17>
    1db2:	00 44 eb    	clr.b     w8

00001db4 <.L17>:
    1db4:	08 04 e0    	cp0.b     w8
    1db6:	0a 00 32    	bra       Z, 0x1dcc <.L18>
    1db8:	02 00 20    	mov.w     #0x0, w2
    1dba:	03 18 24    	mov.w     #0x4180, w3
    1dbc:	2e 08 90    	mov.w     [w14+20], w0
    1dbe:	be 08 90    	mov.w     [w14+22], w1
    1dc0:	4c fb 07    	rcall     0x145a <___mulsf3>
    1dc2:	20 0f 98    	mov.w     w0, [w14+20]
    1dc4:	31 0f 98    	mov.w     w1, [w14+22]
    1dc6:	10 00 20    	mov.w     #0x1, w0
    1dc8:	00 0f 78    	mov.w     w0, [w14]
    1dca:	17 00 37    	bra       0x1dfa <.L16>

00001dcc <.L18>:
    1dcc:	18 c0 b3    	mov.b     #0x1, w8
    1dce:	02 40 22    	mov.w     #0x2400, w2
    1dd0:	43 9f 24    	mov.w     #0x49f4, w3
    1dd2:	2e 08 90    	mov.w     [w14+20], w0
    1dd4:	be 08 90    	mov.w     [w14+22], w1
    1dd6:	cd fa 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    1dd8:	00 00 e0    	cp0.w     w0
    1dda:	01 00 34    	bra       LE, 0x1dde <.L19>
    1ddc:	00 44 eb    	clr.b     w8

00001dde <.L19>:
    1dde:	08 04 e0    	cp0.b     w8
    1de0:	0a 00 32    	bra       Z, 0x1df6 <.L20>
    1de2:	02 00 20    	mov.w     #0x0, w2
    1de4:	03 08 24    	mov.w     #0x4080, w3
    1de6:	2e 08 90    	mov.w     [w14+20], w0
    1de8:	be 08 90    	mov.w     [w14+22], w1
    1dea:	37 fb 07    	rcall     0x145a <___mulsf3>
    1dec:	20 0f 98    	mov.w     w0, [w14+20]
    1dee:	31 0f 98    	mov.w     w1, [w14+22]
    1df0:	20 00 20    	mov.w     #0x2, w0
    1df2:	00 0f 78    	mov.w     w0, [w14]
    1df4:	02 00 37    	bra       0x1dfa <.L16>

00001df6 <.L20>:
    1df6:	30 00 20    	mov.w     #0x3, w0
    1df8:	00 0f 78    	mov.w     w0, [w14]

00001dfa <.L16>:
    1dfa:	2e 09 90    	mov.w     [w14+20], w2
    1dfc:	be 09 90    	mov.w     [w14+22], w3
    1dfe:	00 40 22    	mov.w     #0x2400, w0
    1e00:	41 b7 24    	mov.w     #0x4b74, w1
    1e02:	75 fa 07    	rcall     0x12ee <___divsf3>
    1e04:	02 00 20    	mov.w     #0x0, w2
    1e06:	03 f0 23    	mov.w     #0x3f00, w3
    1e08:	15 fa 07    	rcall     0x1234 <___addsf3>
    1e0a:	b7 fa 07    	rcall     0x137a <___fixunssfsi>
    1e0c:	10 07 98    	mov.w     w0, [w14+2]
    1e0e:	1e 00 90    	mov.w     [w14+2], w0
    1e10:	68 00 10    	subr.w    w0, #0x8, w0
    1e12:	42 00 dd    	sl.w      w0, #0x2, w0
    1e14:	10 07 98    	mov.w     w0, [w14+2]
    1e16:	6e 00 90    	mov.w     [w14+12], w0
    1e18:	90 00 90    	mov.w     [w0+2], w1
    1e1a:	0e 58 90    	mov.b     [w14+24], w0
    1e1c:	00 80 fb    	ze        w0, w0
    1e1e:	63 00 60    	and.w     w0, #0x3, w0
    1e20:	00 00 40    	add.w     w0, w0, w0
    1e22:	64 01 47    	add.w     w14, #0x4, w2
    1e24:	00 00 41    	add.w     w2, w0, w0
    1e26:	10 00 78    	mov.w     [w0], w0
    1e28:	1e 01 70    	ior.w     w0, [w14], w2
    1e2a:	1e 00 90    	mov.w     [w14+2], w0
    1e2c:	02 00 70    	ior.w     w0, w2, w0
    1e2e:	00 50 a0    	bset.w    w0, #0x5
    1e30:	80 08 78    	mov.w     w0, [w1]
    1e32:	6e 00 90    	mov.w     [w14+12], w0
    1e34:	20 00 90    	mov.w     [w0+4], w0
    1e36:	80 00 eb    	clr.w     w1
    1e38:	01 08 78    	mov.w     w1, [w0]
    1e3a:	6e 00 90    	mov.w     [w14+12], w0
    1e3c:	10 00 78    	mov.w     [w0], w0
    1e3e:	01 00 28    	mov.w     #0x8000, w1
    1e40:	01 08 78    	mov.w     w1, [w0]
    1e42:	0b 00 37    	bra       0x1e5a <.L3>

00001e44 <.L21>:
    1e44:	00 00 00    	nop       
    1e46:	09 00 37    	bra       0x1e5a <.L3>

00001e48 <.L22>:
    1e48:	00 00 00    	nop       
    1e4a:	07 00 37    	bra       0x1e5a <.L3>

00001e4c <.L23>:
    1e4c:	00 00 00    	nop       
    1e4e:	05 00 37    	bra       0x1e5a <.L3>

00001e50 <.L24>:
    1e50:	00 00 00    	nop       
    1e52:	03 00 37    	bra       0x1e5a <.L3>

00001e54 <.L25>:
    1e54:	00 00 00    	nop       
    1e56:	01 00 37    	bra       0x1e5a <.L3>

00001e58 <.L26>:
    1e58:	00 00 00    	nop       

00001e5a <.L3>:
    1e5a:	4f 04 78    	mov.w     [--w15], w8
    1e5c:	00 80 fa    	ulnk      
    1e5e:	00 00 06    	return    

00001e60 <_spi_close>:
    1e60:	02 00 fa    	lnk       #0x2
    1e62:	00 0f 78    	mov.w     w0, [w14]
    1e64:	1e 00 78    	mov.w     [w14], w0
    1e66:	10 00 78    	mov.w     [w0], w0
    1e68:	80 00 eb    	clr.w     w1
    1e6a:	01 08 78    	mov.w     w1, [w0]
    1e6c:	1e 00 78    	mov.w     [w14], w0
    1e6e:	10 00 90    	mov.w     [w0+2], w0
    1e70:	80 00 eb    	clr.w     w1
    1e72:	01 08 78    	mov.w     w1, [w0]
    1e74:	1e 00 78    	mov.w     [w14], w0
    1e76:	20 00 90    	mov.w     [w0+4], w0
    1e78:	80 00 eb    	clr.w     w1
    1e7a:	01 08 78    	mov.w     w1, [w0]
    1e7c:	1e 00 78    	mov.w     [w14], w0
    1e7e:	00 08 90    	mov.w     [w0+16], w0
    1e80:	00 00 e0    	cp0.w     w0
    1e82:	28 00 32    	bra       Z, 0x1ed4 <.L28>
    1e84:	11 3a 80    	mov.w     0x742, w1
    1e86:	f0 0b 20    	mov.w     #0xbf, w0
    1e88:	00 81 60    	and.w     w1, w0, w2
    1e8a:	60 04 20    	mov.w     #0x46, w0
    1e8c:	71 05 20    	mov.w     #0x57, w1
    1e8e:	23 74 20    	mov.w     #0x742, w3
    1e90:	80 49 78    	mov.b     w0, [w3]
    1e92:	81 49 78    	mov.b     w1, [w3]
    1e94:	82 49 78    	mov.b     w2, [w3]
    1e96:	1e 00 78    	mov.w     [w14], w0
    1e98:	40 00 90    	mov.w     [w0+8], w0
    1e9a:	9e 00 78    	mov.w     [w14], w1
    1e9c:	c1 00 90    	mov.w     [w1+8], w1
    1e9e:	11 01 78    	mov.w     [w1], w2
    1ea0:	9e 00 78    	mov.w     [w14], w1
    1ea2:	a1 48 90    	mov.b     [w1+10], w1
    1ea4:	81 80 fb    	ze        w1, w1
    1ea6:	f3 03 20    	mov.w     #0x3f, w3
    1ea8:	81 18 dd    	sl.w      w3, w1, w1
    1eaa:	82 80 70    	ior.w     w1, w2, w1
    1eac:	01 08 78    	mov.w     w1, [w0]
    1eae:	10 3a 80    	mov.w     0x742, w0
    1eb0:	00 01 78    	mov.w     w0, w2
    1eb2:	02 60 a0    	bset.w    w2, #0x6
    1eb4:	60 04 20    	mov.w     #0x46, w0
    1eb6:	71 05 20    	mov.w     #0x57, w1
    1eb8:	23 74 20    	mov.w     #0x742, w3
    1eba:	80 49 78    	mov.b     w0, [w3]
    1ebc:	81 49 78    	mov.b     w1, [w3]
    1ebe:	82 49 78    	mov.b     w2, [w3]
    1ec0:	1e 00 78    	mov.w     [w14], w0
    1ec2:	00 08 90    	mov.w     [w0+16], w0
    1ec4:	80 00 eb    	clr.w     w1
    1ec6:	01 08 98    	mov.w     w1, [w0+16]
    1ec8:	1e 00 78    	mov.w     [w14], w0
    1eca:	00 08 90    	mov.w     [w0+16], w0
    1ecc:	01 02 07    	rcall     0x22d0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    1ece:	1e 00 78    	mov.w     [w14], w0
    1ed0:	80 00 eb    	clr.w     w1
    1ed2:	01 08 98    	mov.w     w1, [w0+16]

00001ed4 <.L28>:
    1ed4:	1e 00 78    	mov.w     [w14], w0
    1ed6:	10 08 90    	mov.w     [w0+18], w0
    1ed8:	00 00 e0    	cp0.w     w0
    1eda:	2f 00 32    	bra       Z, 0x1f3a <.L29>
    1edc:	11 3a 80    	mov.w     0x742, w1
    1ede:	f0 0b 20    	mov.w     #0xbf, w0
    1ee0:	00 81 60    	and.w     w1, w0, w2
    1ee2:	60 04 20    	mov.w     #0x46, w0
    1ee4:	71 05 20    	mov.w     #0x57, w1
    1ee6:	23 74 20    	mov.w     #0x742, w3
    1ee8:	80 49 78    	mov.b     w0, [w3]
    1eea:	81 49 78    	mov.b     w1, [w3]
    1eec:	82 49 78    	mov.b     w2, [w3]
    1eee:	1e 00 78    	mov.w     [w14], w0
    1ef0:	10 08 90    	mov.w     [w0+18], w0
    1ef2:	70 00 90    	mov.w     [w0+14], w0
    1ef4:	9e 00 78    	mov.w     [w14], w1
    1ef6:	91 08 90    	mov.w     [w1+18], w1
    1ef8:	f1 00 90    	mov.w     [w1+14], w1
    1efa:	11 01 78    	mov.w     [w1], w2
    1efc:	9e 00 78    	mov.w     [w14], w1
    1efe:	91 08 90    	mov.w     [w1+18], w1
    1f00:	a1 48 90    	mov.b     [w1+10], w1
    1f02:	81 80 fb    	ze        w1, w1
    1f04:	f3 03 20    	mov.w     #0x3f, w3
    1f06:	81 18 dd    	sl.w      w3, w1, w1
    1f08:	81 80 ea    	com.w     w1, w1
    1f0a:	81 00 61    	and.w     w2, w1, w1
    1f0c:	01 08 78    	mov.w     w1, [w0]
    1f0e:	10 3a 80    	mov.w     0x742, w0
    1f10:	00 01 78    	mov.w     w0, w2
    1f12:	02 60 a0    	bset.w    w2, #0x6
    1f14:	60 04 20    	mov.w     #0x46, w0
    1f16:	71 05 20    	mov.w     #0x57, w1
    1f18:	23 74 20    	mov.w     #0x742, w3
    1f1a:	80 49 78    	mov.b     w0, [w3]
    1f1c:	81 49 78    	mov.b     w1, [w3]
    1f1e:	82 49 78    	mov.b     w2, [w3]
    1f20:	1e 00 78    	mov.w     [w14], w0
    1f22:	10 08 90    	mov.w     [w0+18], w0
    1f24:	80 00 eb    	clr.w     w1
    1f26:	01 08 98    	mov.w     w1, [w0+16]
    1f28:	1e 00 78    	mov.w     [w14], w0
    1f2a:	10 08 90    	mov.w     [w0+18], w0
    1f2c:	f8 01 07    	rcall     0x231e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    1f2e:	1e 00 78    	mov.w     [w14], w0
    1f30:	10 08 90    	mov.w     [w0+18], w0
    1f32:	52 02 07    	rcall     0x23d8 <_pin_set> <L0> <.LFB8> <.LFE7>
    1f34:	1e 00 78    	mov.w     [w14], w0
    1f36:	80 00 eb    	clr.w     w1
    1f38:	11 08 98    	mov.w     w1, [w0+18]

00001f3a <.L29>:
    1f3a:	1e 00 78    	mov.w     [w14], w0
    1f3c:	20 08 90    	mov.w     [w0+20], w0
    1f3e:	00 00 e0    	cp0.w     w0
    1f40:	2f 00 32    	bra       Z, 0x1fa0 <.L27>
    1f42:	11 3a 80    	mov.w     0x742, w1
    1f44:	f0 0b 20    	mov.w     #0xbf, w0
    1f46:	00 81 60    	and.w     w1, w0, w2
    1f48:	60 04 20    	mov.w     #0x46, w0
    1f4a:	71 05 20    	mov.w     #0x57, w1
    1f4c:	23 74 20    	mov.w     #0x742, w3
    1f4e:	80 49 78    	mov.b     w0, [w3]
    1f50:	81 49 78    	mov.b     w1, [w3]
    1f52:	82 49 78    	mov.b     w2, [w3]
    1f54:	1e 00 78    	mov.w     [w14], w0
    1f56:	20 08 90    	mov.w     [w0+20], w0
    1f58:	70 00 90    	mov.w     [w0+14], w0
    1f5a:	9e 00 78    	mov.w     [w14], w1
    1f5c:	a1 08 90    	mov.w     [w1+20], w1
    1f5e:	f1 00 90    	mov.w     [w1+14], w1
    1f60:	11 01 78    	mov.w     [w1], w2
    1f62:	9e 00 78    	mov.w     [w14], w1
    1f64:	a1 08 90    	mov.w     [w1+20], w1
    1f66:	a1 48 90    	mov.b     [w1+10], w1
    1f68:	81 80 fb    	ze        w1, w1
    1f6a:	f3 03 20    	mov.w     #0x3f, w3
    1f6c:	81 18 dd    	sl.w      w3, w1, w1
    1f6e:	81 80 ea    	com.w     w1, w1
    1f70:	81 00 61    	and.w     w2, w1, w1
    1f72:	01 08 78    	mov.w     w1, [w0]
    1f74:	10 3a 80    	mov.w     0x742, w0
    1f76:	00 01 78    	mov.w     w0, w2
    1f78:	02 60 a0    	bset.w    w2, #0x6
    1f7a:	60 04 20    	mov.w     #0x46, w0
    1f7c:	71 05 20    	mov.w     #0x57, w1
    1f7e:	23 74 20    	mov.w     #0x742, w3
    1f80:	80 49 78    	mov.b     w0, [w3]
    1f82:	81 49 78    	mov.b     w1, [w3]
    1f84:	82 49 78    	mov.b     w2, [w3]
    1f86:	1e 00 78    	mov.w     [w14], w0
    1f88:	20 08 90    	mov.w     [w0+20], w0
    1f8a:	80 00 eb    	clr.w     w1
    1f8c:	01 08 98    	mov.w     w1, [w0+16]
    1f8e:	1e 00 78    	mov.w     [w14], w0
    1f90:	20 08 90    	mov.w     [w0+20], w0
    1f92:	c5 01 07    	rcall     0x231e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
    1f94:	1e 00 78    	mov.w     [w14], w0
    1f96:	20 08 90    	mov.w     [w0+20], w0
    1f98:	34 02 07    	rcall     0x2402 <_pin_clear> <L0> <.LFB9> <.LFE8>
    1f9a:	1e 00 78    	mov.w     [w14], w0
    1f9c:	80 00 eb    	clr.w     w1
    1f9e:	21 08 98    	mov.w     w1, [w0+20]

00001fa0 <.L27>:
    1fa0:	00 80 fa    	ulnk      
    1fa2:	00 00 06    	return    

00001fa4 <_spi_transfer>:
    1fa4:	04 00 fa    	lnk       #0x4
    1fa6:	00 0f 78    	mov.w     w0, [w14]
    1fa8:	21 47 98    	mov.b     w1, [w14+2]
    1faa:	1e 00 78    	mov.w     [w14], w0
    1fac:	30 00 90    	mov.w     [w0+6], w0
    1fae:	ae 40 90    	mov.b     [w14+2], w1
    1fb0:	81 80 fb    	ze        w1, w1
    1fb2:	01 08 78    	mov.w     w1, [w0]
    1fb4:	00 00 00    	nop       

00001fb6 <.L32>:
    1fb6:	1e 00 78    	mov.w     [w14], w0
    1fb8:	10 00 78    	mov.w     [w0], w0
    1fba:	10 00 78    	mov.w     [w0], w0
    1fbc:	61 00 60    	and.w     w0, #0x1, w0
    1fbe:	00 00 e0    	cp0.w     w0
    1fc0:	fa ff 32    	bra       Z, 0x1fb6 <.L32>
    1fc2:	1e 00 78    	mov.w     [w14], w0
    1fc4:	30 00 90    	mov.w     [w0+6], w0
    1fc6:	10 00 78    	mov.w     [w0], w0
    1fc8:	00 40 78    	mov.b     w0, w0
    1fca:	00 80 fa    	ulnk      
    1fcc:	00 00 06    	return    

00001fce <___digitalWrite>:
    1fce:	04 00 fa    	lnk       #0x4
    1fd0:	00 0f 78    	mov.w     w0, [w14]
    1fd2:	11 07 98    	mov.w     w1, [w14+2]
    1fd4:	1e 00 90    	mov.w     [w14+2], w0
    1fd6:	00 00 e0    	cp0.w     w0
    1fd8:	0d 00 32    	bra       Z, 0x1ff4 <.L2>
    1fda:	1e 00 78    	mov.w     [w14], w0
    1fdc:	10 00 78    	mov.w     [w0], w0
    1fde:	9e 00 78    	mov.w     [w14], w1
    1fe0:	91 00 78    	mov.w     [w1], w1
    1fe2:	11 01 78    	mov.w     [w1], w2
    1fe4:	9e 00 78    	mov.w     [w14], w1
    1fe6:	e1 40 90    	mov.b     [w1+6], w1
    1fe8:	81 80 fb    	ze        w1, w1
    1fea:	13 00 20    	mov.w     #0x1, w3
    1fec:	81 18 dd    	sl.w      w3, w1, w1
    1fee:	82 80 70    	ior.w     w1, w2, w1
    1ff0:	01 08 78    	mov.w     w1, [w0]
    1ff2:	0d 00 37    	bra       0x200e <.L1>

00001ff4 <.L2>:
    1ff4:	1e 00 78    	mov.w     [w14], w0
    1ff6:	10 00 78    	mov.w     [w0], w0
    1ff8:	9e 00 78    	mov.w     [w14], w1
    1ffa:	91 00 78    	mov.w     [w1], w1
    1ffc:	11 01 78    	mov.w     [w1], w2
    1ffe:	9e 00 78    	mov.w     [w14], w1
    2000:	e1 40 90    	mov.b     [w1+6], w1
    2002:	81 80 fb    	ze        w1, w1
    2004:	13 00 20    	mov.w     #0x1, w3
    2006:	81 18 dd    	sl.w      w3, w1, w1
    2008:	81 80 ea    	com.w     w1, w1
    200a:	81 00 61    	and.w     w2, w1, w1
    200c:	01 08 78    	mov.w     w1, [w0]

0000200e <.L1>:
    200e:	00 80 fa    	ulnk      
    2010:	00 00 06    	return    

00002012 <___digitalRead>:
    2012:	02 00 fa    	lnk       #0x2
    else
        bitclear(self->port, self->bit);
}

uint16_t __digitalRead(_PIN *self) {
    2014:	00 0f 78    	mov.w     w0, [w14]
    return bitread(self->port, self->bit);
    2016:	1e 00 78    	mov.w     [w14], w0
    2018:	10 00 78    	mov.w     [w0], w0
    201a:	90 00 78    	mov.w     [w0], w1
    201c:	1e 00 78    	mov.w     [w14], w0
    201e:	60 40 90    	mov.b     [w0+6], w0
    2020:	00 80 fb    	ze        w0, w0
    2022:	12 00 20    	mov.w     #0x1, w2
    2024:	00 10 dd    	sl.w      w2, w0, w0
    2026:	00 80 60    	and.w     w1, w0, w0
    2028:	00 f0 a7    	btsc.w    w0, #0xf
    202a:	00 00 ea    	neg.w     w0, w0
    202c:	00 00 ea    	neg.w     w0, w0
    202e:	4f 00 de    	lsr.w     w0, #0xf, w0
}
    2030:	00 80 fa    	ulnk      
    2032:	00 00 06    	return    

00002034 <___analogRead>:

uint16_t __analogRead(_PIN *self) {
    2034:	02 00 fa    	lnk       #0x2
    2036:	00 0f 78    	mov.w     w0, [w14]
    AD1CHS = self->annum;
    2038:	1e 00 78    	mov.w     [w14], w0
    203a:	40 00 90    	mov.w     [w0+8], w0
    203c:	40 19 88    	mov.w     w0, 0x328
    AD1CON1bits.SAMP = 1;
    203e:	20 23 a8    	bset.b    0x320, #0x1
    while (AD1CON1bits.DONE==0) {}
    2040:	00 00 00    	nop       

00002042 <.L6>:
    2042:	00 19 80    	mov.w     0x320, w0
    2044:	61 00 60    	and.w     w0, #0x1, w0
    2046:	00 00 e0    	cp0.w     w0
    2048:	fc ff 32    	bra       Z, 0x2042 <.L6>
    return ADC1BUF0;
    204a:	00 18 80    	mov.w     0x300, w0
}
    204c:	00 80 fa    	ulnk      
    204e:	00 00 06    	return    

00002050 <_init_pin>:

void init_pin(void) {
    2050:	02 00 fa    	lnk       #0x2
    uint16_t i;

    pin_init(&D[0], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2052:	40 6d 20    	mov.w     #0x6d4, w0
    2054:	80 1f 78    	mov.w     w0, [w15++]
    2056:	47 01 20    	mov.w     #0x14, w7
    2058:	00 43 eb    	clr.b     w6
    205a:	80 82 eb    	setm.w    w5
    205c:	54 c0 b3    	mov.b     #0x5, w4
    205e:	80 01 eb    	clr.w     w3
    2060:	82 2d 20    	mov.w     #0x2d8, w2
    2062:	a1 2d 20    	mov.w     #0x2da, w1
    2064:	00 83 20    	mov.w     #0x830, w0
    2066:	08 01 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2068:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 5, -1, 0, 20, (uint16_t *)&RPOR10);
    pin_init(&D[1], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    206a:	80 6d 20    	mov.w     #0x6d8, w0
    206c:	80 1f 78    	mov.w     w0, [w15++]
    206e:	97 01 20    	mov.w     #0x19, w7
    2070:	86 c0 b3    	mov.b     #0x8, w6
    2072:	80 82 eb    	setm.w    w5
    2074:	44 c0 b3    	mov.b     #0x4, w4
    2076:	80 01 eb    	clr.w     w3
    2078:	82 2d 20    	mov.w     #0x2d8, w2
    207a:	a1 2d 20    	mov.w     #0x2da, w1
    207c:	60 84 20    	mov.w     #0x846, w0
    207e:	fc 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2080:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 4, -1, 8, 25, (uint16_t *)&RPOR12);
    pin_init(&D[2], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    2082:	a0 6c 20    	mov.w     #0x6ca, w0
    2084:	80 1f 78    	mov.w     w0, [w15++]
    2086:	a7 00 20    	mov.w     #0xa, w7
    2088:	00 43 eb    	clr.b     w6
    208a:	80 82 eb    	setm.w    w5
    208c:	44 c0 b3    	mov.b     #0x4, w4
    208e:	80 01 eb    	clr.w     w3
    2090:	82 2e 20    	mov.w     #0x2e8, w2
    2092:	a1 2e 20    	mov.w     #0x2ea, w1
    2094:	c0 85 20    	mov.w     #0x85c, w0
    2096:	f0 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2098:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 4, -1, 0, 10, (uint16_t *)&RPOR5);
    pin_init(&D[3], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    209a:	00 6d 20    	mov.w     #0x6d0, w0
    209c:	80 1f 78    	mov.w     w0, [w15++]
    209e:	17 01 20    	mov.w     #0x11, w7
    20a0:	86 c0 b3    	mov.b     #0x8, w6
    20a2:	80 82 eb    	setm.w    w5
    20a4:	54 c0 b3    	mov.b     #0x5, w4
    20a6:	80 01 eb    	clr.w     w3
    20a8:	82 2e 20    	mov.w     #0x2e8, w2
    20aa:	a1 2e 20    	mov.w     #0x2ea, w1
    20ac:	20 87 20    	mov.w     #0x872, w0
    20ae:	e4 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    20b0:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 5, -1, 8, 17, (uint16_t *)&RPOR8);
    pin_init(&D[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    20b2:	c0 6d 20    	mov.w     #0x6dc, w0
    20b4:	80 1f 78    	mov.w     w0, [w15++]
    20b6:	d7 01 20    	mov.w     #0x1d, w7
    20b8:	86 c0 b3    	mov.b     #0x8, w6
    20ba:	f5 00 20    	mov.w     #0xf, w5
    20bc:	f4 c0 b3    	mov.b     #0xf, w4
    20be:	23 4e 20    	mov.w     #0x4e2, w3
    20c0:	82 2c 20    	mov.w     #0x2c8, w2
    20c2:	a1 2c 20    	mov.w     #0x2ca, w1
    20c4:	80 88 20    	mov.w     #0x888, w0
    20c6:	d8 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    20c8:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 15, 15, 8, 29, (uint16_t *)&RPOR14);
    pin_init(&D[5], (uint16_t *)&PORTF, (uint16_t *)&TRISF, 
    20ca:	00 6d 20    	mov.w     #0x6d0, w0
    20cc:	80 1f 78    	mov.w     w0, [w15++]
    20ce:	07 01 20    	mov.w     #0x10, w7
    20d0:	00 43 eb    	clr.b     w6
    20d2:	80 82 eb    	setm.w    w5
    20d4:	34 c0 b3    	mov.b     #0x3, w4
    20d6:	80 01 eb    	clr.w     w3
    20d8:	82 2e 20    	mov.w     #0x2e8, w2
    20da:	a1 2e 20    	mov.w     #0x2ea, w1
    20dc:	e0 89 20    	mov.w     #0x89e, w0
    20de:	cc 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    20e0:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 3, -1, 0, 16, (uint16_t *)&RPOR8);
    pin_init(&D[6], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    20e2:	20 6c 20    	mov.w     #0x6c2, w0
    20e4:	80 1f 78    	mov.w     w0, [w15++]
    20e6:	27 00 20    	mov.w     #0x2, w7
    20e8:	00 43 eb    	clr.b     w6
    20ea:	80 82 eb    	setm.w    w5
    20ec:	84 c0 b3    	mov.b     #0x8, w4
    20ee:	80 01 eb    	clr.w     w3
    20f0:	82 2d 20    	mov.w     #0x2d8, w2
    20f2:	a1 2d 20    	mov.w     #0x2da, w1
    20f4:	40 8b 20    	mov.w     #0x8b4, w0
    20f6:	c0 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    20f8:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 8, -1, 0, 2, (uint16_t *)&RPOR1);
    pin_init(&D[7], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    20fa:	c0 6c 20    	mov.w     #0x6cc, w0
    20fc:	80 1f 78    	mov.w     w0, [w15++]
    20fe:	c7 00 20    	mov.w     #0xc, w7
    2100:	00 43 eb    	clr.b     w6
    2102:	80 82 eb    	setm.w    w5
    2104:	b4 c0 b3    	mov.b     #0xb, w4
    2106:	80 01 eb    	clr.w     w3
    2108:	82 2d 20    	mov.w     #0x2d8, w2
    210a:	a1 2d 20    	mov.w     #0x2da, w1
    210c:	a0 8c 20    	mov.w     #0x8ca, w0
    210e:	b4 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2110:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 11, -1, 0, 12, (uint16_t *)&RPOR6);
    pin_init(&D[8], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2112:	40 6c 20    	mov.w     #0x6c4, w0
    2114:	80 1f 78    	mov.w     w0, [w15++]
    2116:	47 00 20    	mov.w     #0x4, w7
    2118:	00 43 eb    	clr.b     w6
    211a:	80 82 eb    	setm.w    w5
    211c:	94 c0 b3    	mov.b     #0x9, w4
    211e:	80 01 eb    	clr.w     w3
    2120:	82 2d 20    	mov.w     #0x2d8, w2
    2122:	a1 2d 20    	mov.w     #0x2da, w1
    2124:	00 8e 20    	mov.w     #0x8e0, w0
    2126:	a8 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2128:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 9, -1, 0, 4, (uint16_t *)&RPOR2);
    pin_init(&D[9], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    212a:	20 6c 20    	mov.w     #0x6c2, w0
    212c:	80 1f 78    	mov.w     w0, [w15++]
    212e:	37 00 20    	mov.w     #0x3, w7
    2130:	86 c0 b3    	mov.b     #0x8, w6
    2132:	80 82 eb    	setm.w    w5
    2134:	a4 c0 b3    	mov.b     #0xa, w4
    2136:	80 01 eb    	clr.w     w3
    2138:	82 2d 20    	mov.w     #0x2d8, w2
    213a:	a1 2d 20    	mov.w     #0x2da, w1
    213c:	60 8f 20    	mov.w     #0x8f6, w0
    213e:	9c 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2140:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 10, -1, 8, 3, (uint16_t *)&RPOR1);
    pin_init(&D[10], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2142:	a0 6c 20    	mov.w     #0x6ca, w0
    2144:	80 1f 78    	mov.w     w0, [w15++]
    2146:	b7 00 20    	mov.w     #0xb, w7
    2148:	86 c0 b3    	mov.b     #0x8, w6
    214a:	80 82 eb    	setm.w    w5
    214c:	00 42 eb    	clr.b     w4
    214e:	80 01 eb    	clr.w     w3
    2150:	82 2d 20    	mov.w     #0x2d8, w2
    2152:	a1 2d 20    	mov.w     #0x2da, w1
    2154:	c0 90 20    	mov.w     #0x90c, w0
    2156:	90 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2158:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 0, -1, 8, 11, (uint16_t *)&RPOR5);
    pin_init(&D[11], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    215a:	80 6d 20    	mov.w     #0x6d8, w0
    215c:	80 1f 78    	mov.w     w0, [w15++]
    215e:	87 01 20    	mov.w     #0x18, w7
    2160:	00 43 eb    	clr.b     w6
    2162:	80 82 eb    	setm.w    w5
    2164:	14 c0 b3    	mov.b     #0x1, w4
    2166:	80 01 eb    	clr.w     w3
    2168:	82 2d 20    	mov.w     #0x2d8, w2
    216a:	a1 2d 20    	mov.w     #0x2da, w1
    216c:	20 92 20    	mov.w     #0x922, w0
    216e:	84 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2170:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 1, -1, 0, 24, (uint16_t *)&RPOR12);
    pin_init(&D[12], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    2172:	60 6d 20    	mov.w     #0x6d6, w0
    2174:	80 1f 78    	mov.w     w0, [w15++]
    2176:	77 01 20    	mov.w     #0x17, w7
    2178:	86 c0 b3    	mov.b     #0x8, w6
    217a:	80 82 eb    	setm.w    w5
    217c:	24 c0 b3    	mov.b     #0x2, w4
    217e:	80 01 eb    	clr.w     w3
    2180:	82 2d 20    	mov.w     #0x2d8, w2
    2182:	a1 2d 20    	mov.w     #0x2da, w1
    2184:	80 93 20    	mov.w     #0x938, w0
    2186:	78 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2188:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 2, -1, 8, 23, (uint16_t *)&RPOR11);
    pin_init(&D[13], (uint16_t *)&PORTD, (uint16_t *)&TRISD, 
    218a:	60 6d 20    	mov.w     #0x6d6, w0
    218c:	80 1f 78    	mov.w     w0, [w15++]
    218e:	67 01 20    	mov.w     #0x16, w7
    2190:	00 43 eb    	clr.b     w6
    2192:	80 82 eb    	setm.w    w5
    2194:	34 c0 b3    	mov.b     #0x3, w4
    2196:	80 01 eb    	clr.w     w3
    2198:	82 2d 20    	mov.w     #0x2d8, w2
    219a:	a1 2d 20    	mov.w     #0x2da, w1
    219c:	e0 94 20    	mov.w     #0x94e, w0
    219e:	6c 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    21a0:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)NULL, 3, -1, 0, 22, (uint16_t *)&RPOR11);
    pin_init(&A[5], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    21a2:	00 6c 20    	mov.w     #0x6c0, w0
    21a4:	80 1f 78    	mov.w     w0, [w15++]
    21a6:	80 03 eb    	clr.w     w7
    21a8:	00 43 eb    	clr.b     w6
    21aa:	80 02 eb    	clr.w     w5
    21ac:	00 42 eb    	clr.b     w4
    21ae:	23 4e 20    	mov.w     #0x4e2, w3
    21b0:	82 2c 20    	mov.w     #0x2c8, w2
    21b2:	a1 2c 20    	mov.w     #0x2ca, w1
    21b4:	20 9d 20    	mov.w     #0x9d2, w0
    21b6:	60 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    21b8:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 0, 0, 0, 0, (uint16_t *)&RPOR0);
    pin_init(&A[4], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    21ba:	00 6c 20    	mov.w     #0x6c0, w0
    21bc:	80 1f 78    	mov.w     w0, [w15++]
    21be:	17 00 20    	mov.w     #0x1, w7
    21c0:	86 c0 b3    	mov.b     #0x8, w6
    21c2:	15 00 20    	mov.w     #0x1, w5
    21c4:	14 c0 b3    	mov.b     #0x1, w4
    21c6:	23 4e 20    	mov.w     #0x4e2, w3
    21c8:	82 2c 20    	mov.w     #0x2c8, w2
    21ca:	a1 2c 20    	mov.w     #0x2ca, w1
    21cc:	c0 9b 20    	mov.w     #0x9bc, w0
    21ce:	54 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    21d0:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 1, 1, 8, 1, (uint16_t *)&RPOR0);
    pin_init(&A[3], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    21d2:	c0 6c 20    	mov.w     #0x6cc, w0
    21d4:	80 1f 78    	mov.w     w0, [w15++]
    21d6:	d7 00 20    	mov.w     #0xd, w7
    21d8:	86 c0 b3    	mov.b     #0x8, w6
    21da:	25 00 20    	mov.w     #0x2, w5
    21dc:	24 c0 b3    	mov.b     #0x2, w4
    21de:	23 4e 20    	mov.w     #0x4e2, w3
    21e0:	82 2c 20    	mov.w     #0x2c8, w2
    21e2:	a1 2c 20    	mov.w     #0x2ca, w1
    21e4:	60 9a 20    	mov.w     #0x9a6, w0
    21e6:	48 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    21e8:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 2, 2, 8, 13, (uint16_t *)&RPOR6);
    pin_init(&A[2], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    21ea:	00 00 eb    	clr.w     w0
    21ec:	80 1f 78    	mov.w     w0, [w15++]
    21ee:	80 83 eb    	setm.w    w7
    21f0:	00 43 eb    	clr.b     w6
    21f2:	35 00 20    	mov.w     #0x3, w5
    21f4:	34 c0 b3    	mov.b     #0x3, w4
    21f6:	23 4e 20    	mov.w     #0x4e2, w3
    21f8:	82 2c 20    	mov.w     #0x2c8, w2
    21fa:	a1 2c 20    	mov.w     #0x2ca, w1
    21fc:	00 99 20    	mov.w     #0x990, w0
    21fe:	3c 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2200:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 3, 3, 0, -1, (uint16_t *)NULL);
    pin_init(&A[1], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    2202:	c0 6d 20    	mov.w     #0x6dc, w0
    2204:	80 1f 78    	mov.w     w0, [w15++]
    2206:	c7 01 20    	mov.w     #0x1c, w7
    2208:	00 43 eb    	clr.b     w6
    220a:	45 00 20    	mov.w     #0x4, w5
    220c:	44 c0 b3    	mov.b     #0x4, w4
    220e:	23 4e 20    	mov.w     #0x4e2, w3
    2210:	82 2c 20    	mov.w     #0x2c8, w2
    2212:	a1 2c 20    	mov.w     #0x2ca, w1
    2214:	a0 97 20    	mov.w     #0x97a, w0
    2216:	30 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2218:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 4, 4, 0, 28, (uint16_t *)&RPOR14);
    pin_init(&A[0], (uint16_t *)&PORTB, (uint16_t *)&TRISB, 
    221a:	20 6d 20    	mov.w     #0x6d2, w0
    221c:	80 1f 78    	mov.w     w0, [w15++]
    221e:	27 01 20    	mov.w     #0x12, w7
    2220:	00 43 eb    	clr.b     w6
    2222:	55 00 20    	mov.w     #0x5, w5
    2224:	54 c0 b3    	mov.b     #0x5, w4
    2226:	23 4e 20    	mov.w     #0x4e2, w3
    2228:	82 2c 20    	mov.w     #0x2c8, w2
    222a:	a1 2c 20    	mov.w     #0x2ca, w1
    222c:	40 96 20    	mov.w     #0x964, w0
    222e:	24 00 07    	rcall     0x2278 <_pin_init> <L0> <.LFB4> <.LFE3>
    2230:	8f 87 e9    	dec2.w    w15, w15
             (uint16_t *)&ANSB, 5, 5, 0, 18, (uint16_t *)&RPOR9);
    for (i = 0; i<14; i++)
    2232:	00 00 eb    	clr.w     w0
    2234:	00 0f 78    	mov.w     w0, [w14]
    2236:	07 00 37    	bra       0x2246 <.L8>

00002238 <.L9>:
        pin_digitalIn(&D[i]);
    2238:	1e 00 78    	mov.w     [w14], w0
    223a:	76 00 b9    	mul.su    w0, #0x16, w0
    223c:	80 00 78    	mov.w     w0, w1
    223e:	00 83 20    	mov.w     #0x830, w0
    2240:	00 80 40    	add.w     w1, w0, w0
    2242:	46 00 07    	rcall     0x22d0 <_pin_digitalIn> <L0> <.LFB5> <.LFE4>
    2244:	1e 0f e8    	inc.w     [w14], [w14]

00002246 <.L8>:
    2246:	1e 00 78    	mov.w     [w14], w0
    2248:	ed 0f 50    	sub.w     w0, #0xd, [w15]
    224a:	f6 ff 36    	bra       LEU, 0x2238 <.L9>
    for (i = 0; i<6; i++)
    224c:	00 00 eb    	clr.w     w0
    224e:	00 0f 78    	mov.w     w0, [w14]
    2250:	07 00 37    	bra       0x2260 <.L10>

00002252 <.L11>:
        pin_analogIn(&A[i]);
    2252:	1e 00 78    	mov.w     [w14], w0
    2254:	76 00 b9    	mul.su    w0, #0x16, w0
    2256:	80 00 78    	mov.w     w0, w1
    2258:	40 96 20    	mov.w     #0x964, w0
    225a:	00 80 40    	add.w     w1, w0, w0
    225c:	95 00 07    	rcall     0x2388 <_pin_analogIn> <L0> <.LFB7> <.LFE6>
    225e:	1e 0f e8    	inc.w     [w14], [w14]

00002260 <.L10>:
    2260:	1e 00 78    	mov.w     [w14], w0
    2262:	e5 0f 50    	sub.w     w0, #0x5, [w15]
    2264:	f6 ff 36    	bra       LEU, 0x2252 <.L11>

    // Configure and enable the ADC module: 
    //   set output data format to fractional (FORM<1:0> = 0b10)
    //   set conversion trigger source select bits to internal counter 
    //     (SSRC<2:0> = 0b111)
    //   set auto-sample time bits to 12*TAD (SAMC<4:0> = 12)
    //   set conversion clock select bits to 64*TCY (ADCS<7:0> = 64)
    //   set initial channel selection to AN0
    AD1CON1 = 0x02E0; 
    2266:	00 2e 20    	mov.w     #0x2e0, w0
    2268:	00 19 88    	mov.w     w0, 0x320
    AD1CON2 = 0;
    226a:	22 23 ef    	clr.w     0x322
    AD1CON3 = 0x0C40;
    226c:	00 c4 20    	mov.w     #0xc40, w0
    226e:	20 19 88    	mov.w     w0, 0x324
    AD1CHS = 0;
    2270:	28 23 ef    	clr.w     0x328
    AD1CON1bits.ADON = 1;
    2272:	21 e3 a8    	bset.b    0x321, #0x7
}
    2274:	00 80 fa    	ulnk      
    2276:	00 00 06    	return    

00002278 <_pin_init>:

void pin_init(_PIN *self, uint16_t *port, uint16_t *tris, 
              uint16_t *ans, uint8_t bit, int annum, 
              uint8_t rpshift, uint16_t rpnum, uint16_t *rpor) {
    2278:	10 00 fa    	lnk       #0x10
    227a:	00 0f 78    	mov.w     w0, [w14]
    227c:	11 07 98    	mov.w     w1, [w14+2]
    227e:	22 07 98    	mov.w     w2, [w14+4]
    2280:	33 07 98    	mov.w     w3, [w14+6]
    2282:	04 4f 98    	mov.b     w4, [w14+8]
    2284:	55 07 98    	mov.w     w5, [w14+10]
    2286:	46 4f 98    	mov.b     w6, [w14+12]
    2288:	77 07 98    	mov.w     w7, [w14+14]
    self->port = port;
    228a:	1e 00 78    	mov.w     [w14], w0
    228c:	9e 00 90    	mov.w     [w14+2], w1
    228e:	01 08 78    	mov.w     w1, [w0]
    self->tris = tris;
    2290:	1e 00 78    	mov.w     [w14], w0
    2292:	ae 00 90    	mov.w     [w14+4], w1
    2294:	11 00 98    	mov.w     w1, [w0+2]
    self->ans = ans;
    2296:	1e 00 78    	mov.w     [w14], w0
    2298:	be 00 90    	mov.w     [w14+6], w1
    229a:	21 00 98    	mov.w     w1, [w0+4]
    self->bit = bit;
    229c:	1e 00 78    	mov.w     [w14], w0
    229e:	8e 48 90    	mov.b     [w14+8], w1
    22a0:	61 40 98    	mov.b     w1, [w0+6]
    self->annum = annum;
    22a2:	1e 00 78    	mov.w     [w14], w0
    22a4:	de 00 90    	mov.w     [w14+10], w1
    22a6:	41 00 98    	mov.w     w1, [w0+8]
    self->rpshift = rpshift;
    22a8:	1e 00 78    	mov.w     [w14], w0
    22aa:	ce 48 90    	mov.b     [w14+12], w1
    22ac:	21 48 98    	mov.b     w1, [w0+10]
    self->rpnum = rpnum;
    22ae:	fe 00 90    	mov.w     [w14+14], w1
    22b0:	1e 00 78    	mov.w     [w14], w0
    22b2:	61 00 98    	mov.w     w1, [w0+12]
    self->rpor = rpor;
    22b4:	1e 00 78    	mov.w     [w14], w0
    22b6:	ce b8 97    	mov.w     [w14-8], w1
    22b8:	71 00 98    	mov.w     w1, [w0+14]
    self->owner = NULL;
    22ba:	1e 00 78    	mov.w     [w14], w0
    22bc:	80 00 eb    	clr.w     w1
    22be:	01 08 98    	mov.w     w1, [w0+16]
    self->write = NULL;
    22c0:	1e 00 78    	mov.w     [w14], w0
    22c2:	80 00 eb    	clr.w     w1
    22c4:	11 08 98    	mov.w     w1, [w0+18]
    self->read = NULL;
    22c6:	1e 00 78    	mov.w     [w14], w0
    22c8:	80 00 eb    	clr.w     w1
    22ca:	21 08 98    	mov.w     w1, [w0+20]
}
    22cc:	00 80 fa    	ulnk      
    22ce:	00 00 06    	return    

000022d0 <_pin_digitalIn>:

void pin_digitalIn(_PIN *self) {
    22d0:	02 00 fa    	lnk       #0x2
    22d2:	00 0f 78    	mov.w     w0, [w14]
    if (self->ans)
    22d4:	1e 00 78    	mov.w     [w14], w0
    22d6:	20 00 90    	mov.w     [w0+4], w0
    22d8:	00 00 e0    	cp0.w     w0
    22da:	0d 00 32    	bra       Z, 0x22f6 <.L14>
        bitclear(self->ans, self->bit);
    22dc:	1e 00 78    	mov.w     [w14], w0
    22de:	20 00 90    	mov.w     [w0+4], w0
    22e0:	9e 00 78    	mov.w     [w14], w1
    22e2:	a1 00 90    	mov.w     [w1+4], w1
    22e4:	11 01 78    	mov.w     [w1], w2
    22e6:	9e 00 78    	mov.w     [w14], w1
    22e8:	e1 40 90    	mov.b     [w1+6], w1
    22ea:	81 80 fb    	ze        w1, w1
    22ec:	13 00 20    	mov.w     #0x1, w3
    22ee:	81 18 dd    	sl.w      w3, w1, w1
    22f0:	81 80 ea    	com.w     w1, w1
    22f2:	81 00 61    	and.w     w2, w1, w1
    22f4:	01 08 78    	mov.w     w1, [w0]

000022f6 <.L14>:
    bitset(self->tris, self->bit);
    22f6:	1e 00 78    	mov.w     [w14], w0
    22f8:	10 00 90    	mov.w     [w0+2], w0
    22fa:	9e 00 78    	mov.w     [w14], w1
    22fc:	91 00 90    	mov.w     [w1+2], w1
    22fe:	11 01 78    	mov.w     [w1], w2
    2300:	9e 00 78    	mov.w     [w14], w1
    2302:	e1 40 90    	mov.b     [w1+6], w1
    2304:	81 80 fb    	ze        w1, w1
    2306:	13 00 20    	mov.w     #0x1, w3
    2308:	81 18 dd    	sl.w      w3, w1, w1
    230a:	82 80 70    	ior.w     w1, w2, w1
    230c:	01 08 78    	mov.w     w1, [w0]
    self->write = NULL;
    230e:	1e 00 78    	mov.w     [w14], w0
    2310:	80 00 eb    	clr.w     w1
    2312:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __digitalRead;    
    2314:	1e 00 78    	mov.w     [w14], w0
    2316:	21 01 22    	mov.w     #0x2012, w1
    2318:	21 08 98    	mov.w     w1, [w0+20]
}
    231a:	00 80 fa    	ulnk      
    231c:	00 00 06    	return    

0000231e <_pin_digitalOut>:

void pin_digitalOut(_PIN *self) {
    231e:	02 00 fa    	lnk       #0x2
    2320:	00 0f 78    	mov.w     w0, [w14]
    if (self->ans)
    2322:	1e 00 78    	mov.w     [w14], w0
    2324:	20 00 90    	mov.w     [w0+4], w0
    2326:	00 00 e0    	cp0.w     w0
    2328:	0d 00 32    	bra       Z, 0x2344 <.L16>
        bitclear(self->ans, self->bit);
    232a:	1e 00 78    	mov.w     [w14], w0
    232c:	20 00 90    	mov.w     [w0+4], w0
    232e:	9e 00 78    	mov.w     [w14], w1
    2330:	a1 00 90    	mov.w     [w1+4], w1
    2332:	11 01 78    	mov.w     [w1], w2
    2334:	9e 00 78    	mov.w     [w14], w1
    2336:	e1 40 90    	mov.b     [w1+6], w1
    2338:	81 80 fb    	ze        w1, w1
    233a:	13 00 20    	mov.w     #0x1, w3
    233c:	81 18 dd    	sl.w      w3, w1, w1
    233e:	81 80 ea    	com.w     w1, w1
    2340:	81 00 61    	and.w     w2, w1, w1
    2342:	01 08 78    	mov.w     w1, [w0]

00002344 <.L16>:
    bitclear(self->port, self->bit);
    2344:	1e 00 78    	mov.w     [w14], w0
    2346:	10 00 78    	mov.w     [w0], w0
    2348:	9e 00 78    	mov.w     [w14], w1
    234a:	91 00 78    	mov.w     [w1], w1
    234c:	11 01 78    	mov.w     [w1], w2
    234e:	9e 00 78    	mov.w     [w14], w1
    2350:	e1 40 90    	mov.b     [w1+6], w1
    2352:	81 80 fb    	ze        w1, w1
    2354:	13 00 20    	mov.w     #0x1, w3
    2356:	81 18 dd    	sl.w      w3, w1, w1
    2358:	81 80 ea    	com.w     w1, w1
    235a:	81 00 61    	and.w     w2, w1, w1
    235c:	01 08 78    	mov.w     w1, [w0]
    bitclear(self->tris, self->bit);
    235e:	1e 00 78    	mov.w     [w14], w0
    2360:	10 00 90    	mov.w     [w0+2], w0
    2362:	9e 00 78    	mov.w     [w14], w1
    2364:	91 00 90    	mov.w     [w1+2], w1
    2366:	11 01 78    	mov.w     [w1], w2
    2368:	9e 00 78    	mov.w     [w14], w1
    236a:	e1 40 90    	mov.b     [w1+6], w1
    236c:	81 80 fb    	ze        w1, w1
    236e:	13 00 20    	mov.w     #0x1, w3
    2370:	81 18 dd    	sl.w      w3, w1, w1
    2372:	81 80 ea    	com.w     w1, w1
    2374:	81 00 61    	and.w     w2, w1, w1
    2376:	01 08 78    	mov.w     w1, [w0]
    self->write = __digitalWrite;
    2378:	1e 00 78    	mov.w     [w14], w0
    237a:	e1 fc 21    	mov.w     #0x1fce, w1
    237c:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __digitalRead;
    237e:	1e 00 78    	mov.w     [w14], w0
    2380:	21 01 22    	mov.w     #0x2012, w1
    2382:	21 08 98    	mov.w     w1, [w0+20]
}
    2384:	00 80 fa    	ulnk      
    2386:	00 00 06    	return    

00002388 <_pin_analogIn>:

void pin_analogIn(_PIN *self) {
    2388:	02 00 fa    	lnk       #0x2
    238a:	00 0f 78    	mov.w     w0, [w14]
    if (!(self->ans))
    238c:	1e 00 78    	mov.w     [w14], w0
    238e:	20 00 90    	mov.w     [w0+4], w0
    2390:	00 00 e0    	cp0.w     w0
    2392:	1f 00 32    	bra       Z, 0x23d2 <.L20>
        return;
    bitset(self->tris, self->bit);
    2394:	1e 00 78    	mov.w     [w14], w0
    2396:	10 00 90    	mov.w     [w0+2], w0
    2398:	9e 00 78    	mov.w     [w14], w1
    239a:	91 00 90    	mov.w     [w1+2], w1
    239c:	11 01 78    	mov.w     [w1], w2
    239e:	9e 00 78    	mov.w     [w14], w1
    23a0:	e1 40 90    	mov.b     [w1+6], w1
    23a2:	81 80 fb    	ze        w1, w1
    23a4:	13 00 20    	mov.w     #0x1, w3
    23a6:	81 18 dd    	sl.w      w3, w1, w1
    23a8:	82 80 70    	ior.w     w1, w2, w1
    23aa:	01 08 78    	mov.w     w1, [w0]
    bitset(self->ans, self->bit);
    23ac:	1e 00 78    	mov.w     [w14], w0
    23ae:	20 00 90    	mov.w     [w0+4], w0
    23b0:	9e 00 78    	mov.w     [w14], w1
    23b2:	a1 00 90    	mov.w     [w1+4], w1
    23b4:	11 01 78    	mov.w     [w1], w2
    23b6:	9e 00 78    	mov.w     [w14], w1
    23b8:	e1 40 90    	mov.b     [w1+6], w1
    23ba:	81 80 fb    	ze        w1, w1
    23bc:	13 00 20    	mov.w     #0x1, w3
    23be:	81 18 dd    	sl.w      w3, w1, w1
    23c0:	82 80 70    	ior.w     w1, w2, w1
    23c2:	01 08 78    	mov.w     w1, [w0]
    self->write = NULL;
    23c4:	1e 00 78    	mov.w     [w14], w0
    23c6:	80 00 eb    	clr.w     w1
    23c8:	11 08 98    	mov.w     w1, [w0+18]
    self->read = __analogRead;
    23ca:	1e 00 78    	mov.w     [w14], w0
    23cc:	41 03 22    	mov.w     #0x2034, w1
    23ce:	21 08 98    	mov.w     w1, [w0+20]
    23d0:	01 00 37    	bra       0x23d4 <.L17>

000023d2 <.L20>:
    23d2:	00 00 00    	nop       

000023d4 <.L17>:
}
    23d4:	00 80 fa    	ulnk      
    23d6:	00 00 06    	return    

000023d8 <_pin_set>:

void pin_set(_PIN *self) {
    23d8:	02 00 fa    	lnk       #0x2
    23da:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    23dc:	1e 00 78    	mov.w     [w14], w0
    23de:	90 08 90    	mov.w     [w0+18], w1
    23e0:	e0 fc 21    	mov.w     #0x1fce, w0
    23e2:	80 8f 50    	sub.w     w1, w0, [w15]
    23e4:	0c 00 3a    	bra       NZ, 0x23fe <.L21>
        bitset(self->port, self->bit);
    23e6:	1e 00 78    	mov.w     [w14], w0
    23e8:	10 00 78    	mov.w     [w0], w0
    23ea:	9e 00 78    	mov.w     [w14], w1
    23ec:	91 00 78    	mov.w     [w1], w1
    23ee:	11 01 78    	mov.w     [w1], w2
    23f0:	9e 00 78    	mov.w     [w14], w1
    23f2:	e1 40 90    	mov.b     [w1+6], w1
    23f4:	81 80 fb    	ze        w1, w1
    23f6:	13 00 20    	mov.w     #0x1, w3
    23f8:	81 18 dd    	sl.w      w3, w1, w1
    23fa:	82 80 70    	ior.w     w1, w2, w1
    23fc:	01 08 78    	mov.w     w1, [w0]

000023fe <.L21>:
}
    23fe:	00 80 fa    	ulnk      
    2400:	00 00 06    	return    

00002402 <_pin_clear>:

void pin_clear(_PIN *self) {
    2402:	02 00 fa    	lnk       #0x2
    2404:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    2406:	1e 00 78    	mov.w     [w14], w0
    2408:	90 08 90    	mov.w     [w0+18], w1
    240a:	e0 fc 21    	mov.w     #0x1fce, w0
    240c:	80 8f 50    	sub.w     w1, w0, [w15]
    240e:	0d 00 3a    	bra       NZ, 0x242a <.L23>
        bitclear(self->port, self->bit);
    2410:	1e 00 78    	mov.w     [w14], w0
    2412:	10 00 78    	mov.w     [w0], w0
    2414:	9e 00 78    	mov.w     [w14], w1
    2416:	91 00 78    	mov.w     [w1], w1
    2418:	11 01 78    	mov.w     [w1], w2
    241a:	9e 00 78    	mov.w     [w14], w1
    241c:	e1 40 90    	mov.b     [w1+6], w1
    241e:	81 80 fb    	ze        w1, w1
    2420:	13 00 20    	mov.w     #0x1, w3
    2422:	81 18 dd    	sl.w      w3, w1, w1
    2424:	81 80 ea    	com.w     w1, w1
    2426:	81 00 61    	and.w     w2, w1, w1
    2428:	01 08 78    	mov.w     w1, [w0]

0000242a <.L23>:
}
    242a:	00 80 fa    	ulnk      
    242c:	00 00 06    	return    

0000242e <_pin_toggle>:

void pin_toggle(_PIN *self) {
    242e:	02 00 fa    	lnk       #0x2
    2430:	00 0f 78    	mov.w     w0, [w14]
    if (self->write==__digitalWrite)
    2432:	1e 00 78    	mov.w     [w14], w0
    2434:	90 08 90    	mov.w     [w0+18], w1
    2436:	e0 fc 21    	mov.w     #0x1fce, w0
    2438:	80 8f 50    	sub.w     w1, w0, [w15]
    243a:	0c 00 3a    	bra       NZ, 0x2454 <.L25>
        bitflip(self->port, self->bit);
    243c:	1e 00 78    	mov.w     [w14], w0
    243e:	10 00 78    	mov.w     [w0], w0
    2440:	9e 00 78    	mov.w     [w14], w1
    2442:	91 00 78    	mov.w     [w1], w1
    2444:	11 01 78    	mov.w     [w1], w2
    2446:	9e 00 78    	mov.w     [w14], w1
    2448:	e1 40 90    	mov.b     [w1+6], w1
    244a:	81 80 fb    	ze        w1, w1
    244c:	13 00 20    	mov.w     #0x1, w3
    244e:	81 18 dd    	sl.w      w3, w1, w1
    2450:	81 00 69    	xor.w     w2, w1, w1
    2452:	01 08 78    	mov.w     w1, [w0]

00002454 <.L25>:
}
    2454:	00 80 fa    	ulnk      
    2456:	00 00 06    	return    

00002458 <_pin_write>:

void pin_write(_PIN *self, uint16_t val) {
    2458:	04 00 fa    	lnk       #0x4
    245a:	00 0f 78    	mov.w     w0, [w14]
    245c:	11 07 98    	mov.w     w1, [w14+2]
    if (self->write)
    245e:	1e 00 78    	mov.w     [w14], w0
    2460:	10 08 90    	mov.w     [w0+18], w0
    2462:	00 00 e0    	cp0.w     w0
    2464:	05 00 32    	bra       Z, 0x2470 <.L27>
        self->write(self, val);
    2466:	1e 00 78    	mov.w     [w14], w0
    2468:	10 09 90    	mov.w     [w0+18], w2
    246a:	9e 00 90    	mov.w     [w14+2], w1
    246c:	1e 00 78    	mov.w     [w14], w0
    246e:	02 00 01    	call      w2

00002470 <.L27>:
}
    2470:	00 80 fa    	ulnk      
    2472:	00 00 06    	return    

00002474 <_pin_read>:

uint16_t pin_read(_PIN *self) {
    2474:	02 00 fa    	lnk       #0x2
    2476:	00 0f 78    	mov.w     w0, [w14]
    if (self->read)
    2478:	1e 00 78    	mov.w     [w14], w0
    247a:	20 08 90    	mov.w     [w0+20], w0
    247c:	00 00 e0    	cp0.w     w0
    247e:	05 00 32    	bra       Z, 0x248a <.L30>
        return self->read(self);
    2480:	1e 00 78    	mov.w     [w14], w0
    2482:	a0 08 90    	mov.w     [w0+20], w1
    2484:	1e 00 78    	mov.w     [w14], w0
    2486:	01 00 01    	call      w1
    2488:	01 00 37    	bra       0x248c <.L31>

0000248a <.L30>:
    else
        return 0xFFFF;
    248a:	00 80 eb    	setm.w    w0

0000248c <.L31>:
}
    248c:	00 80 fa    	ulnk      
    248e:	00 00 06    	return    

00002490 <___pwmRead>:
#include "oc.h"

_OC oc1, oc2, oc3, oc4, oc5, oc6, oc7, oc8, oc9;

uint16_t __pwmRead(_PIN *self) {
    2490:	08 00 fa    	lnk       #0x8
    2492:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    2494:	3e 00 90    	mov.w     [w14+6], w0
    2496:	00 08 90    	mov.w     [w0+16], w0
    2498:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    249a:	00 00 eb    	clr.w     w0
    249c:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxR);
    249e:	1e 00 78    	mov.w     [w14], w0
    24a0:	30 00 90    	mov.w     [w0+6], w0
    24a2:	10 00 78    	mov.w     [w0], w0
    24a4:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(*(oc->OCxRS)));
    24a6:	1e 02 90    	mov.w     [w14+2], w4
    24a8:	ae 02 90    	mov.w     [w14+4], w5
    24aa:	1e 00 78    	mov.w     [w14], w0
    24ac:	20 00 90    	mov.w     [w0+4], w0
    24ae:	10 00 78    	mov.w     [w0], w0
    24b0:	80 00 eb    	clr.w     w1
    24b2:	00 01 be    	mov.d     w0, w2
    24b4:	04 00 be    	mov.d     w4, w0
    24b6:	05 f8 07    	rcall     0x14c2 <___udivsi3>
    24b8:	00 00 78    	mov.w     w0, w0
}
    24ba:	00 80 fa    	ulnk      
    24bc:	00 00 06    	return    

000024be <___pwmWrite>:

void __pwmWrite(_PIN *self, uint16_t val) {
    24be:	0a 00 fa    	lnk       #0xa
    24c0:	30 07 98    	mov.w     w0, [w14+6]
    24c2:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    24c4:	3e 00 90    	mov.w     [w14+6], w0
    24c6:	00 08 90    	mov.w     [w0+16], w0
    24c8:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(*(oc->OCxRS));
    24ca:	4e 00 90    	mov.w     [w14+8], w0
    24cc:	61 01 b8    	mul.uu    w0, #0x1, w2
    24ce:	1e 00 78    	mov.w     [w14], w0
    24d0:	20 00 90    	mov.w     [w0+4], w0
    24d2:	10 00 78    	mov.w     [w0], w0
    24d4:	80 00 eb    	clr.w     w1
    24d6:	00 9a b9    	mul.ss    w3, w0, w4
    24d8:	04 02 78    	mov.w     w4, w4
    24da:	02 8b b9    	mul.ss    w1, w2, w6
    24dc:	86 02 78    	mov.w     w6, w5
    24de:	05 02 42    	add.w     w4, w5, w4
    24e0:	00 10 b8    	mul.uu    w2, w0, w0
    24e2:	01 02 42    	add.w     w4, w1, w4
    24e4:	84 00 78    	mov.w     w4, w1
    24e6:	10 07 98    	mov.w     w0, [w14+2]
    24e8:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxR) = temp.w[1];
    24ea:	1e 00 78    	mov.w     [w14], w0
    24ec:	30 00 90    	mov.w     [w0+6], w0
    24ee:	ae 00 90    	mov.w     [w14+4], w1
    24f0:	01 08 78    	mov.w     w1, [w0]
}
    24f2:	00 80 fa    	ulnk      
    24f4:	00 00 06    	return    

000024f6 <___servoRead>:

uint16_t __servoRead(_PIN *self) {
    24f6:	08 00 fa    	lnk       #0x8
    24f8:	30 07 98    	mov.w     w0, [w14+6]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    24fa:	3e 00 90    	mov.w     [w14+6], w0
    24fc:	00 08 90    	mov.w     [w0+16], w0
    24fe:	00 0f 78    	mov.w     w0, [w14]
    temp.w[0] = 0;
    2500:	00 00 eb    	clr.w     w0
    2502:	10 07 98    	mov.w     w0, [w14+2]
    temp.w[1] = *(oc->OCxRS)-oc->servooffset;
    2504:	1e 00 78    	mov.w     [w14], w0
    2506:	20 00 90    	mov.w     [w0+4], w0
    2508:	90 00 78    	mov.w     [w0], w1
    250a:	1e 00 78    	mov.w     [w14], w0
    250c:	60 00 90    	mov.w     [w0+12], w0
    250e:	00 80 50    	sub.w     w1, w0, w0
    2510:	20 07 98    	mov.w     w0, [w14+4]
    return (uint16_t)(temp.ul/(uint32_t)(oc->servomultiplier));
    2512:	1e 02 90    	mov.w     [w14+2], w4
    2514:	ae 02 90    	mov.w     [w14+4], w5
    2516:	1e 00 78    	mov.w     [w14], w0
    2518:	70 00 90    	mov.w     [w0+14], w0
    251a:	80 00 eb    	clr.w     w1
    251c:	00 01 be    	mov.d     w0, w2
    251e:	04 00 be    	mov.d     w4, w0
    2520:	d0 f7 07    	rcall     0x14c2 <___udivsi3>
    2522:	00 00 78    	mov.w     w0, w0
}
    2524:	00 80 fa    	ulnk      
    2526:	00 00 06    	return    

00002528 <___servoWrite>:

void __servoWrite(_PIN *self, uint16_t val) {
    2528:	0a 00 fa    	lnk       #0xa
    252a:	30 07 98    	mov.w     w0, [w14+6]
    252c:	41 07 98    	mov.w     w1, [w14+8]
    WORD32 temp;
    _OC *oc;

    oc = (_OC *)(self->owner);
    252e:	3e 00 90    	mov.w     [w14+6], w0
    2530:	00 08 90    	mov.w     [w0+16], w0
    2532:	00 0f 78    	mov.w     w0, [w14]
    temp.ul = (uint32_t)val*(uint32_t)(oc->servomultiplier);
    2534:	4e 00 90    	mov.w     [w14+8], w0
    2536:	61 01 b8    	mul.uu    w0, #0x1, w2
    2538:	1e 00 78    	mov.w     [w14], w0
    253a:	70 00 90    	mov.w     [w0+14], w0
    253c:	80 00 eb    	clr.w     w1
    253e:	00 9a b9    	mul.ss    w3, w0, w4
    2540:	04 02 78    	mov.w     w4, w4
    2542:	02 8b b9    	mul.ss    w1, w2, w6
    2544:	86 02 78    	mov.w     w6, w5
    2546:	05 02 42    	add.w     w4, w5, w4
    2548:	00 10 b8    	mul.uu    w2, w0, w0
    254a:	01 02 42    	add.w     w4, w1, w4
    254c:	84 00 78    	mov.w     w4, w1
    254e:	10 07 98    	mov.w     w0, [w14+2]
    2550:	21 07 98    	mov.w     w1, [w14+4]
    *(oc->OCxRS) = oc->servooffset+temp.w[1];
    2552:	1e 00 78    	mov.w     [w14], w0
    2554:	20 00 90    	mov.w     [w0+4], w0
    2556:	9e 00 78    	mov.w     [w14], w1
    2558:	61 01 90    	mov.w     [w1+12], w2
    255a:	ae 00 90    	mov.w     [w14+4], w1
    255c:	81 00 41    	add.w     w2, w1, w1
    255e:	01 08 78    	mov.w     w1, [w0]
}
    2560:	00 80 fa    	ulnk      
    2562:	00 00 06    	return    

00002564 <_init_oc>:

void init_oc(void) {
    2564:	00 00 fa    	lnk       #0x0
    oc_init(&oc1, (uint16_t *)&OC1CON1, (uint16_t *)&OC1CON2, 
    2566:	26 01 20    	mov.w     #0x12, w6
    2568:	85 19 20    	mov.w     #0x198, w5
    256a:	64 19 20    	mov.w     #0x196, w4
    256c:	43 19 20    	mov.w     #0x194, w3
    256e:	22 19 20    	mov.w     #0x192, w2
    2570:	01 19 20    	mov.w     #0x190, w1
    2572:	80 9e 20    	mov.w     #0x9e8, w0
    2574:	42 00 07    	rcall     0x25fa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC1RS, (uint16_t *)&OC1R, (uint16_t *)&OC1TMR, 18);
    oc_init(&oc2, (uint16_t *)&OC2CON1, (uint16_t *)&OC2CON2, 
    2576:	36 01 20    	mov.w     #0x13, w6
    2578:	25 1a 20    	mov.w     #0x1a2, w5
    257a:	04 1a 20    	mov.w     #0x1a0, w4
    257c:	e3 19 20    	mov.w     #0x19e, w3
    257e:	c2 19 20    	mov.w     #0x19c, w2
    2580:	a1 19 20    	mov.w     #0x19a, w1
    2582:	a0 9f 20    	mov.w     #0x9fa, w0
    2584:	3a 00 07    	rcall     0x25fa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC2RS, (uint16_t *)&OC2R, (uint16_t *)&OC2TMR, 19);
    oc_init(&oc3, (uint16_t *)&OC3CON1, (uint16_t *)&OC3CON2, 
    2586:	46 01 20    	mov.w     #0x14, w6
    2588:	c5 1a 20    	mov.w     #0x1ac, w5
    258a:	a4 1a 20    	mov.w     #0x1aa, w4
    258c:	83 1a 20    	mov.w     #0x1a8, w3
    258e:	62 1a 20    	mov.w     #0x1a6, w2
    2590:	41 1a 20    	mov.w     #0x1a4, w1
    2592:	c0 a0 20    	mov.w     #0xa0c, w0
    2594:	32 00 07    	rcall     0x25fa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC3RS, (uint16_t *)&OC3R, (uint16_t *)&OC3TMR, 20);
    oc_init(&oc4, (uint16_t *)&OC4CON1, (uint16_t *)&OC4CON2, 
    2596:	56 01 20    	mov.w     #0x15, w6
    2598:	65 1b 20    	mov.w     #0x1b6, w5
    259a:	44 1b 20    	mov.w     #0x1b4, w4
    259c:	23 1b 20    	mov.w     #0x1b2, w3
    259e:	02 1b 20    	mov.w     #0x1b0, w2
    25a0:	e1 1a 20    	mov.w     #0x1ae, w1
    25a2:	e0 a1 20    	mov.w     #0xa1e, w0
    25a4:	2a 00 07    	rcall     0x25fa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC4RS, (uint16_t *)&OC4R, (uint16_t *)&OC4TMR, 21);
    oc_init(&oc5, (uint16_t *)&OC5CON1, (uint16_t *)&OC5CON2, 
    25a6:	66 01 20    	mov.w     #0x16, w6
    25a8:	05 1c 20    	mov.w     #0x1c0, w5
    25aa:	e4 1b 20    	mov.w     #0x1be, w4
    25ac:	c3 1b 20    	mov.w     #0x1bc, w3
    25ae:	a2 1b 20    	mov.w     #0x1ba, w2
    25b0:	81 1b 20    	mov.w     #0x1b8, w1
    25b2:	00 a3 20    	mov.w     #0xa30, w0
    25b4:	22 00 07    	rcall     0x25fa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC5RS, (uint16_t *)&OC5R, (uint16_t *)&OC5TMR, 22);
    oc_init(&oc6, (uint16_t *)&OC6CON1, (uint16_t *)&OC6CON2, 
    25b6:	76 01 20    	mov.w     #0x17, w6
    25b8:	a5 1c 20    	mov.w     #0x1ca, w5
    25ba:	84 1c 20    	mov.w     #0x1c8, w4
    25bc:	63 1c 20    	mov.w     #0x1c6, w3
    25be:	42 1c 20    	mov.w     #0x1c4, w2
    25c0:	21 1c 20    	mov.w     #0x1c2, w1
    25c2:	20 a4 20    	mov.w     #0xa42, w0
    25c4:	1a 00 07    	rcall     0x25fa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC6RS, (uint16_t *)&OC6R, (uint16_t *)&OC6TMR, 23);
    oc_init(&oc7, (uint16_t *)&OC7CON1, (uint16_t *)&OC7CON2, 
    25c6:	86 01 20    	mov.w     #0x18, w6
    25c8:	45 1d 20    	mov.w     #0x1d4, w5
    25ca:	24 1d 20    	mov.w     #0x1d2, w4
    25cc:	03 1d 20    	mov.w     #0x1d0, w3
    25ce:	e2 1c 20    	mov.w     #0x1ce, w2
    25d0:	c1 1c 20    	mov.w     #0x1cc, w1
    25d2:	40 a5 20    	mov.w     #0xa54, w0
    25d4:	12 00 07    	rcall     0x25fa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC7RS, (uint16_t *)&OC7R, (uint16_t *)&OC7TMR, 24);
    oc_init(&oc8, (uint16_t *)&OC8CON1, (uint16_t *)&OC8CON2, 
    25d6:	96 01 20    	mov.w     #0x19, w6
    25d8:	e5 1d 20    	mov.w     #0x1de, w5
    25da:	c4 1d 20    	mov.w     #0x1dc, w4
    25dc:	a3 1d 20    	mov.w     #0x1da, w3
    25de:	82 1d 20    	mov.w     #0x1d8, w2
    25e0:	61 1d 20    	mov.w     #0x1d6, w1
    25e2:	60 a6 20    	mov.w     #0xa66, w0
    25e4:	0a 00 07    	rcall     0x25fa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC8RS, (uint16_t *)&OC8R, (uint16_t *)&OC8TMR, 25);
    oc_init(&oc9, (uint16_t *)&OC9CON1, (uint16_t *)&OC9CON2, 
    25e6:	36 02 20    	mov.w     #0x23, w6
    25e8:	85 1e 20    	mov.w     #0x1e8, w5
    25ea:	64 1e 20    	mov.w     #0x1e6, w4
    25ec:	43 1e 20    	mov.w     #0x1e4, w3
    25ee:	22 1e 20    	mov.w     #0x1e2, w2
    25f0:	01 1e 20    	mov.w     #0x1e0, w1
    25f2:	80 a7 20    	mov.w     #0xa78, w0
    25f4:	02 00 07    	rcall     0x25fa <_oc_init> <L0> <.LFB5> <.LFE4>
            (uint16_t *)&OC9RS, (uint16_t *)&OC9R, (uint16_t *)&OC9TMR, 35);
}
    25f6:	00 80 fa    	ulnk      
    25f8:	00 00 06    	return    

000025fa <_oc_init>:

void oc_init(_OC *self, uint16_t *OCxCON1, uint16_t *OCxCON2, 
             uint16_t *OCxRS, uint16_t *OCxR, uint16_t *OCxTMR, 
             uint16_t rpnum) {
    25fa:	0e 00 fa    	lnk       #0xe
    25fc:	00 0f 78    	mov.w     w0, [w14]
    25fe:	11 07 98    	mov.w     w1, [w14+2]
    2600:	22 07 98    	mov.w     w2, [w14+4]
    2602:	33 07 98    	mov.w     w3, [w14+6]
    2604:	44 07 98    	mov.w     w4, [w14+8]
    2606:	55 07 98    	mov.w     w5, [w14+10]
    2608:	66 07 98    	mov.w     w6, [w14+12]
    self->OCxCON1 = OCxCON1;
    260a:	1e 00 78    	mov.w     [w14], w0
    260c:	9e 00 90    	mov.w     [w14+2], w1
    260e:	01 08 78    	mov.w     w1, [w0]
    self->OCxCON2 = OCxCON2;
    2610:	1e 00 78    	mov.w     [w14], w0
    2612:	ae 00 90    	mov.w     [w14+4], w1
    2614:	11 00 98    	mov.w     w1, [w0+2]
    self->OCxRS = OCxRS;
    2616:	1e 00 78    	mov.w     [w14], w0
    2618:	be 00 90    	mov.w     [w14+6], w1
    261a:	21 00 98    	mov.w     w1, [w0+4]
    self->OCxR = OCxR;
    261c:	1e 00 78    	mov.w     [w14], w0
    261e:	ce 00 90    	mov.w     [w14+8], w1
    2620:	31 00 98    	mov.w     w1, [w0+6]
    self->OCxTMR = OCxTMR;
    2622:	1e 00 78    	mov.w     [w14], w0
    2624:	de 00 90    	mov.w     [w14+10], w1
    2626:	41 00 98    	mov.w     w1, [w0+8]
    self->servooffset = (uint16_t)(1e-3*FCY);
    2628:	1e 00 78    	mov.w     [w14], w0
    262a:	01 e8 23    	mov.w     #0x3e80, w1
    262c:	61 00 98    	mov.w     w1, [w0+12]
    self->servomultiplier = (uint16_t)(1e-3*FCY);
    262e:	1e 00 78    	mov.w     [w14], w0
    2630:	01 e8 23    	mov.w     #0x3e80, w1
    2632:	71 00 98    	mov.w     w1, [w0+14]
    self->rpnum = rpnum;
    2634:	1e 00 78    	mov.w     [w14], w0
    2636:	ee 00 90    	mov.w     [w14+12], w1
    2638:	51 00 98    	mov.w     w1, [w0+10]
    self->pin = NULL;
    263a:	1e 00 78    	mov.w     [w14], w0
    263c:	80 00 eb    	clr.w     w1
    263e:	01 08 98    	mov.w     w1, [w0+16]
}
    2640:	00 80 fa    	ulnk      
    2642:	00 00 06    	return    

00002644 <_oc_free>:

void oc_free(_OC *self) {
    2644:	02 00 fa    	lnk       #0x2
    2646:	00 0f 78    	mov.w     w0, [w14]
    *(self->OCxCON1) = 0;
    2648:	1e 00 78    	mov.w     [w14], w0
    264a:	10 00 78    	mov.w     [w0], w0
    264c:	80 00 eb    	clr.w     w1
    264e:	01 08 78    	mov.w     w1, [w0]
    *(self->OCxCON2) = 0;
    2650:	1e 00 78    	mov.w     [w14], w0
    2652:	10 00 90    	mov.w     [w0+2], w0
    2654:	80 00 eb    	clr.w     w1
    2656:	01 08 78    	mov.w     w1, [w0]
    if (self->pin) {
    2658:	1e 00 78    	mov.w     [w14], w0
    265a:	00 08 90    	mov.w     [w0+16], w0
    265c:	00 00 e0    	cp0.w     w0
    265e:	2f 00 32    	bra       Z, 0x26be <.L7>
        __builtin_write_OSCCONL(OSCCON&0xBF);
    2660:	11 3a 80    	mov.w     0x742, w1
    2662:	f0 0b 20    	mov.w     #0xbf, w0
    2664:	00 81 60    	and.w     w1, w0, w2
    2666:	60 04 20    	mov.w     #0x46, w0
    2668:	71 05 20    	mov.w     #0x57, w1
    266a:	23 74 20    	mov.w     #0x742, w3
    266c:	80 49 78    	mov.b     w0, [w3]
    266e:	81 49 78    	mov.b     w1, [w3]
    2670:	82 49 78    	mov.b     w2, [w3]
        *(self->pin->rpor) &= ~(0x3F<<(self->pin->rpshift));
    2672:	1e 00 78    	mov.w     [w14], w0
    2674:	00 08 90    	mov.w     [w0+16], w0
    2676:	70 00 90    	mov.w     [w0+14], w0
    2678:	9e 00 78    	mov.w     [w14], w1
    267a:	81 08 90    	mov.w     [w1+16], w1
    267c:	f1 00 90    	mov.w     [w1+14], w1
    267e:	11 01 78    	mov.w     [w1], w2
    2680:	9e 00 78    	mov.w     [w14], w1
    2682:	81 08 90    	mov.w     [w1+16], w1
    2684:	a1 48 90    	mov.b     [w1+10], w1
    2686:	81 80 fb    	ze        w1, w1
    2688:	f3 03 20    	mov.w     #0x3f, w3
    268a:	81 18 dd    	sl.w      w3, w1, w1
    268c:	81 80 ea    	com.w     w1, w1
    268e:	81 00 61    	and.w     w2, w1, w1
    2690:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2692:	10 3a 80    	mov.w     0x742, w0
    2694:	00 01 78    	mov.w     w0, w2
    2696:	02 60 a0    	bset.w    w2, #0x6
    2698:	60 04 20    	mov.w     #0x46, w0
    269a:	71 05 20    	mov.w     #0x57, w1
    269c:	23 74 20    	mov.w     #0x742, w3
    269e:	80 49 78    	mov.b     w0, [w3]
    26a0:	81 49 78    	mov.b     w1, [w3]
    26a2:	82 49 78    	mov.b     w2, [w3]
        self->pin->owner = NULL;
    26a4:	1e 00 78    	mov.w     [w14], w0
    26a6:	00 08 90    	mov.w     [w0+16], w0
    26a8:	80 00 eb    	clr.w     w1
    26aa:	01 08 98    	mov.w     w1, [w0+16]
        pin_digitalOut(self->pin);
    26ac:	1e 00 78    	mov.w     [w14], w0
    26ae:	00 08 90    	mov.w     [w0+16], w0
    26b0:	36 fe 07    	rcall     0x231e <_pin_digitalOut> <L0> <.LFB6> <.LFE5>
        pin_clear(self->pin);
    26b2:	1e 00 78    	mov.w     [w14], w0
    26b4:	00 08 90    	mov.w     [w0+16], w0
    26b6:	a5 fe 07    	rcall     0x2402 <_pin_clear> <L0> <.LFB9> <.LFE8>
        self->pin = NULL;
    26b8:	1e 00 78    	mov.w     [w14], w0
    26ba:	80 00 eb    	clr.w     w1
    26bc:	01 08 98    	mov.w     w1, [w0+16]

000026be <.L7>:
    }
}
    26be:	00 80 fa    	ulnk      
    26c0:	00 00 06    	return    

000026c2 <_oc_pwm>:

void oc_pwm(_OC *self, _PIN *pin, _TIMER *timer, float freq, uint16_t duty) {
    26c2:	10 00 fa    	lnk       #0x10
    26c4:	88 1f 78    	mov.w     w8, [w15++]
    26c6:	20 07 98    	mov.w     w0, [w14+4]
    26c8:	31 07 98    	mov.w     w1, [w14+6]
    26ca:	42 07 98    	mov.w     w2, [w14+8]
    26cc:	54 07 98    	mov.w     w4, [w14+10]
    26ce:	65 07 98    	mov.w     w5, [w14+12]
    26d0:	73 07 98    	mov.w     w3, [w14+14]
    WORD32 temp;

    if (pin->rpnum==-1)
    26d2:	3e 00 90    	mov.w     [w14+6], w0
    26d4:	60 00 90    	mov.w     [w0+12], w0
    26d6:	e1 0f 40    	add.w     w0, #0x1, [w15]
    26d8:	9c 00 32    	bra       Z, 0x2812 <.L18>
        return;
    if (pin->owner==NULL) {
    26da:	3e 00 90    	mov.w     [w14+6], w0
    26dc:	00 08 90    	mov.w     [w0+16], w0
    26de:	00 00 e0    	cp0.w     w0
    26e0:	33 00 3a    	bra       NZ, 0x2748 <.L12>
        self->pin = pin;
    26e2:	2e 00 90    	mov.w     [w14+4], w0
    26e4:	be 00 90    	mov.w     [w14+6], w1
    26e6:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    26e8:	3e 00 90    	mov.w     [w14+6], w0
    26ea:	ae 00 90    	mov.w     [w14+4], w1
    26ec:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    26ee:	11 3a 80    	mov.w     0x742, w1
    26f0:	f0 0b 20    	mov.w     #0xbf, w0
    26f2:	00 81 60    	and.w     w1, w0, w2
    26f4:	60 04 20    	mov.w     #0x46, w0
    26f6:	71 05 20    	mov.w     #0x57, w1
    26f8:	23 74 20    	mov.w     #0x742, w3
    26fa:	80 49 78    	mov.b     w0, [w3]
    26fc:	81 49 78    	mov.b     w1, [w3]
    26fe:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    2700:	3e 00 90    	mov.w     [w14+6], w0
    2702:	70 00 90    	mov.w     [w0+14], w0
    2704:	be 00 90    	mov.w     [w14+6], w1
    2706:	f1 00 90    	mov.w     [w1+14], w1
    2708:	11 01 78    	mov.w     [w1], w2
    270a:	be 00 90    	mov.w     [w14+6], w1
    270c:	a1 48 90    	mov.b     [w1+10], w1
    270e:	81 80 fb    	ze        w1, w1
    2710:	f3 03 20    	mov.w     #0x3f, w3
    2712:	81 18 dd    	sl.w      w3, w1, w1
    2714:	81 80 ea    	com.w     w1, w1
    2716:	81 00 61    	and.w     w2, w1, w1
    2718:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    271a:	3e 00 90    	mov.w     [w14+6], w0
    271c:	70 00 90    	mov.w     [w0+14], w0
    271e:	be 00 90    	mov.w     [w14+6], w1
    2720:	f1 00 90    	mov.w     [w1+14], w1
    2722:	11 01 78    	mov.w     [w1], w2
    2724:	ae 00 90    	mov.w     [w14+4], w1
    2726:	d1 01 90    	mov.w     [w1+10], w3
    2728:	be 00 90    	mov.w     [w14+6], w1
    272a:	a1 48 90    	mov.b     [w1+10], w1
    272c:	81 80 fb    	ze        w1, w1
    272e:	81 18 dd    	sl.w      w3, w1, w1
    2730:	82 80 70    	ior.w     w1, w2, w1
    2732:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2734:	10 3a 80    	mov.w     0x742, w0
    2736:	00 01 78    	mov.w     w0, w2
    2738:	02 60 a0    	bset.w    w2, #0x6
    273a:	60 04 20    	mov.w     #0x46, w0
    273c:	71 05 20    	mov.w     #0x57, w1
    273e:	23 74 20    	mov.w     #0x742, w3
    2740:	80 49 78    	mov.b     w0, [w3]
    2742:	81 49 78    	mov.b     w1, [w3]
    2744:	82 49 78    	mov.b     w2, [w3]
    2746:	05 00 37    	bra       0x2752 <.L13>

00002748 <.L12>:
    } else if (pin->owner!=(void *)self) {
    2748:	3e 00 90    	mov.w     [w14+6], w0
    274a:	80 08 90    	mov.w     [w0+16], w1
    274c:	2e 00 90    	mov.w     [w14+4], w0
    274e:	80 8f 50    	sub.w     w1, w0, [w15]
    2750:	62 00 3a    	bra       NZ, 0x2816 <.L19>

00002752 <.L13>:
        return;
    }
    if (timer) {
    2752:	4e 00 90    	mov.w     [w14+8], w0
    2754:	00 00 e0    	cp0.w     w0
    2756:	1c 00 32    	bra       Z, 0x2790 <.L14>
        *(self->OCxCON1) = ((timer->octselnum)<<10)|0x0006;
    2758:	2e 00 90    	mov.w     [w14+4], w0
    275a:	10 00 78    	mov.w     [w0], w0
    275c:	ce 00 90    	mov.w     [w14+8], w1
    275e:	e1 00 90    	mov.w     [w1+12], w1
    2760:	ca 08 dd    	sl.w      w1, #0xa, w1
    2762:	61 00 b3    	ior.w     #0x6, w1
    2764:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x001F;
    2766:	2e 00 90    	mov.w     [w14+4], w0
    2768:	10 00 90    	mov.w     [w0+2], w0
    276a:	f1 01 20    	mov.w     #0x1f, w1
    276c:	01 08 78    	mov.w     w1, [w0]
        timer_setFreq(timer, freq);
    276e:	5e 01 90    	mov.w     [w14+10], w2
    2770:	ee 01 90    	mov.w     [w14+12], w3
    2772:	4e 00 90    	mov.w     [w14+8], w0
    2774:	e4 f8 07    	rcall     0x193e <_timer_setFreq> <L0> <.LFB10> <.LFE9>
        *(self->OCxRS) = *(timer->PRx);
    2776:	2e 00 90    	mov.w     [w14+4], w0
    2778:	20 00 90    	mov.w     [w0+4], w0
    277a:	ce 00 90    	mov.w     [w14+8], w1
    277c:	91 00 90    	mov.w     [w1+2], w1
    277e:	91 00 78    	mov.w     [w1], w1
    2780:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxTMR) = 0;
    2782:	2e 00 90    	mov.w     [w14+4], w0
    2784:	40 00 90    	mov.w     [w0+8], w0
    2786:	80 00 eb    	clr.w     w1
    2788:	01 08 78    	mov.w     w1, [w0]
        timer_start(timer);
    278a:	4e 00 90    	mov.w     [w14+8], w0
    278c:	0d f9 07    	rcall     0x19a8 <_timer_start> <L0> <.LFB13> <.LFE12>
    278e:	25 00 37    	bra       0x27da <.L15>

00002790 <.L14>:
    } else {
        *(self->OCxCON1) = 0x1C06;
    2790:	2e 00 90    	mov.w     [w14+4], w0
    2792:	10 00 78    	mov.w     [w0], w0
    2794:	61 c0 21    	mov.w     #0x1c06, w1
    2796:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x001F;
    2798:	2e 00 90    	mov.w     [w14+4], w0
    279a:	10 00 90    	mov.w     [w0+2], w0
    279c:	f1 01 20    	mov.w     #0x1f, w1
    279e:	01 08 78    	mov.w     w1, [w0]
        if (freq<(FCY/65536.))
    27a0:	18 c0 b3    	mov.b     #0x1, w8
    27a2:	02 40 22    	mov.w     #0x2400, w2
    27a4:	43 37 24    	mov.w     #0x4374, w3
    27a6:	5e 00 90    	mov.w     [w14+10], w0
    27a8:	ee 00 90    	mov.w     [w14+12], w1
    27aa:	e3 f5 07    	rcall     0x1372 <___eqsf2> <___lesf2> <___ltsf2>
    27ac:	00 00 e0    	cp0.w     w0
    27ae:	01 00 35    	bra       LT, 0x27b2 <.L16>
    27b0:	00 44 eb    	clr.b     w8

000027b2 <.L16>:
    27b2:	08 04 e0    	cp0.b     w8
    27b4:	05 00 32    	bra       Z, 0x27c0 <.L17>
            *(self->OCxRS) = 0xFFFF;
    27b6:	2e 00 90    	mov.w     [w14+4], w0
    27b8:	20 00 90    	mov.w     [w0+4], w0
    27ba:	80 80 eb    	setm.w    w1
    27bc:	01 08 78    	mov.w     w1, [w0]
    27be:	0d 00 37    	bra       0x27da <.L15>

000027c0 <.L17>:
        else
            *(self->OCxRS) = (uint16_t)(FCY/freq-1.);
    27c0:	2e 00 90    	mov.w     [w14+4], w0
    27c2:	20 04 90    	mov.w     [w0+4], w8
    27c4:	5e 01 90    	mov.w     [w14+10], w2
    27c6:	ee 01 90    	mov.w     [w14+12], w3
    27c8:	00 40 22    	mov.w     #0x2400, w0
    27ca:	41 b7 24    	mov.w     #0x4b74, w1
    27cc:	90 f5 07    	rcall     0x12ee <___divsf3>
    27ce:	02 00 20    	mov.w     #0x0, w2
    27d0:	03 f8 23    	mov.w     #0x3f80, w3
    27d2:	2f f5 07    	rcall     0x1232 <___subsf3>
    27d4:	d2 f5 07    	rcall     0x137a <___fixunssfsi>
    27d6:	00 00 78    	mov.w     w0, w0
    27d8:	00 0c 78    	mov.w     w0, [w8]

000027da <.L15>:
    }
    temp.ul = (uint32_t)duty*(uint32_t)(*(self->OCxRS));
    27da:	7e 00 90    	mov.w     [w14+14], w0
    27dc:	61 01 b8    	mul.uu    w0, #0x1, w2
    27de:	2e 00 90    	mov.w     [w14+4], w0
    27e0:	20 00 90    	mov.w     [w0+4], w0
    27e2:	10 00 78    	mov.w     [w0], w0
    27e4:	80 00 eb    	clr.w     w1
    27e6:	00 9a b9    	mul.ss    w3, w0, w4
    27e8:	04 02 78    	mov.w     w4, w4
    27ea:	02 8b b9    	mul.ss    w1, w2, w6
    27ec:	86 02 78    	mov.w     w6, w5
    27ee:	05 02 42    	add.w     w4, w5, w4
    27f0:	00 10 b8    	mul.uu    w2, w0, w0
    27f2:	01 02 42    	add.w     w4, w1, w4
    27f4:	84 00 78    	mov.w     w4, w1
    27f6:	00 8f be    	mov.d     w0, [w14]
    *(self->OCxR) = temp.w[1];
    27f8:	2e 00 90    	mov.w     [w14+4], w0
    27fa:	30 00 90    	mov.w     [w0+6], w0
    27fc:	9e 00 90    	mov.w     [w14+2], w1
    27fe:	01 08 78    	mov.w     w1, [w0]
    self->pin->write = __pwmWrite;
    2800:	2e 00 90    	mov.w     [w14+4], w0
    2802:	00 08 90    	mov.w     [w0+16], w0
    2804:	e1 4b 22    	mov.w     #0x24be, w1
    2806:	11 08 98    	mov.w     w1, [w0+18]
    self->pin->read = __pwmRead;
    2808:	2e 00 90    	mov.w     [w14+4], w0
    280a:	00 08 90    	mov.w     [w0+16], w0
    280c:	01 49 22    	mov.w     #0x2490, w1
    280e:	21 08 98    	mov.w     w1, [w0+20]
    2810:	03 00 37    	bra       0x2818 <.L9>

00002812 <.L18>:
    2812:	00 00 00    	nop       
    2814:	01 00 37    	bra       0x2818 <.L9>

00002816 <.L19>:
    2816:	00 00 00    	nop       

00002818 <.L9>:
}
    2818:	4f 04 78    	mov.w     [--w15], w8
    281a:	00 80 fa    	ulnk      
    281c:	00 00 06    	return    

0000281e <_oc_servo>:

void oc_servo(_OC *self, _PIN *pin, _TIMER *timer, float interval, 
              float min_width, float max_width, uint16_t pos) {
    281e:	14 00 fa    	lnk       #0x14
    2820:	20 07 98    	mov.w     w0, [w14+4]
    2822:	31 07 98    	mov.w     w1, [w14+6]
    2824:	42 07 98    	mov.w     w2, [w14+8]
    2826:	54 07 98    	mov.w     w4, [w14+10]
    2828:	65 07 98    	mov.w     w5, [w14+12]
    282a:	76 07 98    	mov.w     w6, [w14+14]
    282c:	07 0f 98    	mov.w     w7, [w14+16]
    282e:	13 0f 98    	mov.w     w3, [w14+18]
    WORD32 temp;

    if (pin->rpnum==-1)
    2830:	3e 00 90    	mov.w     [w14+6], w0
    2832:	60 00 90    	mov.w     [w0+12], w0
    2834:	e1 0f 40    	add.w     w0, #0x1, [w15]
    2836:	86 00 32    	bra       Z, 0x2944 <.L25>
        return;
    if (pin->owner==NULL) {
    2838:	3e 00 90    	mov.w     [w14+6], w0
    283a:	00 08 90    	mov.w     [w0+16], w0
    283c:	00 00 e0    	cp0.w     w0
    283e:	33 00 3a    	bra       NZ, 0x28a6 <.L23>
        self->pin = pin;
    2840:	2e 00 90    	mov.w     [w14+4], w0
    2842:	be 00 90    	mov.w     [w14+6], w1
    2844:	01 08 98    	mov.w     w1, [w0+16]
        pin->owner = (void *)self;
    2846:	3e 00 90    	mov.w     [w14+6], w0
    2848:	ae 00 90    	mov.w     [w14+4], w1
    284a:	01 08 98    	mov.w     w1, [w0+16]
        __builtin_write_OSCCONL(OSCCON&0xBF);
    284c:	11 3a 80    	mov.w     0x742, w1
    284e:	f0 0b 20    	mov.w     #0xbf, w0
    2850:	00 81 60    	and.w     w1, w0, w2
    2852:	60 04 20    	mov.w     #0x46, w0
    2854:	71 05 20    	mov.w     #0x57, w1
    2856:	23 74 20    	mov.w     #0x742, w3
    2858:	80 49 78    	mov.b     w0, [w3]
    285a:	81 49 78    	mov.b     w1, [w3]
    285c:	82 49 78    	mov.b     w2, [w3]
        *(pin->rpor) &= ~(0x3F<<(pin->rpshift));
    285e:	3e 00 90    	mov.w     [w14+6], w0
    2860:	70 00 90    	mov.w     [w0+14], w0
    2862:	be 00 90    	mov.w     [w14+6], w1
    2864:	f1 00 90    	mov.w     [w1+14], w1
    2866:	11 01 78    	mov.w     [w1], w2
    2868:	be 00 90    	mov.w     [w14+6], w1
    286a:	a1 48 90    	mov.b     [w1+10], w1
    286c:	81 80 fb    	ze        w1, w1
    286e:	f3 03 20    	mov.w     #0x3f, w3
    2870:	81 18 dd    	sl.w      w3, w1, w1
    2872:	81 80 ea    	com.w     w1, w1
    2874:	81 00 61    	and.w     w2, w1, w1
    2876:	01 08 78    	mov.w     w1, [w0]
        *(pin->rpor) |= (self->rpnum)<<(pin->rpshift);
    2878:	3e 00 90    	mov.w     [w14+6], w0
    287a:	70 00 90    	mov.w     [w0+14], w0
    287c:	be 00 90    	mov.w     [w14+6], w1
    287e:	f1 00 90    	mov.w     [w1+14], w1
    2880:	11 01 78    	mov.w     [w1], w2
    2882:	ae 00 90    	mov.w     [w14+4], w1
    2884:	d1 01 90    	mov.w     [w1+10], w3
    2886:	be 00 90    	mov.w     [w14+6], w1
    2888:	a1 48 90    	mov.b     [w1+10], w1
    288a:	81 80 fb    	ze        w1, w1
    288c:	81 18 dd    	sl.w      w3, w1, w1
    288e:	82 80 70    	ior.w     w1, w2, w1
    2890:	01 08 78    	mov.w     w1, [w0]
        __builtin_write_OSCCONL(OSCCON|0x40);
    2892:	10 3a 80    	mov.w     0x742, w0
    2894:	00 01 78    	mov.w     w0, w2
    2896:	02 60 a0    	bset.w    w2, #0x6
    2898:	60 04 20    	mov.w     #0x46, w0
    289a:	71 05 20    	mov.w     #0x57, w1
    289c:	23 74 20    	mov.w     #0x742, w3
    289e:	80 49 78    	mov.b     w0, [w3]
    28a0:	81 49 78    	mov.b     w1, [w3]
    28a2:	82 49 78    	mov.b     w2, [w3]
    28a4:	05 00 37    	bra       0x28b0 <.L24>

000028a6 <.L23>:
    } else if (pin->owner!=(void *)self) {
    28a6:	3e 00 90    	mov.w     [w14+6], w0
    28a8:	80 08 90    	mov.w     [w0+16], w1
    28aa:	2e 00 90    	mov.w     [w14+4], w0
    28ac:	80 8f 50    	sub.w     w1, w0, [w15]
    28ae:	4c 00 3a    	bra       NZ, 0x2948 <.L26>

000028b0 <.L24>:
        return;
    }
    if (timer) {
    28b0:	4e 00 90    	mov.w     [w14+8], w0
    28b2:	00 00 e0    	cp0.w     w0
    28b4:	4a 00 32    	bra       Z, 0x294a <.L20>
        self->servooffset = (uint16_t)(FCY*min_width);
    28b6:	02 40 22    	mov.w     #0x2400, w2
    28b8:	43 b7 24    	mov.w     #0x4b74, w3
    28ba:	7e 00 90    	mov.w     [w14+14], w0
    28bc:	8e 08 90    	mov.w     [w14+16], w1
    28be:	cd f5 07    	rcall     0x145a <___mulsf3>
    28c0:	5c f5 07    	rcall     0x137a <___fixunssfsi>
    28c2:	80 00 78    	mov.w     w0, w1
    28c4:	2e 00 90    	mov.w     [w14+4], w0
    28c6:	61 00 98    	mov.w     w1, [w0+12]
        self->servomultiplier = (uint16_t)(FCY*(max_width-min_width));
    28c8:	7e 01 90    	mov.w     [w14+14], w2
    28ca:	8e 09 90    	mov.w     [w14+16], w3
    28cc:	3e b8 97    	mov.w     [w14-10], w0
    28ce:	ce b8 97    	mov.w     [w14-8], w1
    28d0:	b0 f4 07    	rcall     0x1232 <___subsf3>
    28d2:	02 40 22    	mov.w     #0x2400, w2
    28d4:	43 b7 24    	mov.w     #0x4b74, w3
    28d6:	c1 f5 07    	rcall     0x145a <___mulsf3>
    28d8:	50 f5 07    	rcall     0x137a <___fixunssfsi>
    28da:	80 00 78    	mov.w     w0, w1
    28dc:	2e 00 90    	mov.w     [w14+4], w0
    28de:	71 00 98    	mov.w     w1, [w0+14]
        *(self->OCxCON1) = 0x1C0F;
    28e0:	2e 00 90    	mov.w     [w14+4], w0
    28e2:	10 00 78    	mov.w     [w0], w0
    28e4:	f1 c0 21    	mov.w     #0x1c0f, w1
    28e6:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxCON2) = 0x0080|(timer->ocsyncselnum);
    28e8:	2e 00 90    	mov.w     [w14+4], w0
    28ea:	10 00 90    	mov.w     [w0+2], w0
    28ec:	ce 00 90    	mov.w     [w14+8], w1
    28ee:	f1 00 90    	mov.w     [w1+14], w1
    28f0:	01 70 a0    	bset.w    w1, #0x7
    28f2:	01 08 78    	mov.w     w1, [w0]
        *(self->OCxR) = 1;
    28f4:	2e 00 90    	mov.w     [w14+4], w0
    28f6:	30 00 90    	mov.w     [w0+6], w0
    28f8:	11 00 20    	mov.w     #0x1, w1
    28fa:	01 08 78    	mov.w     w1, [w0]
        temp.ul = (uint32_t)pos*(uint32_t)(self->servomultiplier);
    28fc:	1e 08 90    	mov.w     [w14+18], w0
    28fe:	61 01 b8    	mul.uu    w0, #0x1, w2
    2900:	2e 00 90    	mov.w     [w14+4], w0
    2902:	70 00 90    	mov.w     [w0+14], w0
    2904:	80 00 eb    	clr.w     w1
    2906:	00 9a b9    	mul.ss    w3, w0, w4
    2908:	04 02 78    	mov.w     w4, w4
    290a:	02 8b b9    	mul.ss    w1, w2, w6
    290c:	86 02 78    	mov.w     w6, w5
    290e:	05 02 42    	add.w     w4, w5, w4
    2910:	00 10 b8    	mul.uu    w2, w0, w0
    2912:	01 02 42    	add.w     w4, w1, w4
    2914:	84 00 78    	mov.w     w4, w1
    2916:	00 8f be    	mov.d     w0, [w14]
        *(self->OCxRS) = self->servooffset+temp.w[1];
    2918:	2e 00 90    	mov.w     [w14+4], w0
    291a:	20 00 90    	mov.w     [w0+4], w0
    291c:	ae 00 90    	mov.w     [w14+4], w1
    291e:	61 01 90    	mov.w     [w1+12], w2
    2920:	9e 00 90    	mov.w     [w14+2], w1
    2922:	81 00 41    	add.w     w2, w1, w1
    2924:	01 08 78    	mov.w     w1, [w0]
        timer_setPeriod(timer, interval);
    2926:	5e 01 90    	mov.w     [w14+10], w2
    2928:	ee 01 90    	mov.w     [w14+12], w3
    292a:	4e 00 90    	mov.w     [w14+8], w0
    292c:	6e f7 07    	rcall     0x180a <_timer_setPeriod> <L0> <.LFB8> <.LFE7>
        timer_start(timer);
    292e:	4e 00 90    	mov.w     [w14+8], w0
    2930:	3b f8 07    	rcall     0x19a8 <_timer_start> <L0> <.LFB13> <.LFE12>
        self->pin->write = __servoWrite;
    2932:	2e 00 90    	mov.w     [w14+4], w0
    2934:	00 08 90    	mov.w     [w0+16], w0
    2936:	81 52 22    	mov.w     #0x2528, w1
    2938:	11 08 98    	mov.w     w1, [w0+18]
        self->pin->read = __servoRead;
    293a:	2e 00 90    	mov.w     [w14+4], w0
    293c:	00 08 90    	mov.w     [w0+16], w0
    293e:	61 4f 22    	mov.w     #0x24f6, w1
    2940:	21 08 98    	mov.w     w1, [w0+20]
    2942:	03 00 37    	bra       0x294a <.L20>

00002944 <.L25>:
    2944:	00 00 00    	nop       
    2946:	01 00 37    	bra       0x294a <.L20>

00002948 <.L26>:
    2948:	00 00 00    	nop       

0000294a <.L20>:
    }
}
    294a:	00 80 fa    	ulnk      
    294c:	00 00 06    	return    

0000294e <_init_ui>:
    294e:	00 00 fa    	lnk       #0x0
    2950:	74 c0 b3    	mov.b     #0x7, w4
    2952:	63 4e 20    	mov.w     #0x4e6, w3
    2954:	82 2d 20    	mov.w     #0x2d8, w2
    2956:	a1 2d 20    	mov.w     #0x2da, w1
    2958:	00 80 20    	mov.w     #0x800, w0
    295a:	20 00 07    	rcall     0x299c <_led_init> <L0> <.LFB1> <.LFE0>
    295c:	00 42 eb    	clr.b     w4
    295e:	a3 4e 20    	mov.w     #0x4ea, w3
    2960:	82 2e 20    	mov.w     #0x2e8, w2
    2962:	a1 2e 20    	mov.w     #0x2ea, w1
    2964:	80 80 20    	mov.w     #0x808, w0
    2966:	1a 00 07    	rcall     0x299c <_led_init> <L0> <.LFB1> <.LFE0>
    2968:	14 c0 b3    	mov.b     #0x1, w4
    296a:	a3 4e 20    	mov.w     #0x4ea, w3
    296c:	82 2e 20    	mov.w     #0x2e8, w2
    296e:	a1 2e 20    	mov.w     #0x2ea, w1
    2970:	00 81 20    	mov.w     #0x810, w0
    2972:	14 00 07    	rcall     0x299c <_led_init> <L0> <.LFB1> <.LFE0>
    2974:	f4 c0 b3    	mov.b     #0xf, w4
    2976:	43 4e 20    	mov.w     #0x4e4, w3
    2978:	02 2d 20    	mov.w     #0x2d0, w2
    297a:	21 2d 20    	mov.w     #0x2d2, w1
    297c:	80 81 20    	mov.w     #0x818, w0
    297e:	ad 00 07    	rcall     0x2ada <_sw_init> <L0> <.LFB7> <.LFE6>
    2980:	c4 c0 b3    	mov.b     #0xc, w4
    2982:	43 4e 20    	mov.w     #0x4e4, w3
    2984:	02 2d 20    	mov.w     #0x2d0, w2
    2986:	21 2d 20    	mov.w     #0x2d2, w1
    2988:	00 82 20    	mov.w     #0x820, w0
    298a:	a7 00 07    	rcall     0x2ada <_sw_init> <L0> <.LFB7> <.LFE6>
    298c:	c4 c0 b3    	mov.b     #0xc, w4
    298e:	23 4e 20    	mov.w     #0x4e2, w3
    2990:	82 2c 20    	mov.w     #0x2c8, w2
    2992:	a1 2c 20    	mov.w     #0x2ca, w1
    2994:	80 82 20    	mov.w     #0x828, w0
    2996:	a1 00 07    	rcall     0x2ada <_sw_init> <L0> <.LFB7> <.LFE6>
    2998:	00 80 fa    	ulnk      
    299a:	00 00 06    	return    

0000299c <_led_init>:
    299c:	0a 00 fa    	lnk       #0xa
    299e:	00 0f 78    	mov.w     w0, [w14]
    29a0:	11 07 98    	mov.w     w1, [w14+2]
    29a2:	22 07 98    	mov.w     w2, [w14+4]
    29a4:	33 07 98    	mov.w     w3, [w14+6]
    29a6:	04 4f 98    	mov.b     w4, [w14+8]
    29a8:	1e 00 78    	mov.w     [w14], w0
    29aa:	9e 00 90    	mov.w     [w14+2], w1
    29ac:	01 08 78    	mov.w     w1, [w0]
    29ae:	1e 00 78    	mov.w     [w14], w0
    29b0:	ae 00 90    	mov.w     [w14+4], w1
    29b2:	11 00 98    	mov.w     w1, [w0+2]
    29b4:	1e 00 78    	mov.w     [w14], w0
    29b6:	be 00 90    	mov.w     [w14+6], w1
    29b8:	21 00 98    	mov.w     w1, [w0+4]
    29ba:	1e 00 78    	mov.w     [w14], w0
    29bc:	8e 48 90    	mov.b     [w14+8], w1
    29be:	61 40 98    	mov.b     w1, [w0+6]
    29c0:	1e 00 78    	mov.w     [w14], w0
    29c2:	20 00 90    	mov.w     [w0+4], w0
    29c4:	9e 00 78    	mov.w     [w14], w1
    29c6:	a1 00 90    	mov.w     [w1+4], w1
    29c8:	11 01 78    	mov.w     [w1], w2
    29ca:	9e 00 78    	mov.w     [w14], w1
    29cc:	e1 40 90    	mov.b     [w1+6], w1
    29ce:	81 80 fb    	ze        w1, w1
    29d0:	13 00 20    	mov.w     #0x1, w3
    29d2:	81 18 dd    	sl.w      w3, w1, w1
    29d4:	81 80 ea    	com.w     w1, w1
    29d6:	81 00 61    	and.w     w2, w1, w1
    29d8:	01 08 78    	mov.w     w1, [w0]
    29da:	1e 00 78    	mov.w     [w14], w0
    29dc:	10 00 78    	mov.w     [w0], w0
    29de:	9e 00 78    	mov.w     [w14], w1
    29e0:	91 00 78    	mov.w     [w1], w1
    29e2:	11 01 78    	mov.w     [w1], w2
    29e4:	9e 00 78    	mov.w     [w14], w1
    29e6:	e1 40 90    	mov.b     [w1+6], w1
    29e8:	81 80 fb    	ze        w1, w1
    29ea:	13 00 20    	mov.w     #0x1, w3
    29ec:	81 18 dd    	sl.w      w3, w1, w1
    29ee:	81 80 ea    	com.w     w1, w1
    29f0:	81 00 61    	and.w     w2, w1, w1
    29f2:	01 08 78    	mov.w     w1, [w0]
    29f4:	1e 00 78    	mov.w     [w14], w0
    29f6:	10 00 90    	mov.w     [w0+2], w0
    29f8:	9e 00 78    	mov.w     [w14], w1
    29fa:	91 00 90    	mov.w     [w1+2], w1
    29fc:	11 01 78    	mov.w     [w1], w2
    29fe:	9e 00 78    	mov.w     [w14], w1
    2a00:	e1 40 90    	mov.b     [w1+6], w1
    2a02:	81 80 fb    	ze        w1, w1
    2a04:	13 00 20    	mov.w     #0x1, w3
    2a06:	81 18 dd    	sl.w      w3, w1, w1
    2a08:	81 80 ea    	com.w     w1, w1
    2a0a:	81 00 61    	and.w     w2, w1, w1
    2a0c:	01 08 78    	mov.w     w1, [w0]
    2a0e:	00 80 fa    	ulnk      
    2a10:	00 00 06    	return    

00002a12 <_led_on>:
    2a12:	02 00 fa    	lnk       #0x2
    2a14:	00 0f 78    	mov.w     w0, [w14]
    2a16:	1e 00 78    	mov.w     [w14], w0
    2a18:	10 00 78    	mov.w     [w0], w0
    2a1a:	9e 00 78    	mov.w     [w14], w1
    2a1c:	91 00 78    	mov.w     [w1], w1
    2a1e:	11 01 78    	mov.w     [w1], w2
    2a20:	9e 00 78    	mov.w     [w14], w1
    2a22:	e1 40 90    	mov.b     [w1+6], w1
    2a24:	81 80 fb    	ze        w1, w1
    2a26:	13 00 20    	mov.w     #0x1, w3
    2a28:	81 18 dd    	sl.w      w3, w1, w1
    2a2a:	82 80 70    	ior.w     w1, w2, w1
    2a2c:	01 08 78    	mov.w     w1, [w0]
    2a2e:	00 80 fa    	ulnk      
    2a30:	00 00 06    	return    

00002a32 <_led_off>:
    2a32:	02 00 fa    	lnk       #0x2
    2a34:	00 0f 78    	mov.w     w0, [w14]
    2a36:	1e 00 78    	mov.w     [w14], w0
    2a38:	10 00 78    	mov.w     [w0], w0
    2a3a:	9e 00 78    	mov.w     [w14], w1
    2a3c:	91 00 78    	mov.w     [w1], w1
    2a3e:	11 01 78    	mov.w     [w1], w2
    2a40:	9e 00 78    	mov.w     [w14], w1
    2a42:	e1 40 90    	mov.b     [w1+6], w1
    2a44:	81 80 fb    	ze        w1, w1
    2a46:	13 00 20    	mov.w     #0x1, w3
    2a48:	81 18 dd    	sl.w      w3, w1, w1
    2a4a:	81 80 ea    	com.w     w1, w1
    2a4c:	81 00 61    	and.w     w2, w1, w1
    2a4e:	01 08 78    	mov.w     w1, [w0]
    2a50:	00 80 fa    	ulnk      
    2a52:	00 00 06    	return    

00002a54 <_led_toggle>:
    2a54:	02 00 fa    	lnk       #0x2
    2a56:	00 0f 78    	mov.w     w0, [w14]
    2a58:	1e 00 78    	mov.w     [w14], w0
    2a5a:	10 00 78    	mov.w     [w0], w0
    2a5c:	9e 00 78    	mov.w     [w14], w1
    2a5e:	91 00 78    	mov.w     [w1], w1
    2a60:	11 01 78    	mov.w     [w1], w2
    2a62:	9e 00 78    	mov.w     [w14], w1
    2a64:	e1 40 90    	mov.b     [w1+6], w1
    2a66:	81 80 fb    	ze        w1, w1
    2a68:	13 00 20    	mov.w     #0x1, w3
    2a6a:	81 18 dd    	sl.w      w3, w1, w1
    2a6c:	81 00 69    	xor.w     w2, w1, w1
    2a6e:	01 08 78    	mov.w     w1, [w0]
    2a70:	00 80 fa    	ulnk      
    2a72:	00 00 06    	return    

00002a74 <_led_write>:
    2a74:	04 00 fa    	lnk       #0x4
    2a76:	00 0f 78    	mov.w     w0, [w14]
    2a78:	11 07 98    	mov.w     w1, [w14+2]
    2a7a:	1e 00 90    	mov.w     [w14+2], w0
    2a7c:	00 00 e0    	cp0.w     w0
    2a7e:	0d 00 32    	bra       Z, 0x2a9a <.L7>
    2a80:	1e 00 78    	mov.w     [w14], w0
    2a82:	10 00 78    	mov.w     [w0], w0
    2a84:	9e 00 78    	mov.w     [w14], w1
    2a86:	91 00 78    	mov.w     [w1], w1
    2a88:	11 01 78    	mov.w     [w1], w2
    2a8a:	9e 00 78    	mov.w     [w14], w1
    2a8c:	e1 40 90    	mov.b     [w1+6], w1
    2a8e:	81 80 fb    	ze        w1, w1
    2a90:	13 00 20    	mov.w     #0x1, w3
    2a92:	81 18 dd    	sl.w      w3, w1, w1
    2a94:	82 80 70    	ior.w     w1, w2, w1
    2a96:	01 08 78    	mov.w     w1, [w0]
    2a98:	0d 00 37    	bra       0x2ab4 <.L6>

00002a9a <.L7>:
    2a9a:	1e 00 78    	mov.w     [w14], w0
    2a9c:	10 00 78    	mov.w     [w0], w0
    2a9e:	9e 00 78    	mov.w     [w14], w1
    2aa0:	91 00 78    	mov.w     [w1], w1
    2aa2:	11 01 78    	mov.w     [w1], w2
    2aa4:	9e 00 78    	mov.w     [w14], w1
    2aa6:	e1 40 90    	mov.b     [w1+6], w1
    2aa8:	81 80 fb    	ze        w1, w1
    2aaa:	13 00 20    	mov.w     #0x1, w3
    2aac:	81 18 dd    	sl.w      w3, w1, w1
    2aae:	81 80 ea    	com.w     w1, w1
    2ab0:	81 00 61    	and.w     w2, w1, w1
    2ab2:	01 08 78    	mov.w     w1, [w0]

00002ab4 <.L6>:
    2ab4:	00 80 fa    	ulnk      
    2ab6:	00 00 06    	return    

00002ab8 <_led_read>:
    2ab8:	02 00 fa    	lnk       #0x2
    2aba:	00 0f 78    	mov.w     w0, [w14]
    2abc:	1e 00 78    	mov.w     [w14], w0
    2abe:	10 00 78    	mov.w     [w0], w0
    2ac0:	90 00 78    	mov.w     [w0], w1
    2ac2:	1e 00 78    	mov.w     [w14], w0
    2ac4:	60 40 90    	mov.b     [w0+6], w0
    2ac6:	00 80 fb    	ze        w0, w0
    2ac8:	12 00 20    	mov.w     #0x1, w2
    2aca:	00 10 dd    	sl.w      w2, w0, w0
    2acc:	00 80 60    	and.w     w1, w0, w0
    2ace:	00 f0 a7    	btsc.w    w0, #0xf
    2ad0:	00 00 ea    	neg.w     w0, w0
    2ad2:	00 00 ea    	neg.w     w0, w0
    2ad4:	4f 00 de    	lsr.w     w0, #0xf, w0
    2ad6:	00 80 fa    	ulnk      
    2ad8:	00 00 06    	return    

00002ada <_sw_init>:
    2ada:	0a 00 fa    	lnk       #0xa
    2adc:	00 0f 78    	mov.w     w0, [w14]
    2ade:	11 07 98    	mov.w     w1, [w14+2]
    2ae0:	22 07 98    	mov.w     w2, [w14+4]
    2ae2:	33 07 98    	mov.w     w3, [w14+6]
    2ae4:	04 4f 98    	mov.b     w4, [w14+8]
    2ae6:	1e 00 78    	mov.w     [w14], w0
    2ae8:	9e 00 90    	mov.w     [w14+2], w1
    2aea:	01 08 78    	mov.w     w1, [w0]
    2aec:	1e 00 78    	mov.w     [w14], w0
    2aee:	ae 00 90    	mov.w     [w14+4], w1
    2af0:	11 00 98    	mov.w     w1, [w0+2]
    2af2:	1e 00 78    	mov.w     [w14], w0
    2af4:	be 00 90    	mov.w     [w14+6], w1
    2af6:	21 00 98    	mov.w     w1, [w0+4]
    2af8:	1e 00 78    	mov.w     [w14], w0
    2afa:	8e 48 90    	mov.b     [w14+8], w1
    2afc:	61 40 98    	mov.b     w1, [w0+6]
    2afe:	1e 00 78    	mov.w     [w14], w0
    2b00:	20 00 90    	mov.w     [w0+4], w0
    2b02:	9e 00 78    	mov.w     [w14], w1
    2b04:	a1 00 90    	mov.w     [w1+4], w1
    2b06:	11 01 78    	mov.w     [w1], w2
    2b08:	9e 00 78    	mov.w     [w14], w1
    2b0a:	e1 40 90    	mov.b     [w1+6], w1
    2b0c:	81 80 fb    	ze        w1, w1
    2b0e:	13 00 20    	mov.w     #0x1, w3
    2b10:	81 18 dd    	sl.w      w3, w1, w1
    2b12:	81 80 ea    	com.w     w1, w1
    2b14:	81 00 61    	and.w     w2, w1, w1
    2b16:	01 08 78    	mov.w     w1, [w0]
    2b18:	1e 00 78    	mov.w     [w14], w0
    2b1a:	10 00 90    	mov.w     [w0+2], w0
    2b1c:	9e 00 78    	mov.w     [w14], w1
    2b1e:	91 00 90    	mov.w     [w1+2], w1
    2b20:	11 01 78    	mov.w     [w1], w2
    2b22:	9e 00 78    	mov.w     [w14], w1
    2b24:	e1 40 90    	mov.b     [w1+6], w1
    2b26:	81 80 fb    	ze        w1, w1
    2b28:	13 00 20    	mov.w     #0x1, w3
    2b2a:	81 18 dd    	sl.w      w3, w1, w1
    2b2c:	82 80 70    	ior.w     w1, w2, w1
    2b2e:	01 08 78    	mov.w     w1, [w0]
    2b30:	00 80 fa    	ulnk      
    2b32:	00 00 06    	return    

00002b34 <_sw_read>:
    2b34:	02 00 fa    	lnk       #0x2
    2b36:	00 0f 78    	mov.w     w0, [w14]
    2b38:	1e 00 78    	mov.w     [w14], w0
    2b3a:	10 00 78    	mov.w     [w0], w0
    2b3c:	90 00 78    	mov.w     [w0], w1
    2b3e:	1e 00 78    	mov.w     [w14], w0
    2b40:	60 40 90    	mov.b     [w0+6], w0
    2b42:	00 80 fb    	ze        w0, w0
    2b44:	12 00 20    	mov.w     #0x1, w2
    2b46:	00 10 dd    	sl.w      w2, w0, w0
    2b48:	00 80 60    	and.w     w1, w0, w0
    2b4a:	00 f0 a7    	btsc.w    w0, #0xf
    2b4c:	00 00 ea    	neg.w     w0, w0
    2b4e:	00 00 ea    	neg.w     w0, w0
    2b50:	4f 00 de    	lsr.w     w0, #0xf, w0
    2b52:	00 80 fa    	ulnk      
    2b54:	00 00 06    	return    

00002b56 <_calc_servo_pos>:
    2b56:	04 00 fa    	lnk       #0x4
    2b58:	10 07 98    	mov.w     w0, [w14+2]
    2b5a:	1e 00 90    	mov.w     [w14+2], w0
    2b5c:	a1 05 20    	mov.w     #0x5a, w1
    2b5e:	01 0f 40    	add.w     w0, w1, [w14]
    2b60:	9e 00 90    	mov.w     [w14+2], w1
    2b62:	f0 3b 26    	mov.w     #0x63bf, w0
    2b64:	00 88 b9    	mul.ss    w1, w0, w0
    2b66:	80 00 78    	mov.w     w0, w1
    2b68:	40 0b 20    	mov.w     #0xb4, w0
    2b6a:	00 01 78    	mov.w     w0, w2
    2b6c:	11 00 09    	repeat    #0x11
    2b6e:	82 00 d8    	div.sw    w1, w2
    2b70:	00 80 fa    	ulnk      
    2b72:	00 00 06    	return    

00002b74 <_main>:
    2b74:	04 00 fa    	lnk       #0x4
    2b76:	00 10 20    	mov.w     #0x100, w0
    2b78:	20 3a 88    	mov.w     w0, 0x744
    2b7a:	e9 fe 07    	rcall     0x294e <_init_ui> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b7c:	69 fa 07    	rcall     0x2050 <_init_pin> <L0> <.LFB3> <.LFE2>
    2b7e:	f2 fc 07    	rcall     0x2564 <_init_oc> <L0> <.LFB4> <.LFE3>
    2b80:	c3 f7 07    	rcall     0x1b08 <_init_spi> <L0> <.L0> <.LFB0> <.LFE22> <.Letext0> <.Ltext0>
    2b82:	d8 f5 07    	rcall     0x1734 <_init_timer> <L0> <.LFB6> <.LFE5>
    2b84:	00 83 20    	mov.w     #0x830, w0
    2b86:	00 0f 78    	mov.w     w0, [w14]
    2b88:	60 84 20    	mov.w     #0x846, w0
    2b8a:	10 07 98    	mov.w     w0, [w14+2]
    2b8c:	00 00 eb    	clr.w     w0
    2b8e:	e3 ff 07    	rcall     0x2b56 <_calc_servo_pos> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2b90:	00 01 78    	mov.w     w0, w2
    2b92:	90 b9 2b    	mov.w     #0xbb99, w0
    2b94:	61 b1 23    	mov.w     #0x3b16, w1
    2b96:	80 9f be    	mov.d     w0, [w15++]
    2b98:	82 01 78    	mov.w     w2, w3
    2b9a:	46 03 28    	mov.w     #0x8034, w6
    2b9c:	77 a3 23    	mov.w     #0x3a37, w7
    2b9e:	a4 70 2d    	mov.w     #0xd70a, w4
    2ba0:	35 ca 23    	mov.w     #0x3ca3, w5
    2ba2:	a2 a8 20    	mov.w     #0xa8a, w2
    2ba4:	9e 00 78    	mov.w     [w14], w1
    2ba6:	80 9e 20    	mov.w     #0x9e8, w0
    2ba8:	3a fe 07    	rcall     0x281e <_oc_servo> <L0> <.LFB8> <.LFE7>
    2baa:	e4 87 57    	sub.w     w15, #0x4, w15
    2bac:	d0 02 20    	mov.w     #0x2d, w0
    2bae:	d3 ff 07    	rcall     0x2b56 <_calc_servo_pos> <L0> <.L0> <.LFB0> <.LFE8> <.Letext0> <.Ltext0>
    2bb0:	80 00 78    	mov.w     w0, w1
    2bb2:	1e 00 78    	mov.w     [w14], w0
    2bb4:	51 fc 07    	rcall     0x2458 <_pin_write> <L0> <.LFB11> <.LFE10>
    2bb6:	00 80 fa    	ulnk      
    2bb8:	00 00 06    	return    
Disassembly of section .dinit:

00002bba <.dinit>:
    2bba:	00 08 00    	nop       
    2bbc:	30 00 00    	nop       
    2bbe:	80 00 00    	nop       
    2bc0:	30 08 00    	nop       
    2bc2:	b8 01 00    	nop       
    2bc4:	80 00 00    	nop       
    2bc6:	e8 09 00    	nop       
    2bc8:	a2 00 00    	nop       
    2bca:	80 00 00    	nop       
    2bcc:	f8 0a 00    	nop       
    2bce:	42 00 00    	nop       
    2bd0:	80 00 00    	nop       
    2bd2:	3a 0b 00    	nop       
    2bd4:	10 00 00    	nop       
    2bd6:	82 00 00    	nop       
    2bd8:	bd 37 86    	mov.w     0xc6f6, w13
    2bda:	33 bd 37    	bra       0xffffa642
    2bdc:	06 35 bd    	subr.w    0x1506
    2bde:	37 86 36    	bra       LEU, 0xffff384e
    2be0:	bd 37 86    	mov.w     0xc6f6, w13
    2be2:	37 00 00    	nop       
    2be4:	8a 0a 00    	nop       
    2be6:	6e 00 00    	nop       
    2be8:	80 00 00    	nop       
    2bea:	00 00 00    	nop       
Disassembly of section .text:

00002bec <_parity>:

#include "common.h"

uint8_t parity(uint16_t v)
{
    2bec:	02 00 fa    	lnk       #0x2
    2bee:	00 0f 78    	mov.w     w0, [w14]
    v ^= v >> 8;
    2bf0:	1e 00 78    	mov.w     [w14], w0
    2bf2:	48 00 de    	lsr.w     w0, #0x8, w0
    2bf4:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 4;
    2bf6:	1e 00 78    	mov.w     [w14], w0
    2bf8:	44 00 de    	lsr.w     w0, #0x4, w0
    2bfa:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 2;
    2bfc:	1e 00 78    	mov.w     [w14], w0
    2bfe:	42 00 de    	lsr.w     w0, #0x2, w0
    2c00:	1e 0f 68    	xor.w     w0, [w14], [w14]
    v ^= v >> 1;
    2c02:	1e 00 78    	mov.w     [w14], w0
    2c04:	00 00 d1    	lsr.w     w0, w0
    2c06:	1e 0f 68    	xor.w     w0, [w14], [w14]
    return v & 1;
    2c08:	1e 00 78    	mov.w     [w14], w0
    2c0a:	00 40 78    	mov.b     w0, w0
    2c0c:	61 40 60    	and.b     w0, #0x1, w0
}
    2c0e:	00 80 fa    	ulnk      
    2c10:	00 00 06    	return    
Disassembly of section .isr:

00002c12 <__DefaultInterrupt>:
    2c12:	00 40 da    	break     
    2c14:	00 00 fe    	reset     
